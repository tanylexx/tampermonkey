{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"AC-baidu:重定向优化百度搜狗谷歌必应搜索_favicon_双列","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["www.baidu.com"],"orig_excludes":["*://*.google*/sorry*"],"orig_includes":["*://ipv6.baidu.com/*","*://www.baidu.com/*","*://www1.baidu.com/*","*://m.baidu.com/*","*://xueshu.baidu.com/s*","*://www.so.com/s?*","*://*.bing.com/*","*://encrypted.google.*/search*","*://*.google*/search*","*://*.google*/webhp*","*://*.zhihu.com/*","*://*duckduckgo.com/*","*://*.dogedoge.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"Config":"s{\"isRedirectEnable\":false,\"isAdsEnable\":false,\"isAutopage\":true,\"isBlockEnable\":false,\"isBlockDisplay\":false,\"isBlockBtnNotDisplay\":false,\"AdsStyleEnable\":true,\"baidu\":{\"name\":\"baidu\",\"AdsStyleMode\":\"2\",\"HuYanMode\":false},\"google\":{\"name\":\"google\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"bing\":{\"name\":\"bing\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"duck\":{\"name\":\"duck\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"doge\":{\"name\":\"doge\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"sogou\":{\"name\":\"sogou\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"Style_BaiduLite\":false,\"defaultHuYanColor\":\"#DEF1EF\",\"isUserColorEnable\":true,\"isFaviconEnable\":true,\"defaultFaviconUrl\":\"https://ae01.alicdn.com/kf/HTB1dRY0X8OD3KVjSZFFq6An9pXay.jpg\",\"doDisableSug\":true,\"isRightDisplayEnable\":false,\"isCounterEnable\":false,\"isALineEnable\":false,\"isUserStyleEnable\":false,\"normalizeDuck\":true,\"isEnLang\":false,\"isGooleInBaiduModeEnable\":false,\"UserBlockList\":[],\"UserStyleText\":\"/**计数器的颜色样式*/\\ndiv .AC-CounterT{\\n  background: #FD9999;\\n}\\n/**右侧栏的样式-其实不开启更好看一些*/\\n#content_right{\\n  padding: 20px 15px 15px;\\n  border-radius: 5px;\\n  background-color: #fff;\\n  box-sizing: border-box;\\n  box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -webkit-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -moz-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n}\\n/****可以加一些自己的背景图片,替换引号内的内容为可外链的图片即可****/\\nbody[baidu]{\\n  background-repeat: repeat-y;\\n  background-size: 100%;\\n  background-attachment:fixed;\\n  background-image: url('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1564756277250&di=868b9eac9be14df1dedd8c7d6a710844&imgtype=0&src=http%3A%2F%2Fphotocdn.sohu.com%2F20130530%2FImg377502333.jpg');\\n}\\n/*****窗口背景的透明虚化效果*****/\\nbody>#wrapper,body>.wrap,body>#main,body #appbar,body #hdtbSum{\\n  background: rgba(225,225,225,0.8);\\n}\\n/**隐藏首页的大图标-修复可能导致外援样式异常**/\\nbody[baidu] #s_lg_img_new{\\n  display:none !important;\\n}\\n#wrapper #content_left .result, #wrapper #content_left .c-container{\\n  border-radius: 5px;\\n}\",\"oldVersion\":\"24.12\",\"lastSaveTime\":1604039190545}"},"ts":1604039194922},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97/code/AC-baidu:%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2_favicon_%E5%8F%8C%E5%88%97.user.js","uuid":"cfac0ede-9cb2-4aab-a0e5-fc7d3ec59c3a","source":"","resources":[{"meta":{"name":"baiduCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduCommonStyle.css?t=24.12","ts":1605621954415,"mimetype":"text/css"},"source":""},{"meta":{"name":"baiduOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduOnePageStyle.css?t=24.12","ts":1605621954421,"mimetype":"text/css"},"source":"I3dyYXBwZXJfd3JhcHBlciAjY29udGFpbmVye3dpZHRoOjEwMCU7bWFyZ2luLWxlZnQ6dW5zZXR9Zm9ybS5mbXtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOnVuc2V0fWJvZHlbYmFpZHVdIC5wYWdlZm9vdC5nanttYXJnaW4tdG9wOjEwMHB4fSNyZXN1bHRfbG9nb3twb3NpdGlvbjpyZWxhdGl2ZX0jc190YWIgYiwjc190YWIgYXtwb3NpdGlvbjpyZWxhdGl2ZX0jd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXJ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDoyMCU7d2lkdGg6NjAlfSN3cmFwcGVyICNjb250ZW50X2xlZnQsI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjcnMsI3dyYXBwZXIgI3BhZ2V7dG9wOjM1cHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjA7d2lkdGg6NDAlIWltcG9ydGFudDttaW4td2lkdGg6NjcwcHg7ZmxvYXQ6dW5zZXQ7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luOjAgYXV0b30jd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7cGFkZGluZy1sZWZ0OjIwcHh9I3dyYXBwZXIgI3BhZ2V7YmFja2dyb3VuZDp1bnNldH0jd3JhcHBlciAjcnMgdGh7dGV4dC1hbGlnbjpjZW50ZXJ9I3dyYXBwZXIgI3Jze3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjozMHB4IGF1dG8gLTIwcHh9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAuYy1jb250YWluZXJ7d2lkdGg6MTAwJSFpbXBvcnRhbnQ7bWluLXdpZHRoOjY1MHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTAwMHB4KXsjd3JhcHBlciAjY29udGVudF9sZWZ0LCN3cmFwcGVyICNyc3ttaW4td2lkdGg6ODAwcHh9fSN3cmFwcGVyICNjb250ZW50X3JpZ2h0e21hcmdpbi1yaWdodDpjYWxjKDE1dncgLSAyMTBweCk7ZGlzcGxheTpub25lfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTYwMHB4KXsjd3JhcHBlciAjY29udGVudF9yaWdodHtkaXNwbGF5OmJsb2NrO2Zsb2F0OnVuc2V0O3Bvc2l0aW9uOmFic29sdXRlfX0jd3JhcHBlciAjcGFnZSBhLCN3cmFwcGVyICNwYWdlIHN0cm9uZ3ttYXJnaW4tcmlnaHQ6MjJweCFpbXBvcnRhbnR9I3dyYXBwZXIgI3BhZ2UgLnBhZ2UtaW5uZXJ7cGFkZGluZy1sZWZ0OjIycHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnNfdGFiX2lubmVye2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fSNjb250YWluZXIgLmhpbnRfY29tbW9uX3Jlc3RvcHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OmNhbGMoNDV2dyAtIDUwMHB4KTttYXJnaW4tdG9wOjI1cHh9LkFDLnNwLXNlcGFyYXRvcnt3aWR0aDphdXRvfSNzZWotY29udGFpbmVye3BhZGRpbmctbGVmdDpjYWxjKDQ0JSAtIDQ3OHB4KSFpbXBvcnRhbnR9LnNfZm9ybV93cmFwcGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSN3cmFwcGVyICNzX3RhYntwYWRkaW5nLWxlZnQ6MDttYXJnaW4tbGVmdDowO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSN3cmFwcGVyICNjb250YWluZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsI3dyYXBwZXIgI2NvbnRhaW5lciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXN7d2lkdGg6NjklO21hcmdpbi1sZWZ0OjE2JX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjE0NTBweCl7Zm9ybS5mbSAuc19pcHRfd3IuYmd7bWluLXdpZHRoOjMzMHB4fX0="},{"meta":{"name":"baiduTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduTwoPageStyle.css?t=24.12","ts":1605621954356,"mimetype":"text/css"},"source":"I3dyYXBwZXJfd3JhcHBlciAjY29udGFpbmVye3dpZHRoOmF1dG99Zm9ybS5mbXtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOnVuc2V0fSNzX3RhYiBiLCNzX3RhYiBhe3Bvc2l0aW9uOnJlbGF0aXZlfSN3cmFwcGVyICNzX3RhYntwYWRkaW5nLWxlZnQ6MDttYXJnaW4tbGVmdDowO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAuc2VhcmNoX3Rvb2xfY29udGVyLCN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAubnVtc3t3aWR0aDo4MCU7bWFyZ2luLWxlZnQ6MTAlfSN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciwuaGludF9jb21tb25fcmVzdG9wLCNoZWFkZXJfdG9wX2Jhcntwb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0OjEwJTt3aWR0aDo4MCV9I3dyYXBwZXIgI2hlYWRlcl90b3BfYmFye21hcmdpbi1ib3R0b206MH1ib2R5ICNjb250YWluZXIuc2FtX25ld2dyaWQgI2NvbnRlbnRfbGVmdHt3aWR0aDo4MCV9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdHtkaXNwbGF5OmlubGluZS1ncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczo1MCUgNTAlO2dyaWQtdGVtcGxhdGUtYXJlYXM6InhtYWluIHhtYWluIjttYXJnaW46MCBhdXRvO3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctbGVmdDo1JTtmbG9hdDp1bnNldDt3aWR0aDo4MCU7bWFyZ2luLWxlZnQ6NyU7bWFyZ2luLWJvdHRvbTozMHB4fWJvZHlbbmV3c10gI3dyYXBwZXIgI2NvbnRlbnRfbGVmdD5kaXY6bm90KFtjbGFzc10pOm5vdChbaWRdKXtkaXNwbGF5OmlubGluZS1ncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczo1MCUgNTAlO2dyaWQtdGVtcGxhdGUtYXJlYXM6InhtYWluIHhtYWluIn0jd3JhcHBlciAjY29udGVudF9yaWdodHtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fSN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lciAjcnN7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjAgYXV0b30jd3JhcHBlciAjcGFnZXttaW4td2lkdGg6NzEwcHg7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtwYWRkaW5nOjVweCAxMHB4O21hcmdpbjowIGF1dG87dGV4dC1hbGlnbjpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmV9I3dyYXBwZXIgI3BhZ2UgLnBhZ2UtaW5uZXJ7cGFkZGluZy1sZWZ0OjB9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LCN3cmFwcGVyICNjb250ZW50X2xlZnQgLmMtY29udGFpbmVye3dpZHRoOnVuc2V0IWltcG9ydGFudDttYXgtd2lkdGg6MTAwJTttYXJnaW4tbGVmdDo1cHg7bWFyZ2luLXJpZ2h0OjE1cHh9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdD4qOm5vdChbY2xhc3MqPXJlc3VsdF0pOm5vdChbY2xhc3MqPWMtZ3JvdXAtd3JhcHBlcl0pe2dyaWQtY29sdW1uLXN0YXJ0OjE7Z3JpZC1jb2x1bW4tZW5kOnhtYWluLWVuZH0uYy1jb250YWluZXIgaDMgYXt6LWluZGV4OjF9LkFDLnNwLXNlcGFyYXRvcnt3aWR0aDphdXRvfSNzZWotY29udGFpbmVye3BhZGRpbmctbGVmdDpjYWxjKDEyJSAtIDExM3B4KSFpbXBvcnRhbnR9LnNfZm9ybV93cmFwcGVye2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpmbGV4fSN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAuc2VhcmNoX3Rvb2xfY29udGVyLCN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAubnVtc3t3aWR0aDo4MCV9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMzg4cHgpe2Zvcm0uZm0gLnNfaXB0X3dyLmJne21pbi13aWR0aDo0MDBweH0ud3JhcHBlcl9uZXcgI3Jlc3VsdF9sb2dve21hcmdpbi1sZWZ0Oi0xMDBweH19"},{"meta":{"name":"baiduLiteStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduLiteStyle.css?t=24.12","ts":1605621954228,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/googleCommonStyle.css?t=24.12","ts":1605621954352,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/googleOnePageStyle.css?t=24.12","ts":1605621954420,"mimetype":"text/css"},"source":"I3Jzb3twb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDp1bnNldH0jcnNvIC5qVW1rRmI6aG92ZXJ7bWFyZ2luLWJvdHRvbTozMHB4O21hcmdpbi1sZWZ0OjIwcHh9I3JzbyAuZ3t3aWR0aDp1bnNldDttYXJnaW4tbGVmdDoyMHB4O292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjAgMjBweCAxNXB4O21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjMwcHg7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaXppbmc6Ym9yZGVyLWJveDt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHN9LnNlYXJjaD4jaXJlcyAjcnNvPi5ne21heC13aWR0aDp1bnNldH0jbWFpbiAubXcgI3Joc3tkaXNwbGF5Om5vbmV9I21haW4gLm13e21heC13aWR0aDp1bnNldH0jbWFpbiAjY250LCNjbnQgI2NlbnRlcl9jb2wsI2NudCAjZm9vdHt3aWR0aDo1MHZ3O21hcmdpbjowIGF1dG99Ym9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCxib2R5ICN0b3BfbmF2LGJvZHkgI2ZiYXJ7bWluLXdpZHRoOnVuc2V0fSNyc28gZy1zY3JvbGxpbmctY2Fyb3VzZWx7bWFyZ2luOnVuc2V0O21hcmdpbi1sZWZ0OjIwcHh9LmNvbHt3aWR0aDoxMDAlIWltcG9ydGFudH0uY29sICNjZW50ZXJfY29se3dpZHRoOjEwMCUhaW1wb3J0YW50O21hcmdpbi1sZWZ0OnVuc2V0IWltcG9ydGFudH0uc3JwIC5iaWcgI3RzZnt3aWR0aDo4MzNweH0uc3JwIGZvcm17bWFyZ2luOjAgYXV0b30jdG9wX25hdnttaW4td2lkdGg6dW5zZXR9LnNycCBmb3JtIGRpdltqc2NvbnRyb2xsZXJde21hcmdpbi1sZWZ0OnVuc2V0O21hcmdpbjowIGF1dG99Zy1zZWN0aW9uLXdpdGgtaGVhZGVye3RleHQtYWxpZ246Y2VudGVyfQ=="},{"meta":{"name":"googleTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/googleTwoPageStyle.css?t=24.12","ts":1605621954417,"mimetype":"text/css"},"source":"I3Jzb3twb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDp1bnNldH0jcnNvIC5qVW1rRmI6aG92ZXJ7bWFyZ2luLWJvdHRvbTozMHB4O21hcmdpbi1sZWZ0OjIwcHh9I3JzbyAuZywudmtfY3t3aWR0aDp1bnNldDttYXJnaW4tbGVmdDoyMHB4O292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjEwcHggMjBweCAxNXB4O21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjI1cHg7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaXppbmc6Ym9yZGVyLWJveDt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHN9LnNlYXJjaD4jaXJlcyAjcnNvPi5ne21heC13aWR0aDp1bnNldH0jbWFpbiAubXcgI3Joc3tkaXNwbGF5Om5vbmV9I21haW4gLm13e21heC13aWR0aDp1bnNldH0jbWFpbiAjY250LCNjbnQgI2NlbnRlcl9jb2wsI2NudCAjZm9vdHt3aWR0aDo4MHZ3O21hcmdpbjowIGF1dG99Ym9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCxib2R5ICN0b3BfbmF2LGJvZHkgI2ZiYXJ7bWluLXdpZHRoOnVuc2V0fSNyc28gLkNPRW9pZHttYXJnaW46dW5zZXR9LmNvbHt3aWR0aDoxMDAlIWltcG9ydGFudH0uY29sICNjZW50ZXJfY29se3dpZHRoOjEwMCUhaW1wb3J0YW50O21hcmdpbi1sZWZ0OnVuc2V0IWltcG9ydGFudH0uc3JnLCNyc297ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maXQsbWlubWF4KDUwJSwxZnIpKTtncmlkLXRlbXBsYXRlLWFyZWFzOiJ4bWFpbiB4bWFpbiJ9I3Jzbz5kaXY6bm90KC5nKSwjcnNvIC5zcmd7Z3JpZC1jb2x1bW4tc3RhcnQ6MTtncmlkLWNvbHVtbi1lbmQ6eG1haW4tZW5kfS5zcnAgZm9ybXttYXJnaW46MCBhdXRvfS5zcnAgZm9ybSBkaXZbanNjb250cm9sbGVyXXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW46MCBhdXRvfWctc2VjdGlvbi13aXRoLWhlYWRlcnt0ZXh0LWFsaWduOmNlbnRlcn0="},{"meta":{"name":"bingCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/bingCommonStyle.css?t=24.12","ts":1605621954418,"mimetype":"text/css"},"source":"Ym9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9I2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3Qpe3dpZHRoOjY3MHB4O3BhZGRpbmc6MTJweCAyMHB4IWltcG9ydGFudDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToyNXB4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7b3ZlcmZsb3c6aGlkZGVufSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhLCNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhe3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiMzNDc2ZDJ9I2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGEsI2JfcmVzdWx0cyBoMiBzdHJvbmd7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc2l6ZTptZWRpdW19I2JfY29udGVudCAjYl9yZXN1bHRzPmxpOmhvdmVye2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDAsMCwuMyk7YmFja2dyb3VuZDojZmNmY2ZjIWltcG9ydGFudDtib3gtc2hhZG93OjAgMCAxcHggZ3JleTstd2Via2l0LWJveC1zaGFkb3c6MCAwIDFweCBncmV5Oy1tb3otYm94LXNoYWRvdzowIDAgMXB4IGdyYXl9I2JfY29udGVudD4jYl9yZXN1bHRzIGxpOm5vdCgjbWZhX3Jvb3QpIGgye2JhY2tncm91bmQtY29sb3I6I2Y4ZjhmODttYXJnaW46LTEycHggLTIwcHggMTBweDtwYWRkaW5nOjhweCAyMHB4IDVweDtib3JkZXItcmFkaXVzOjVweCA1cHggMCAwfWEsYSBzdHJvbmd7dGV4dC1kZWNvcmF0aW9uOm5vbmV9I2JfY29udGVudCAjYl9yZXN1bHRzIGEgc3Ryb25nLCNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhIHN0cm9uZ3t0ZXh0LWRlY29yYXRpb246bm9uZX0uYl9hbGdvOmZpcnN0LWNoaWxkOmhvdmVyIGgyIGF7dGV4dC1kZWNvcmF0aW9uOm5vbmUhaW1wb3J0YW50fSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhOmhvdmVyOmFmdGVyLCNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOmhvdmVyOmFmdGVye2xlZnQ6MDt3aWR0aDoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtc30jYl9jb250ZW50ICNiX3Jlc3VsdHMgYTpob3ZlciwjYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX0jYl9jb250ZW50ICNiX3Jlc3VsdHMgYTphZnRlciwjYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTphZnRlcntjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMzNDc2ZDI7Ym90dG9tOi0ycHg7bGVmdDoxMDAlO3dpZHRoOjA7LXdlYmtpdC10cmFuc2l0aW9uOndpZHRoIDM1MG1zLGxlZnQgMzUwbXM7LW1vei10cmFuc2l0aW9uOndpZHRoIDM1MG1zLGxlZnQgMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtcyxsZWZ0IDM1MG1zfSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQsI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6dmlzaXRlZCBzdHJvbmcsI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZCwjYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgaDIgYTp2aXNpdGVkIHN0cm9uZ3tjb2xvcjojNjA5fSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlcntsZWZ0OjA7d2lkdGg6MTAwJTstd2Via2l0LXRyYW5zaXRpb246d2lkdGggMzUwbXM7LW1vei10cmFuc2l0aW9uOndpZHRoIDM1MG1zO3RyYW5zaXRpb246d2lkdGggMzUwbXN9I2JfY29udGVudD5vbCNiX2NvbnRleHR7ZGlzcGxheTpub25lfWJvZHkgI2JfaGVhZGVye2JhY2tncm91bmQtY29sb3I6I2Y1ZjVmNX0jYl9jb250ZW50IC5iX3VuZGVyU2VhcmNoYm94e21hcmdpbi10b3A6MTBweH0jYl9oZWFkZXIgLmJfc2NvcGViYXJ7bWFyZ2luOnVuc2V0fS50c2YtcD4ubG9nb2NvbnQsI3Nlai1jb250YWluZXJ7bWFyZ2luLXJpZ2h0OjM1MHB4O3RleHQtYWxpZ246Y2VudGVyfS50c2YtcD4uc2ZpYmJiY3ttYXJnaW4tcmlnaHQ6MzUwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmJfc2VhcmNoYm94Rm9ybSAuc2FfdG17dGV4dC1hbGlnbjpsZWZ0fWJvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoe21hcmdpbjowIGF1dG87cGFkZGluZy1yaWdodDoxMCV9Ym9keSAjZXN0X2NuOjphZnRlcixib2R5ICNlc3RfZW46OmFmdGVye3RyYW5zZm9ybTpzY2FsZSgxLjEsMS4zKSBwZXJzcGVjdGl2ZSguNWVtKSByb3RhdGVYKDBkZWcpOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSwxLjMpIHBlcnNwZWN0aXZlKC41ZW0pIHJvdGF0ZVgoMGRlZyl9QG1lZGlhKG1heC13aWR0aDoxMTAwcHgpe2JvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoe3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEuMnJlbSl9fSNiX2NvbnRlbnR7YW5pbWF0aW9uLW5hbWU6YW5pX2JvdHRvbVRvdG9wO2FuaW1hdGlvbi1kdXJhdGlvbjouNnM7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlfWJvZHkgI2JfaGVhZGVye2FuaW1hdGlvbi1uYW1lOmFuaV90b3BUb2J1dHRvbTthbmltYXRpb24tZHVyYXRpb246LjZzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9Ym9keXthbmltYXRpb24tbmFtZTphbmlfaGlkZVRvU2hvdzthbmltYXRpb24tZHVyYXRpb246LjZzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9LkFDLnNwLXNlcGFyYXRvcnttYXJnaW4tdG9wOi0xNXB4fUBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMnB4KTtvcGFjaXR5OjB9MjAle29wYWNpdHk6MH0zMCV7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3B7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBhbmlfdG9wVG9idXR0b217MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBhbmlfaGlkZVRvU2hvd3swJXtkaXNwbGF5Om5vbmU7b3BhY2l0eTowfTIwJXtkaXNwbGF5Om5vbmU7b3BhY2l0eTowfTMwJXtkaXNwbGF5Om5vbmU7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19"},{"meta":{"name":"bingOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/bingOnePageStyle.css?t=24.12","ts":1605621954388,"mimetype":"text/css"},"source":"I2JfY29udGVudCBhc2lkZXtkaXNwbGF5Om5vbmV9I2JfY29udGVudCAjYl9yZXN1bHRze3dpZHRoOjczdnc7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7bWF4LXdpZHRoOjEwMDBweH1ib2R5ICNiX2hlYWRlcnt3aWR0aDo3MnZ3O3RleHQtYWxpZ246Y2VudGVyO21hcmdpbjowIGF1dG99Ym9keSAjYl9jb250ZW50e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1sZWZ0OnVuc2V0O3BhZGRpbmctbGVmdDp1bnNldH0jYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCl7d2lkdGg6OTglfQ=="},{"meta":{"name":"bingTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/bingTwoPageStyle.css?t=24.12","ts":1605621954393,"mimetype":"text/css"},"source":"I2NvbnRhaW5lciAjY29udGVudF9sZWZ0IC5oaXRfdG9wX25ldywjYl9jb250ZW50IGFzaWRlLCNiX3Jlc3VsdHMgI21mYV9yb290e2Rpc3BsYXk6bm9uZX0jYl9jb250ZW50ICNiX3Jlc3VsdHN7d2lkdGg6NzN2dztncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KGF1dG8tZml0LG1pbm1heCg1MCUsMWZyKSk7Z3JpZC10ZW1wbGF0ZS1hcmVhczoieG1haW4geG1haW4iO2Rpc3BsYXk6aW5saW5lLWdyaWR9I2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3Qpe3dpZHRoOjk4JTttYXJnaW4tbGVmdDoxJX0jYl9yZXN1bHRzIC5iX2FsZ28gLmJfZGVlcCB1bHt3aWR0aDo1MCV9I2JfbXNnLCNiX3BhZ3tncmlkLWNvbHVtbi1lbmQ6eG1haW4tZW5kO2dyaWQtY29sdW1uLXN0YXJ0OjE7YmFja2dyb3VuZC1jb2xvcjojZmZmfWJvZHkgI2JfY29udGVudHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tbGVmdDp1bnNldDtwYWRkaW5nLWxlZnQ6dW5zZXR9Ym9keSAjYl9oZWFkZXJ7d2lkdGg6NzJ2dzt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46MCBhdXRvfQ=="},{"meta":{"name":"duckCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/duckCommonStyle.css?t=24.12","ts":1605621954395,"mimetype":"text/css"},"source":"Ym9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9LnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uX19pbWcsLnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uIGltZ3tkaXNwbGF5Om5vbmV9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7Zm9udC13ZWlnaHQ6NjAwfSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWlue21heC13aWR0aDo2NzBweH0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHt3aWR0aDo2NzBweDtvdmVyZmxvdzpoaWRkZW47bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MjVweDtib3JkZXItcmFkaXVzOjVweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDAsMCwuMSk7dHJhbnNpdGlvbjphbGwgLjI1cyBjdWJpYy1iZXppZXIoLjIzLDEsLjMyLDEpIDBzfSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX3RpdGxlIGF7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7bWF4LXdpZHRoOjY0MHB4O2NvbG9yOiMzNDc2ZDI7Zm9udC1zaXplOnNtYWxsZXJ9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fYm9keXtwYWRkaW5nOjEycHggMjBweCFpbXBvcnRhbnR9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXJ7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4zKTtib3gtc2hhZG93OjAgMCAxcHggZ3JleTstd2Via2l0LWJveC1zaGFkb3c6MCAwIDFweCBncmV5Oy1tb3otYm94LXNoYWRvdzowIDAgMXB4IGdyYXl9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7YmFja2dyb3VuZC1jb2xvcjojZjhmOGY4O21hcmdpbjotMTJweCAtMjBweCAwO3BhZGRpbmc6OHB4IDIwcHggNXB4O2JvcmRlci1yYWRpdXM6NXB4IDVweCAwIDB9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTpob3ZlcjphZnRlcntsZWZ0OjA7d2lkdGg6MTAwJTstd2Via2l0LXRyYW5zaXRpb246d2lkdGggMzUwbXM7LW1vei10cmFuc2l0aW9uOndpZHRoIDM1MG1zO3RyYW5zaXRpb246d2lkdGggMzUwbXN9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTphZnRlcntjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMzNDc2ZDI7Ym90dG9tOjFweDtsZWZ0OjEwMCU7d2lkdGg6MDstd2Via2l0LXRyYW5zaXRpb246d2lkdGggMzUwbXMsbGVmdCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXMsbGVmdCAzNTBtczt0cmFuc2l0aW9uOndpZHRoIDM1MG1zLGxlZnQgMzUwbXN9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkLCNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCBzdHJvbmd7Y29sb3I6IzYwOX0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVye2xlZnQ6MDt3aWR0aDoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtc30jbGlua3Nfd3JhcHBlciAjbGlua3N7YW5pbWF0aW9uLW5hbWU6YW5pX2JvdHRvbVRvdG9wO2FuaW1hdGlvbi1kdXJhdGlvbjouM3M7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlfSNoZWFkZXJfd3JhcHBlciAuaGVhZGVyX19zZWFyY2gtd3JhcHthbmltYXRpb24tbmFtZTphbmlfbGVmdFRvcmlnaHQ7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fUBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMnB4KTtvcGFjaXR5OjB9MjAle29wYWNpdHk6MH0zMCV7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3B7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fQ=="},{"meta":{"name":"duckOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/duckOnePageStyle.css?t=24.12","ts":1605621954403,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXQ7bWFyZ2luLWxlZnQ6LTE1MHB4fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXR9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7bWluLXdpZHRoOnVuc2V0O21hcmdpbjp1bnNldH0uYm9keS0tc2VycCAuZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDp1bnNldH0="},{"meta":{"name":"duckTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/duckTwoPageStyle.css?t=24.12","ts":1605621954516,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFyLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXQ7bWFyZ2luLWxlZnQ6LTE1MHB4fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXQ7bWF4LXdpZHRoOnVuc2V0fSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFye21pbi13aWR0aDp1bnNldDttYXJnaW46dW5zZXR9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtze3dpZHRoOjgwdnc7ZGlzcGxheTppbmxpbmUtZ3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6NTAlIDUwJTtncmlkLXRlbXBsYXRlLWFyZWFzOiJ4bWFpbiB4bWFpbiJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXB7d2lkdGg6dW5zZXQ7bWFyZ2luLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLW1vcmUsI2xpbmtzIC5yZXN1bHQtLXNlcHtncmlkLWNvbHVtbi1zdGFydDoxO2dyaWQtY29sdW1uLWVuZDp4bWFpbi1lbmQ7d2lkdGg6dW5zZXQhaW1wb3J0YW50O3BhZGRpbmc6MDtwYWRkaW5nLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLXNlcHttYXJnaW4tYm90dG9tOjJlbX0uYm9keS0tc2VycCAuZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDp1bnNldH0="},{"meta":{"name":"dogeCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/dogeCommonStyle.css?t=24.12","ts":1605621954422,"mimetype":"text/css"},"source":"Ym9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9LnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19pY29ue2Rpc3BsYXk6bm9uZX0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMntmb250LXdlaWdodDo2MDB9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57bWF4LXdpZHRoOjY3MHB4fSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwe3dpZHRoOjY3MHB4O292ZXJmbG93OmhpZGRlbjttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToyNXB4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHN9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdGl0bGUgYXtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczttYXgtd2lkdGg6NjQwcHg7Y29sb3I6IzM0NzZkMjtmb250LXNpemU6c21hbGxlcn0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19ib2R5e3BhZGRpbmc6MTJweCAyMHB4IWltcG9ydGFudH0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3Zlcntib3JkZXI6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjMpO2JveC1zaGFkb3c6MCAwIDFweCBncmV5Oy13ZWJraXQtYm94LXNoYWRvdzowIDAgMXB4IGdyZXk7LW1vei1ib3gtc2hhZG93OjAgMCAxcHggZ3JheX0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMntiYWNrZ3JvdW5kLWNvbG9yOiNmOGY4Zjg7bWFyZ2luOi0xMnB4IC0yMHB4IDA7cGFkZGluZzo4cHggMjBweCA1cHg7Ym9yZGVyLXJhZGl1czo1cHggNXB4IDAgMH0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmhvdmVyOmFmdGVye2xlZnQ6MDt3aWR0aDoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtc30jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmFmdGVye2NvbnRlbnQ6IiI7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLWJvdHRvbToycHggc29saWQgIzM0NzZkMjtib3R0b206MXB4O2xlZnQ6MTAwJTt3aWR0aDowOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtcyxsZWZ0IDM1MG1zOy1tb3otdHJhbnNpdGlvbjp3aWR0aCAzNTBtcyxsZWZ0IDM1MG1zO3RyYW5zaXRpb246d2lkdGggMzUwbXMsbGVmdCAzNTBtc30jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQsI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkIHN0cm9uZ3tjb2xvcjojNjA5fSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciwjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXJ7bGVmdDowO3dpZHRoOjEwMCU7LXdlYmtpdC10cmFuc2l0aW9uOndpZHRoIDM1MG1zOy1tb3otdHJhbnNpdGlvbjp3aWR0aCAzNTBtczt0cmFuc2l0aW9uOndpZHRoIDM1MG1zfSNsaW5rc193cmFwcGVyICNsaW5rc3thbmltYXRpb24tbmFtZTphbmlfYm90dG9tVG90b3A7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9I2hlYWRlcl93cmFwcGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwe2FuaW1hdGlvbi1uYW1lOmFuaV9sZWZ0VG9yaWdodDthbmltYXRpb24tZHVyYXRpb246LjNzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9LkFDLnNwLXNlcGFyYXRvcnttYXJnaW4tdG9wOi0xNXB4fUBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMnB4KTtvcGFjaXR5OjB9MjAle29wYWNpdHk6MH0zMCV7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3B7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fQ=="},{"meta":{"name":"dogeOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/dogeOnePageStyle.css?t=24.12","ts":1605621954532,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXR9QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDoxMDAwcHgpeyNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwe3dpZHRoOjEwMCV9fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZy1sZWZ0OjB9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXQ7bWF4LXdpZHRoOjg2MHB4fSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFye21pbi13aWR0aDp1bnNldDttYXJnaW46dW5zZXR9LmJvZHktLXNlcnAgLmZvb3RlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtwYWRkaW5nLWxlZnQ6dW5zZXR9"},{"meta":{"name":"dogeTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/dogeTwoPageStyle.css?t=24.12","ts":1605621954537,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFyLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXQ7bWFyZ2luLWxlZnQ6LTE1MHB4fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXQ7bWF4LXdpZHRoOnVuc2V0fSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFye21pbi13aWR0aDp1bnNldDttYXJnaW46dW5zZXR9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtze3dpZHRoOjgwdnc7ZGlzcGxheTppbmxpbmUtZ3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6NTAlIDUwJTtncmlkLXRlbXBsYXRlLWFyZWFzOiJ4bWFpbiB4bWFpbiJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXB7d2lkdGg6dW5zZXQ7bWFyZ2luLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLW1vcmUsI2xpbmtzIC5yZXN1bHQtLXNlcHtncmlkLWNvbHVtbi1zdGFydDoxO2dyaWQtY29sdW1uLWVuZDp4bWFpbi1lbmQ7d2lkdGg6dW5zZXQhaW1wb3J0YW50O3BhZGRpbmc6MDtwYWRkaW5nLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLXNlcHttYXJnaW4tYm90dG9tOjJlbX0uYm9keS0tc2VycCAuZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDp1bnNldH0="},{"meta":{"name":"HuYanStyle.css","url":"http://ibaidu.ntaow.com/newcss/HuYanStyle.css?t=24.12","ts":1605621954539,"mimetype":"text/css"},"source":"Ym9keVtiYWlkdV0sI3dyYXBwZXIgI2hlYWQsI3dyYXBwZXIgI3NfdGFiLGZvcm0uZm0gLnNfaXB0X3dyLmJne2JhY2tncm91bmQtY29sb3I6I2ZmZn0jd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AsI3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LCN3cmFwcGVyICNjb250ZW50X2xlZnQgYXJ0aWNsZSwjd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciwjd3JhcHBlciAjcnMsI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7YmFja2dyb3VuZC1jb2xvcjojYWFhO2JvcmRlcjoxcHggZG91YmxlICNhMmQ3ZDQ7Ym9yZGVyLXJhZGl1czowfSN3cmFwcGVyICNjb250ZW50X2xlZnQgLnJlc3VsdC1vcDpob3Zlciwjd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQ6aG92ZXIsI3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LW9wOmhvdmVyIGFydGljbGV7YmFja2dyb3VuZC1jb2xvcjojY2NjIWltcG9ydGFudH0jd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQgaDMsI3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LW9wIGgzLCN3cmFwcGVyICNjb250ZW50X2xlZnQgLmMtY29udGFpbmVyIGgzLCN3cmFwcGVyICNycyAudHR7YmFja2dyb3VuZC1jb2xvcjojYmJifS5uYV9jbnQgLm53c19pdG0sLm53c19pdG1iLCNiX2NvbnRlbnQgI2JfcmVzdWx0cz5saTpub3QoI21mYV9yb290KSxib2R5ICNiX2hlYWRlcntiYWNrZ3JvdW5kLWNvbG9yOiNhYWE7Ym9yZGVyOjFweCBkb3VibGUgI2EyZDdkNDtib3JkZXItcmFkaXVzOjB9I2JfY29udGVudCAjYl9yZXN1bHRzIGxpOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2NjYyFpbXBvcnRhbnR9I2JfY29udGVudCAjYl9yZXN1bHRzIGxpIGgye2JhY2tncm91bmQtY29sb3I6I2JiYn1ib2R5W2dvb2dsZV17YmFja2dyb3VuZC1jb2xvcjojZmRmZGZkfSNyc28gLmcsLmJrV01nZD4uZywuYmtXTWdkIGctaW5uZXItY2FyZCwjcmhzY29sICNyaHMsI3Joc2NvbCAjcmhzIC5nPmRpdiwuYzJ4elRiIC5nLC5ydVRjSWQgLmcsLmZtMDZJZiAuZywuY1VuUUtlIC5nLC5IYW5RbWYgLmcsI3JzbyAuZywjcnNvPmRpdjpub3QoLmcpPip7YmFja2dyb3VuZC1jb2xvcjojYWFhO2JvcmRlcjoxcHggc29saWQgIzljZDJjZmFhO2JvcmRlci1yYWRpdXM6MH0jcnNvIC5nOmhvdmVyLC5ia1dNZ2Q+Lmc6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojY2NjIWltcG9ydGFudDtib3JkZXI6MXB4IGRvdWJsZSAjOWNkMmNmfS5ia1dNZ2QgLmcgZGl2LnIsI3JzbyAuZyBoM3tiYWNrZ3JvdW5kLWNvbG9yOiNiYmJ9Ym9keVtzb2dvdV0sI3BhZ2ViYXJfY29udGFpbmVyIGF7YmFja2dyb3VuZC1jb2xvcjojZmRmZGZkfSNtYWluIC5yZXN1bHRzPmRpdntiYWNrZ3JvdW5kLWNvbG9yOiNhYWE7Ym9yZGVyOjFweCBzb2xpZCAjOWNkMmNmYWE7Ym9yZGVyLXJhZGl1czowfSNtYWluIC5yZXN1bHRzPmRpdjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNjY2MhaW1wb3J0YW50O2JvcmRlcjoxcHggZG91YmxlICM5Y2QyY2Z9I21haW4gLnJlc3VsdHM+ZGl2IGgze2JhY2tncm91bmQtY29sb3I6I2JiYn1ib2R5W2R1Y2tdLGJvZHlbZG9nZV17YmFja2dyb3VuZC1jb2xvcjojZmRmZGZkfSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwe2JhY2tncm91bmQtY29sb3I6I2FhYTtib3JkZXI6MXB4IHNvbGlkICM5Y2QyY2ZhYTtib3JkZXItcmFkaXVzOjB9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojY2NjIWltcG9ydGFudDtib3JkZXI6MXB4IGRvdWJsZSAjOWNkMmNmfSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgye2JhY2tncm91bmQtY29sb3I6I2JiYn0="},{"meta":{"name":"SiteConfigRules.conf","url":"http://ibaidu.ntaow.com/newcss/SiteConfigRules.conf?t=24.12","ts":1605621954543,"mimetype":"text/plain"},"source":"b25saW5lREIgPSB7DQogICBiYWlkdTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDEsDQogICAgICAgTWFpblR5cGU6ICIjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciIsDQogICAgICAgU3R5cGVfTm9ybWFsOiAiaDMudD5hLCAuYy1jb250YWluZXIgYXJ0aWNsZSBhIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5jLXNob3d1cmwiLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNjb250ZW50X2xlZnQ+I2RvdWJsZT5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dLCNjb250ZW50X2xlZnQ+ZGl2W3NyY2lkXSAqW2NsYXNzfj10XSxbY2xhc3N+PW9wX2Jlc3RfYW5zd2VyX3F1ZXN0aW9uXSIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogJy8vZGl2W0BpZD0icGFnZSJdLy9hW2NvbnRhaW5zKHRleHQoKSwiw6TCuMKLw6TCuMKAw6nCocK1IildW0BocmVmXScsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiY3NzO2RpdiNjb250ZW50X2xlZnQgPiAqIiwNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7ZGl2I2NvbnRlbnRfbGVmdCIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJjc3M7I3BhZ2UiLA0KICAgICAgICAgICBzdHlsaXNoOiAiLmF1dG9wYWdlcml6ZV9wYWdlX2luZm8sIGRpdi5zcC1zZXBhcmF0b3Ige21hcmdpbi1ib3R0b206IDEwcHggIWltcG9ydGFudDt9IiwNCiAgICAgICB9DQogICB9LA0KICAgc29nb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAyLA0KICAgICAgIE1haW5UeXBlOiAiI21haW4gLnJlc3VsdHM+ZGl2IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy5wdD5hLCBoMy52clRpdGxlPmEiLA0KICAgICAgIEZhdmljb25UeXBlOiAiY2l0ZVtpZCo9J2NhY2hlcmVzdWx0X2luZm9fJ10iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIi5yZXN1bHRzPmRpdiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vZGl2W0BpZD1cInBhZ2ViYXJfY29udGFpbmVyXCJdLy9hW0BpZD1cInNvZ291X25leHRcIl0iLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogIi8vZGl2W0BjbGFzcz0ncmVzdWx0cyddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAY2xhc3M9J3Jlc3VsdHMnXSIsIDJdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKCdwYWdlYmFyX2NvbnRhaW5lcicpIg0KICAgICAgIH0NCiAgIH0sDQogICBoYW9zb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAzLA0KICAgICAgIE1haW5UeXBlOiAiLnJlcy1saXN0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICIucmVzLWxpc3QgaDM+YSIsDQogICAgICAgRmF2aWNvblR5cGU6ICJjaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIucmVzdWx0cz5kaXYiLA0KICAgICAgIEJsb2NrVHlwZTogImgzIGEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICIvL2RpdltAaWQ9J3BhZ2UnXS8vYVt0ZXh0KCk9J8OkwrjCi8OkwrjCgMOpwqHCtT4nXSB8IGlkKCdzbmV4dCcpIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICIvL2RpdltAaWQ9J2NvbnRhaW5lciddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAaWQ9J2NvbnRhaW5lciddIiwgMl0sDQogICAgICAgICAgIHJlcGxhY2VFOiAiaWQoJ3BhZ2UnKSINCiAgICAgICB9DQogICB9LA0KICAgZ29vZ2xlOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNCwNCiAgICAgICBNYWluVHlwZTogIiNyc28gLmciLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmlVaDMwIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIjcnNvIC5nIGgzLC5feUU+ZGl2W2NsYXNzfj1fa2tdIGgzIiwNCiAgICAgICBCbG9ja1R5cGU6ICIucmM+ZGl2PmEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICdpZCgicG5uZXh0IikgfCBpZCgibmF2YmFyIG5hdmNudCBuYXYiKS8vdGRbc3Bhbl0vZm9sbG93aW5nLXNpYmxpbmc6OnRkWzFdL2EgfCBpZCgibm4iKS9wYXJlbnQ6OmEnLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogJy8vZGl2W0BpZD0icmVzIl0nLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsgImNzczsjcmVzIiwgMiBdLA0KICAgICAgICAgICByZXBsYWNlRTogJy8vZGl2W0BpZD0ibmF2Y250Il0gfCAvL2RpdltAaWQ9ImZvb3QiXVtAcm9sZT0ibmF2aWdhdGlvbiJdJw0KICAgICAgIH0NCiAgIH0sDQogICBiaW5nOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNSwNCiAgICAgICBNYWluVHlwZTogIiNiX3Jlc3VsdHM+bGkiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmJfYXR0cmlidXRpb24+Y2l0ZSIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDIiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbnNdPmgyLCNiX3Jlc3VsdHM+bGlbY2xhc3N+PWJfYWxnb10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDIgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vYVtjb250YWlucyhAY2xhc3MsXCJzYl9wYWdOXCIpXSIsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiaWQoXCJiX3Jlc3VsdHNcIikvbGlbbm90KGNvbnRhaW5zKEBjbGFzcyxcImJfcGFnXCIpIG9yIGNvbnRhaW5zKEBjbGFzcyxcImJfYW5zIGJfdG9wXCIpKV0iLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoXCJiX3Jlc3VsdHNcIikvbGlbQGNsYXNzPVwiYl9wYWdcIl0iLCAxXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJpZChcImJfcmVzdWx0c1wiKS8vbmF2W0Byb2xlPVwibmF2aWdhdGlvblwiXSIsDQogICAgICAgfQ0KICAgfSwNCiAgIGR1Y2s6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAxMCwNCiAgICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdXJsX19kb21haW4iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgyIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcyxcInNiX3BhZ05cIildIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZChcImJfcmVzdWx0c1wiKS9saVtub3QoY29udGFpbnMoQGNsYXNzLFwiYl9wYWdcIikgb3IgY29udGFpbnMoQGNsYXNzLFwiYl9hbnMgYl90b3BcIikpXSIsDQogICAgICAgICAgIEhUX2luc2VydDogWyJpZChcImJfcmVzdWx0c1wiKS9saVtAY2xhc3M9XCJiX3BhZ1wiXSIsIDFdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKFwiYl9yZXN1bHRzXCIpLy9uYXZbQHJvbGU9XCJuYXZpZ2F0aW9uXCJdIiwNCiAgICAgICB9DQogICB9LA0KICAgZG9nZTogew0KICAgICAgU2l0ZVR5cGVJRDogMTEsDQogICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X191cmxfX2RvbWFpbiIsDQogICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgIEJsb2NrVHlwZTogImgyIGEiLA0KICAgICAgcGFnZXI6ew0KICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcywgJ3Jlc3VsdC0tbW9yZScpXSIsDQogICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0c19saW5rc19kZWVwJyldIiwNCiAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoJ2xpbmtzX3dyYXBwZXInKS8vZGl2W0BpZD0nbGlua3MnXS9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldIiwgMV0sDQogICAgICAgICAgcmVwbGFjZUU6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldL2FbY29udGFpbnModGV4dCgpLCAnw6TCuMKLw6TCuMKAw6nCocK1JyldW0BocmVmXSIsDQogICAgICB9DQogICB9LA0KICAgbUJhaWR1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA2LA0KICAgICAgIE1haW5UeXBlOiAiI2JfcmVzdWx0cz5saSIsDQogICAgICAgRmF2aWNvblR5cGU6ICIuYl9hdHRyaWJ1dGlvbj5jaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICAgQ291bnRlclR5cGU6ICIjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2Fuc10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiwjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2FsZ29dPmgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgIH0sDQogICB6aGlodTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDcsDQogICB9LA0KICAgYmFpZHVfeHVlc2h1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA4LA0KICAgICAgIE1haW5UeXBlOiAiI2NvbnRlbnRfbGVmdCAucmVzdWx0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy50PmEsICNyZXN1bHRzIC5jLWNvbnRhaW5lcj4uYy1ibG9ja2EiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdC1vcCwgLmMtc2hvd3VybCIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDMiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2NvbnRlbnRfbGVmdD4jZG91YmxlPmRpdltzcmNpZF0gKltjbGFzc349dF0sW2NsYXNzfj1vcF9iZXN0X2Fuc3dlcl9xdWVzdGlvbl0sI2NvbnRlbnRfbGVmdD5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMyBhIiwNCiAgIH0sDQogICBvdGhlcjogew0KICAgICAgIFNpdGVUeXBlSUQ6IDksDQogICB9DQp9DQo="}],"requires":[{"meta":{"name":"vue.js","url":"https://cdn.staticfile.org/vue/2.6.11/vue.js","ts":1605621954132,"mimetype":"text/javascript"},"source":"LyohCiAqIFZ1ZS5qcyB2Mi42LjExCiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3UKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgogKi8KKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsKICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6CiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDoKICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5WdWUgPSBmYWN0b3J5KCkpOwp9KHRoaXMsIGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnOwoKICAvKiAgKi8KCiAgdmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7CgogIC8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpcgogIC8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuCiAgZnVuY3Rpb24gaXNVbmRlZiAodikgewogICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsCiAgfQoKICBmdW5jdGlvbiBpc0RlZiAodikgewogICAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsCiAgfQoKICBmdW5jdGlvbiBpc1RydWUgKHYpIHsKICAgIHJldHVybiB2ID09PSB0cnVlCiAgfQoKICBmdW5jdGlvbiBpc0ZhbHNlICh2KSB7CiAgICByZXR1cm4gdiA9PT0gZmFsc2UKICB9CgogIC8qKgogICAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS4KICAgKi8KICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHsKICAgIHJldHVybiAoCiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwKICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fAogICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fAogICAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJwogICAgKQogIH0KCiAgLyoqCiAgICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsCiAgICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZQogICAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS4KICAgKi8KICBmdW5jdGlvbiBpc09iamVjdCAob2JqKSB7CiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnCiAgfQoKICAvKioKICAgKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uCiAgICovCiAgdmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7CgogIGZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHsKICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpCiAgfQoKICAvKioKICAgKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlCiAgICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy4KICAgKi8KICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHsKICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJwogIH0KCiAgZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHsKICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXScKICB9CgogIC8qKgogICAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LgogICAqLwogIGZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHsKICAgIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7CiAgICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKQogIH0KCiAgZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHsKICAgIHJldHVybiAoCiAgICAgIGlzRGVmKHZhbCkgJiYKICAgICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmCiAgICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbicKICAgICkKICB9CgogIC8qKgogICAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLgogICAqLwogIGZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHsKICAgIHJldHVybiB2YWwgPT0gbnVsbAogICAgICA/ICcnCiAgICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpCiAgICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpCiAgICAgICAgOiBTdHJpbmcodmFsKQogIH0KCiAgLyoqCiAgICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuCiAgICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuCiAgICovCiAgZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkgewogICAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7CiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuCiAgfQoKICAvKioKICAgKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXkKICAgKiBpcyBpbiB0aGF0IG1hcC4KICAgKi8KICBmdW5jdGlvbiBtYWtlTWFwICgKICAgIHN0ciwKICAgIGV4cGVjdHNMb3dlckNhc2UKICApIHsKICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykgewogICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlOwogICAgfQogICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UKICAgICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9CiAgICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH0KICB9CgogIC8qKgogICAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLgogICAqLwogIHZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpOwoKICAvKioKICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuCiAgICovCiAgdmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpOwoKICAvKioKICAgKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LgogICAqLwogIGZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7CiAgICBpZiAoYXJyLmxlbmd0aCkgewogICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTsKICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSkKICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS4KICAgKi8KICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwogIGZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHsKICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KQogIH0KCiAgLyoqCiAgICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLgogICAqLwogIGZ1bmN0aW9uIGNhY2hlZCAoZm4pIHsKICAgIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHsKICAgICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07CiAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKQogICAgfSkKICB9CgogIC8qKgogICAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuCiAgICovCiAgdmFyIGNhbWVsaXplUkUgPSAvLShcdykvZzsKICB2YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikgewogICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pCiAgfSk7CgogIC8qKgogICAqIENhcGl0YWxpemUgYSBzdHJpbmcuCiAgICovCiAgdmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikgewogICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKQogIH0pOwoKICAvKioKICAgKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLgogICAqLwogIHZhciBoeXBoZW5hdGVSRSA9IC9cQihbQS1aXSkvZzsKICB2YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHsKICAgIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCkKICB9KTsKCiAgLyoqCiAgICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LAogICAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZQogICAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLgogICAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW4KICAgKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4KICAgKi8KCiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICBmdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHsKICAgIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHsKICAgICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICByZXR1cm4gbAogICAgICAgID8gbCA+IDEKICAgICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpCiAgICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKQogICAgICAgIDogZm4uY2FsbChjdHgpCiAgICB9CgogICAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoOwogICAgcmV0dXJuIGJvdW5kRm4KICB9CgogIGZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHsKICAgIHJldHVybiBmbi5iaW5kKGN0eCkKICB9CgogIHZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQKICAgID8gbmF0aXZlQmluZAogICAgOiBwb2x5ZmlsbEJpbmQ7CgogIC8qKgogICAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LgogICAqLwogIGZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7CiAgICBzdGFydCA9IHN0YXJ0IHx8IDA7CiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7CiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpOwogICAgd2hpbGUgKGktLSkgewogICAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07CiAgICB9CiAgICByZXR1cm4gcmV0CiAgfQoKICAvKioKICAgKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuCiAgICovCiAgZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHsKICAgIGZvciAodmFyIGtleSBpbiBfZnJvbSkgewogICAgICB0b1trZXldID0gX2Zyb21ba2V5XTsKICAgIH0KICAgIHJldHVybiB0bwogIH0KCiAgLyoqCiAgICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC4KICAgKi8KICBmdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7CiAgICB2YXIgcmVzID0ge307CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBpZiAoYXJyW2ldKSB7CiAgICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi8KCiAgLyoqCiAgICogUGVyZm9ybSBubyBvcGVyYXRpb24uCiAgICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlCiAgICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLgogICAqLwogIGZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9CgogIC8qKgogICAqIEFsd2F5cyByZXR1cm4gZmFsc2UuCiAgICovCiAgdmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9OwoKICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovCgogIC8qKgogICAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS4KICAgKi8KICB2YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTsKCiAgLyoqCiAgICogR2VuZXJhdGUgYSBzdHJpbmcgY29udGFpbmluZyBzdGF0aWMga2V5cyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuCiAgICovCiAgZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykgewogICAgcmV0dXJuIG1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChrZXlzLCBtKSB7CiAgICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pCiAgICB9LCBbXSkuam9pbignLCcpCiAgfQoKICAvKioKICAgKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcywKICAgKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/CiAgICovCiAgZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikgewogICAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfQogICAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpOwogICAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpOwogICAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpOwogICAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7CiAgICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7CiAgICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHsKICAgICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSkKICAgICAgICAgIH0pCiAgICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkgewogICAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKQogICAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5QikgewogICAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7CiAgICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTsKICAgICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKQogICAgICAgICAgfSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgIH0KICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7CiAgICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9CiAgfQoKICAvKioKICAgKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmUKICAgKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdAogICAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuCiAgICovCiAgZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH0KICAgIH0KICAgIHJldHVybiAtMQogIH0KCiAgLyoqCiAgICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS4KICAgKi8KICBmdW5jdGlvbiBvbmNlIChmbikgewogICAgdmFyIGNhbGxlZCA9IGZhbHNlOwogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKCFjYWxsZWQpIHsKICAgICAgICBjYWxsZWQgPSB0cnVlOwogICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7CgogIHZhciBBU1NFVF9UWVBFUyA9IFsKICAgICdjb21wb25lbnQnLAogICAgJ2RpcmVjdGl2ZScsCiAgICAnZmlsdGVyJwogIF07CgogIHZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbCiAgICAnYmVmb3JlQ3JlYXRlJywKICAgICdjcmVhdGVkJywKICAgICdiZWZvcmVNb3VudCcsCiAgICAnbW91bnRlZCcsCiAgICAnYmVmb3JlVXBkYXRlJywKICAgICd1cGRhdGVkJywKICAgICdiZWZvcmVEZXN0cm95JywKICAgICdkZXN0cm95ZWQnLAogICAgJ2FjdGl2YXRlZCcsCiAgICAnZGVhY3RpdmF0ZWQnLAogICAgJ2Vycm9yQ2FwdHVyZWQnLAogICAgJ3NlcnZlclByZWZldGNoJwogIF07CgogIC8qICAqLwoKCgogIHZhciBjb25maWcgPSAoewogICAgLyoqCiAgICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucykKICAgICAqLwogICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksCgogICAgLyoqCiAgICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLgogICAgICovCiAgICBzaWxlbnQ6IGZhbHNlLAoKICAgIC8qKgogICAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD8KICAgICAqLwogICAgcHJvZHVjdGlvblRpcDogImRldmVsb3BtZW50IiAhPT0gJ3Byb2R1Y3Rpb24nLAoKICAgIC8qKgogICAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHMKICAgICAqLwogICAgZGV2dG9vbHM6ICJkZXZlbG9wbWVudCIgIT09ICdwcm9kdWN0aW9uJywKCiAgICAvKioKICAgICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmYKICAgICAqLwogICAgcGVyZm9ybWFuY2U6IGZhbHNlLAoKICAgIC8qKgogICAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnMKICAgICAqLwogICAgZXJyb3JIYW5kbGVyOiBudWxsLAoKICAgIC8qKgogICAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zCiAgICAgKi8KICAgIHdhcm5IYW5kbGVyOiBudWxsLAoKICAgIC8qKgogICAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzCiAgICAgKi8KICAgIGlnbm9yZWRFbGVtZW50czogW10sCgogICAgLyoqCiAgICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vbgogICAgICovCiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICAgIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLAoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhCiAgICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uCiAgICAgKi8KICAgIGlzUmVzZXJ2ZWRUYWc6IG5vLAoKICAgIC8qKgogICAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnQKICAgICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uCiAgICAgKi8KICAgIGlzUmVzZXJ2ZWRBdHRyOiBubywKCiAgICAvKioKICAgICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC4KICAgICAqIFBsYXRmb3JtLWRlcGVuZGVudC4KICAgICAqLwogICAgaXNVbmtub3duRWxlbWVudDogbm8sCgogICAgLyoqCiAgICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50CiAgICAgKi8KICAgIGdldFRhZ05hbWVzcGFjZTogbm9vcCwKCiAgICAvKioKICAgICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uCiAgICAgKi8KICAgIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSwKCiAgICAvKioKICAgICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlCiAgICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuCiAgICAgKi8KICAgIG11c3RVc2VQcm9wOiBubywKCiAgICAvKioKICAgICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlscwogICAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS4KICAgICAqLwogICAgYXN5bmM6IHRydWUsCgogICAgLyoqCiAgICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29ucwogICAgICovCiAgICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LUwogIH0pOwoKICAvKiAgKi8KCiAgLyoqCiAgICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLgogICAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lCiAgICogc2tpcHBpbmcgXHUxMDAwMC1cdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlMKICAgKi8KICB2YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcdTAwQjdcdTAwQzAtXHUwMEQ2XHUwMEQ4LVx1MDBGNlx1MDBGOC1cdTAzN0RcdTAzN0YtXHUxRkZGXHUyMDBDLVx1MjAwRFx1MjAzRi1cdTIwNDBcdTIwNzAtXHUyMThGXHUyQzAwLVx1MkZFRlx1MzAwMS1cdUQ3RkZcdUY5MDAtXHVGRENGXHVGREYwLVx1RkZGRC87CgogIC8qKgogICAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgXwogICAqLwogIGZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikgewogICAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7CiAgICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGCiAgfQoKICAvKioKICAgKiBEZWZpbmUgYSBwcm9wZXJ0eS4KICAgKi8KICBmdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsLAogICAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0pOwogIH0KCiAgLyoqCiAgICogUGFyc2Ugc2ltcGxlIHBhdGguCiAgICovCiAgdmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKCJbXiIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgIi4kX1xcZF0iKSk7CiAgZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7CiAgICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7CiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH0KICAgICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dOwogICAgICB9CiAgICAgIHJldHVybiBvYmoKICAgIH0KICB9CgogIC8qICAqLwoKICAvLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz8KICB2YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTsKCiAgLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZwogIHZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJzsKICB2YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTsKICB2YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTsKICB2YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKICB2YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpOwogIHZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwOwogIHZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDsKICB2YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7CiAgdmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTsKICB2YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXC9cZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7CiAgdmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7CiAgdmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFwvKFxkKykvKTsKCiAgLy8gRmlyZWZveCBoYXMgYSAid2F0Y2giIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi4KICB2YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoOwoKICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7CiAgaWYgKGluQnJvd3NlcikgewogICAgdHJ5IHsKICAgICAgdmFyIG9wdHMgPSB7fTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7CiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NQogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7CiAgICB9IGNhdGNoIChlKSB7fQogIH0KCiAgLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlCiAgLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlYKICB2YXIgX2lzU2VydmVyOwogIHZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHsKICAgIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZAogICAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3MKICAgICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX2lzU2VydmVyID0gZmFsc2U7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBfaXNTZXJ2ZXIKICB9OwoKICAvLyBkZXRlY3QgZGV2dG9vbHMKICB2YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187CgogIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHsKICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKQogIH0KCiAgdmFyIGhhc1N5bWJvbCA9CiAgICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmCiAgICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTsKCiAgdmFyIF9TZXQ7CiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZQogIGlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7CiAgICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS4KICAgIF9TZXQgPSBTZXQ7CiAgfSBlbHNlIHsKICAgIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy4KICAgIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHsKICAgICAgZnVuY3Rpb24gU2V0ICgpIHsKICAgICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIH0KICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkgewogICAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlCiAgICAgIH07CiAgICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHsKICAgICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTsKICAgICAgfTsKICAgICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHsKICAgICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIH07CgogICAgICByZXR1cm4gU2V0OwogICAgfSgpKTsKICB9CgogIC8qICAqLwoKICB2YXIgd2FybiA9IG5vb3A7CiAgdmFyIHRpcCA9IG5vb3A7CiAgdmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2sKICB2YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTsKCiAgewogICAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7CiAgICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFx3KS9nOwogICAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyCiAgICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pCiAgICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTsKCiAgICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHsKICAgICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnOwoKICAgICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikgewogICAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTsKICAgICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCgiW1Z1ZSB3YXJuXTogIiArIG1zZyArIHRyYWNlKSk7CiAgICAgIH0KICAgIH07CgogICAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHsKICAgICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkgewogICAgICAgIGNvbnNvbGUud2FybigiW1Z1ZSB0aXBdOiAiICsgbXNnICsgKAogICAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnCiAgICAgICAgKSk7CiAgICAgIH0KICAgIH07CgogICAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHsKICAgICAgaWYgKHZtLiRyb290ID09PSB2bSkgewogICAgICAgIHJldHVybiAnPFJvb3Q+JwogICAgICB9CiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsCiAgICAgICAgPyB2bS5vcHRpb25zCiAgICAgICAgOiB2bS5faXNWdWUKICAgICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9ucwogICAgICAgICAgOiB2bTsKICAgICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnOwogICAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlOwogICAgICBpZiAoIW5hbWUgJiYgZmlsZSkgewogICAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXF0rKVwudnVlJC8pOwogICAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTsKICAgICAgfQoKICAgICAgcmV0dXJuICgKICAgICAgICAobmFtZSA/ICgiPCIgKyAoY2xhc3NpZnkobmFtZSkpICsgIj4iKSA6ICI8QW5vbnltb3VzPiIpICsKICAgICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoIiBhdCAiICsgZmlsZSkgOiAnJykKICAgICAgKQogICAgfTsKCiAgICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikgewogICAgICB2YXIgcmVzID0gJyc7CiAgICAgIHdoaWxlIChuKSB7CiAgICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH0KICAgICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfQogICAgICAgIG4gPj49IDE7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlcwogICAgfTsKCiAgICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7CiAgICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkgewogICAgICAgIHZhciB0cmVlID0gW107CiAgICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7CiAgICAgICAgd2hpbGUgKHZtKSB7CiAgICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKzsKICAgICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7CiAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7CiAgICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07CiAgICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdHJlZS5wdXNoKHZtKTsKICAgICAgICAgIHZtID0gdm0uJHBhcmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICdcblxuZm91bmQgaW5cblxuJyArIHRyZWUKICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoIiIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKQogICAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyAiLi4uICgiICsgKHZtWzFdKSArICIgcmVjdXJzaXZlIGNhbGxzKSIpCiAgICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KQogICAgICAgICAgLmpvaW4oJ1xuJykKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gKCJcblxuKGZvdW5kIGluICIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgIikiKQogICAgICB9CiAgICB9OwogIH0KCiAgLyogICovCgogIHZhciB1aWQgPSAwOwoKICAvKioKICAgKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGUKICAgKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LgogICAqLwogIHZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkgewogICAgdGhpcy5pZCA9IHVpZCsrOwogICAgdGhpcy5zdWJzID0gW107CiAgfTsKCiAgRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1YikgewogICAgdGhpcy5zdWJzLnB1c2goc3ViKTsKICB9OwoKICBEZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7CiAgICByZW1vdmUodGhpcy5zdWJzLCBzdWIpOwogIH07CgogIERlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHsKICAgIGlmIChEZXAudGFyZ2V0KSB7CiAgICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpOwogICAgfQogIH07CgogIERlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHsKICAgIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0CiAgICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpOwogICAgaWYgKCFjb25maWcuYXN5bmMpIHsKICAgICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luYwogICAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0CiAgICAgIC8vIG9yZGVyCiAgICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pOwogICAgfQogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBzdWJzW2ldLnVwZGF0ZSgpOwogICAgfQogIH07CgogIC8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC4KICAvLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXIKICAvLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS4KICBEZXAudGFyZ2V0ID0gbnVsbDsKICB2YXIgdGFyZ2V0U3RhY2sgPSBbXTsKCiAgZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7CiAgICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7CiAgICBEZXAudGFyZ2V0ID0gdGFyZ2V0OwogIH0KCiAgZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHsKICAgIHRhcmdldFN0YWNrLnBvcCgpOwogICAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdOwogIH0KCiAgLyogICovCgogIHZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlICgKICAgIHRhZywKICAgIGRhdGEsCiAgICBjaGlsZHJlbiwKICAgIHRleHQsCiAgICBlbG0sCiAgICBjb250ZXh0LAogICAgY29tcG9uZW50T3B0aW9ucywKICAgIGFzeW5jRmFjdG9yeQogICkgewogICAgdGhpcy50YWcgPSB0YWc7CiAgICB0aGlzLmRhdGEgPSBkYXRhOwogICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuOwogICAgdGhpcy50ZXh0ID0gdGV4dDsKICAgIHRoaXMuZWxtID0gZWxtOwogICAgdGhpcy5ucyA9IHVuZGVmaW5lZDsKICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDsKICAgIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkOwogICAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7CiAgICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7CiAgICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zOwogICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDsKICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkOwogICAgdGhpcy5yYXcgPSBmYWxzZTsKICAgIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTsKICAgIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTsKICAgIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7CiAgICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7CiAgICB0aGlzLmlzT25jZSA9IGZhbHNlOwogICAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7CiAgICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDsKICAgIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7CiAgfTsKCiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTsKCiAgLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LgogIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgcHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlCiAgfTsKCiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7CgogIHZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHsKICAgIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnOwoKICAgIHZhciBub2RlID0gbmV3IFZOb2RlKCk7CiAgICBub2RlLnRleHQgPSB0ZXh0OwogICAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlOwogICAgcmV0dXJuIG5vZGUKICB9OwoKICBmdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkgewogICAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSkKICB9CgogIC8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lCiAgLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zcwogIC8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseQogIC8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuCiAgZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHsKICAgIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoCiAgICAgIHZub2RlLnRhZywKICAgICAgdm5vZGUuZGF0YSwKICAgICAgLy8gIzc5NzUKICAgICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nCiAgICAgIC8vIGEgY2hpbGQuCiAgICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksCiAgICAgIHZub2RlLnRleHQsCiAgICAgIHZub2RlLmVsbSwKICAgICAgdm5vZGUuY29udGV4dCwKICAgICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucywKICAgICAgdm5vZGUuYXN5bmNGYWN0b3J5CiAgICApOwogICAgY2xvbmVkLm5zID0gdm5vZGUubnM7CiAgICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYzsKICAgIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7CiAgICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50OwogICAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDsKICAgIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7CiAgICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkOwogICAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTsKICAgIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7CiAgICByZXR1cm4gY2xvbmVkCiAgfQoKICAvKgogICAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aAogICAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZQogICAqLwoKICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTsKICB2YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTsKCiAgdmFyIG1ldGhvZHNUb1BhdGNoID0gWwogICAgJ3B1c2gnLAogICAgJ3BvcCcsCiAgICAnc2hpZnQnLAogICAgJ3Vuc2hpZnQnLAogICAgJ3NwbGljZScsCiAgICAnc29ydCcsCiAgICAncmV2ZXJzZScKICBdOwoKICAvKioKICAgKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHMKICAgKi8KICBtZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHsKICAgIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZAogICAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdOwogICAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHsKICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKCiAgICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgdmFyIG9iID0gdGhpcy5fX29iX187CiAgICAgIHZhciBpbnNlcnRlZDsKICAgICAgc3dpdGNoIChtZXRob2QpIHsKICAgICAgICBjYXNlICdwdXNoJzoKICAgICAgICBjYXNlICd1bnNoaWZ0JzoKICAgICAgICAgIGluc2VydGVkID0gYXJnczsKICAgICAgICAgIGJyZWFrCiAgICAgICAgY2FzZSAnc3BsaWNlJzoKICAgICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTsKICAgICAgICAgIGJyZWFrCiAgICAgIH0KICAgICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH0KICAgICAgLy8gbm90aWZ5IGNoYW5nZQogICAgICBvYi5kZXAubm90aWZ5KCk7CiAgICAgIHJldHVybiByZXN1bHQKICAgIH0pOwogIH0pOwoKICAvKiAgKi8KCiAgdmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7CgogIC8qKgogICAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQncwogICAqIHVwZGF0ZSBjb21wdXRhdGlvbi4KICAgKi8KICB2YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7CgogIGZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHsKICAgIHNob3VsZE9ic2VydmUgPSB2YWx1ZTsKICB9CgogIC8qKgogICAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZAogICAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXQKICAgKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdAogICAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLgogICAqLwogIHZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkgewogICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7CiAgICB0aGlzLnZtQ291bnQgPSAwOwogICAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7CiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgaWYgKGhhc1Byb3RvKSB7CiAgICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7CiAgICAgIH0KICAgICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy53YWxrKHZhbHVlKTsKICAgIH0KICB9OwoKICAvKioKICAgKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvCiAgICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuCiAgICogdmFsdWUgdHlwZSBpcyBPYmplY3QuCiAgICovCiAgT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHsKICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pOwogICAgfQogIH07CgogIC8qKgogICAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLgogICAqLwogIE9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7CiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBvYnNlcnZlKGl0ZW1zW2ldKTsKICAgIH0KICB9OwoKICAvLyBoZWxwZXJzCgogIC8qKgogICAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZwogICAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fCiAgICovCiAgZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykgewogICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KICAgIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7CiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovCiAgfQoKICAvKioKICAgKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZwogICAqIGhpZGRlbiBwcm9wZXJ0aWVzLgogICAqLwogIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7CiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgIHZhciBrZXkgPSBrZXlzW2ldOwogICAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTsKICAgIH0KICB9CgogIC8qKgogICAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLAogICAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsCiAgICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuCiAgICovCiAgZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHsKICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICB2YXIgb2I7CiAgICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHsKICAgICAgb2IgPSB2YWx1ZS5fX29iX187CiAgICB9IGVsc2UgaWYgKAogICAgICBzaG91bGRPYnNlcnZlICYmCiAgICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmCiAgICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiYKICAgICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiYKICAgICAgIXZhbHVlLl9pc1Z1ZQogICAgKSB7CiAgICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTsKICAgIH0KICAgIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7CiAgICAgIG9iLnZtQ291bnQrKzsKICAgIH0KICAgIHJldHVybiBvYgogIH0KCiAgLyoqCiAgICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LgogICAqLwogIGZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxICgKICAgIG9iaiwKICAgIGtleSwKICAgIHZhbCwKICAgIGN1c3RvbVNldHRlciwKICAgIHNoYWxsb3cKICApIHsKICAgIHZhciBkZXAgPSBuZXcgRGVwKCk7CgogICAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7CiAgICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkgewogICAgICByZXR1cm4KICAgIH0KCiAgICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnMKICAgIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7CiAgICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0OwogICAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgewogICAgICB2YWwgPSBvYmpba2V5XTsKICAgIH0KCiAgICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkgewogICAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7CiAgICAgICAgaWYgKERlcC50YXJnZXQpIHsKICAgICAgICAgIGRlcC5kZXBlbmQoKTsKICAgICAgICAgIGlmIChjaGlsZE9iKSB7CiAgICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpOwogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkgewogICAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7CiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovCiAgICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHsKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqLwogICAgICAgIGlmIChjdXN0b21TZXR0ZXIpIHsKICAgICAgICAgIGN1c3RvbVNldHRlcigpOwogICAgICAgIH0KICAgICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXIKICAgICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH0KICAgICAgICBpZiAoc2V0dGVyKSB7CiAgICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhbCA9IG5ld1ZhbDsKICAgICAgICB9CiAgICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTsKICAgICAgICBkZXAubm90aWZ5KCk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgLyoqCiAgICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kCiAgICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndAogICAqIGFscmVhZHkgZXhpc3QuCiAgICovCiAgZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7CiAgICBpZiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkKICAgICkgewogICAgICB3YXJuKCgiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogIiArICgodGFyZ2V0KSkpKTsKICAgIH0KICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkgewogICAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTsKICAgICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7CiAgICAgIHJldHVybiB2YWwKICAgIH0KICAgIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7CiAgICAgIHRhcmdldFtrZXldID0gdmFsOwogICAgICByZXR1cm4gdmFsCiAgICB9CiAgICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187CiAgICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHsKICAgICAgd2FybigKICAgICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArCiAgICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLicKICAgICAgKTsKICAgICAgcmV0dXJuIHZhbAogICAgfQogICAgaWYgKCFvYikgewogICAgICB0YXJnZXRba2V5XSA9IHZhbDsKICAgICAgcmV0dXJuIHZhbAogICAgfQogICAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTsKICAgIG9iLmRlcC5ub3RpZnkoKTsKICAgIHJldHVybiB2YWwKICB9CgogIC8qKgogICAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuCiAgICovCiAgZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkgewogICAgaWYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpCiAgICApIHsKICAgICAgd2FybigoIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6ICIgKyAoKHRhcmdldCkpKSk7CiAgICB9CiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHsKICAgICAgdGFyZ2V0LnNwbGljZShrZXksIDEpOwogICAgICByZXR1cm4KICAgIH0KICAgIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXzsKICAgIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkgewogICAgICB3YXJuKAogICAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgKwogICAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJwogICAgICApOwogICAgICByZXR1cm4KICAgIH0KICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkgewogICAgICByZXR1cm4KICAgIH0KICAgIGRlbGV0ZSB0YXJnZXRba2V5XTsKICAgIGlmICghb2IpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICBvYi5kZXAubm90aWZ5KCk7CiAgfQoKICAvKioKICAgKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZQogICAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLgogICAqLwogIGZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkgewogICAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBlID0gdmFsdWVbaV07CiAgICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkgewogICAgICAgIGRlcGVuZEFycmF5KGUpOwogICAgICB9CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgLyoqCiAgICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZQogICAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uCiAgICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuCiAgICovCiAgdmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7CgogIC8qKgogICAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnMKICAgKi8KICB7CiAgICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHsKICAgICAgaWYgKCF2bSkgewogICAgICAgIHdhcm4oCiAgICAgICAgICAib3B0aW9uIFwiIiArIGtleSArICJcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSAiICsKICAgICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLicKICAgICAgICApOwogICAgICB9CiAgICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZCkKICAgIH07CiAgfQoKICAvKioKICAgKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci4KICAgKi8KICBmdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7CiAgICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH0KICAgIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsOwoKICAgIHZhciBrZXlzID0gaGFzU3ltYm9sCiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pCiAgICAgIDogT2JqZWN0LmtleXMoZnJvbSk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGtleSA9IGtleXNbaV07CiAgICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uCiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH0KICAgICAgdG9WYWwgPSB0b1trZXldOwogICAgICBmcm9tVmFsID0gZnJvbVtrZXldOwogICAgICBpZiAoIWhhc093bih0bywga2V5KSkgewogICAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTsKICAgICAgfSBlbHNlIGlmICgKICAgICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJgogICAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmCiAgICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKQogICAgICApIHsKICAgICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdG8KICB9CgogIC8qKgogICAqIERhdGEKICAgKi8KICBmdW5jdGlvbiBtZXJnZURhdGFPckZuICgKICAgIHBhcmVudFZhbCwKICAgIGNoaWxkVmFsLAogICAgdm0KICApIHsKICAgIGlmICghdm0pIHsKICAgICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnMKICAgICAgaWYgKCFjaGlsZFZhbCkgewogICAgICAgIHJldHVybiBwYXJlbnRWYWwKICAgICAgfQogICAgICBpZiAoIXBhcmVudFZhbCkgewogICAgICAgIHJldHVybiBjaGlsZFZhbAogICAgICB9CiAgICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCwKICAgICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlCiAgICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0bwogICAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2UKICAgICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuCiAgICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkgewogICAgICAgIHJldHVybiBtZXJnZURhdGEoCiAgICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsCiAgICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWwKICAgICAgICApCiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7CiAgICAgICAgLy8gaW5zdGFuY2UgbWVyZ2UKICAgICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nCiAgICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKQogICAgICAgICAgOiBjaGlsZFZhbDsKICAgICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nCiAgICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSkKICAgICAgICAgIDogcGFyZW50VmFsOwogICAgICAgIGlmIChpbnN0YW5jZURhdGEpIHsKICAgICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBzdHJhdHMuZGF0YSA9IGZ1bmN0aW9uICgKICAgIHBhcmVudFZhbCwKICAgIGNoaWxkVmFsLAogICAgdm0KICApIHsKICAgIGlmICghdm0pIHsKICAgICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHdhcm4oCiAgICAgICAgICAnVGhlICJkYXRhIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArCiAgICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICsKICAgICAgICAgICdkZWZpbml0aW9ucy4nLAogICAgICAgICAgdm0KICAgICAgICApOwoKICAgICAgICByZXR1cm4gcGFyZW50VmFsCiAgICAgIH0KICAgICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCkKICAgIH0KCiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSkKICB9OwoKICAvKioKICAgKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuCiAgICovCiAgZnVuY3Rpb24gbWVyZ2VIb29rICgKICAgIHBhcmVudFZhbCwKICAgIGNoaWxkVmFsCiAgKSB7CiAgICB2YXIgcmVzID0gY2hpbGRWYWwKICAgICAgPyBwYXJlbnRWYWwKICAgICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpCiAgICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKQogICAgICAgICAgPyBjaGlsZFZhbAogICAgICAgICAgOiBbY2hpbGRWYWxdCiAgICAgIDogcGFyZW50VmFsOwogICAgcmV0dXJuIHJlcwogICAgICA/IGRlZHVwZUhvb2tzKHJlcykKICAgICAgOiByZXMKICB9CgogIGZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykgewogICAgdmFyIHJlcyA9IFtdOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkgewogICAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHsKICAgIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vazsKICB9KTsKCiAgLyoqCiAgICogQXNzZXRzCiAgICoKICAgKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvCiAgICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZQogICAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLgogICAqLwogIGZ1bmN0aW9uIG1lcmdlQXNzZXRzICgKICAgIHBhcmVudFZhbCwKICAgIGNoaWxkVmFsLAogICAgdm0sCiAgICBrZXkKICApIHsKICAgIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTsKICAgIGlmIChjaGlsZFZhbCkgewogICAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTsKICAgICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHJlcwogICAgfQogIH0KCiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgewogICAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7CiAgfSk7CgogIC8qKgogICAqIFdhdGNoZXJzLgogICAqCiAgICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZQogICAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLgogICAqLwogIHN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uICgKICAgIHBhcmVudFZhbCwKICAgIGNoaWxkVmFsLAogICAgdm0sCiAgICBrZXkKICApIHsKICAgIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uCiAgICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH0KICAgIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfQogICAgewogICAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTsKICAgIH0KICAgIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9CiAgICB2YXIgcmV0ID0ge307CiAgICBleHRlbmQocmV0LCBwYXJlbnRWYWwpOwogICAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHsKICAgICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07CiAgICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTsKICAgICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7CiAgICAgICAgcGFyZW50ID0gW3BhcmVudF07CiAgICAgIH0KICAgICAgcmV0W2tleSQxXSA9IHBhcmVudAogICAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZCkKICAgICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdOwogICAgfQogICAgcmV0dXJuIHJldAogIH07CgogIC8qKgogICAqIE90aGVyIG9iamVjdCBoYXNoZXMuCiAgICovCiAgc3RyYXRzLnByb3BzID0KICBzdHJhdHMubWV0aG9kcyA9CiAgc3RyYXRzLmluamVjdCA9CiAgc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKAogICAgcGFyZW50VmFsLAogICAgY2hpbGRWYWwsCiAgICB2bSwKICAgIGtleQogICkgewogICAgaWYgKGNoaWxkVmFsICYmICJkZXZlbG9wbWVudCIgIT09ICdwcm9kdWN0aW9uJykgewogICAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTsKICAgIH0KICAgIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9CiAgICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7CiAgICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9CiAgICByZXR1cm4gcmV0CiAgfTsKICBzdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47CgogIC8qKgogICAqIERlZmF1bHQgc3RyYXRlZ3kuCiAgICovCiAgdmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7CiAgICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZAogICAgICA/IHBhcmVudFZhbAogICAgICA6IGNoaWxkVmFsCiAgfTsKCiAgLyoqCiAgICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzCiAgICovCiAgZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7CiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7CiAgICBpZiAoIW5ldyBSZWdFeHAoKCJeW2EtekEtWl1bXFwtXFwuMC05XyIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgIl0qJCIpKS50ZXN0KG5hbWUpKSB7CiAgICAgIHdhcm4oCiAgICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6ICInICsgbmFtZSArICciLiBDb21wb25lbnQgbmFtZXMgJyArCiAgICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nCiAgICAgICk7CiAgICB9CiAgICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7CiAgICAgIHdhcm4oCiAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArCiAgICAgICAgJ2lkOiAnICsgbmFtZQogICAgICApOwogICAgfQogIH0KCiAgLyoqCiAgICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlCiAgICogT2JqZWN0LWJhc2VkIGZvcm1hdC4KICAgKi8KICBmdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHsKICAgIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7CiAgICBpZiAoIXByb3BzKSB7IHJldHVybiB9CiAgICB2YXIgcmVzID0ge307CiAgICB2YXIgaSwgdmFsLCBuYW1lOwogICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7CiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7CiAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICB2YWwgPSBwcm9wc1tpXTsKICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpOwogICAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHsKICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7CiAgICAgICAgdmFsID0gcHJvcHNba2V5XTsKICAgICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTsKICAgICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbCkKICAgICAgICAgID8gdmFsCiAgICAgICAgICA6IHsgdHlwZTogdmFsIH07CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oCiAgICAgICAgIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcInByb3BzXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgIiArCiAgICAgICAgImJ1dCBnb3QgIiArICh0b1Jhd1R5cGUocHJvcHMpKSArICIuIiwKICAgICAgICB2bQogICAgICApOwogICAgfQogICAgb3B0aW9ucy5wcm9wcyA9IHJlczsKICB9CgogIC8qKgogICAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXQKICAgKi8KICBmdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7CiAgICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7CiAgICBpZiAoIWluamVjdCkgeyByZXR1cm4gfQogICAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9OwogICAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykgewogICAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHsKICAgICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07CiAgICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpCiAgICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpCiAgICAgICAgICA6IHsgZnJvbTogdmFsIH07CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHdhcm4oCiAgICAgICAgIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcImluamVjdFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsICIgKwogICAgICAgICJidXQgZ290ICIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgIi4iLAogICAgICAgIHZtCiAgICAgICk7CiAgICB9CiAgfQoKICAvKioKICAgKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LgogICAqLwogIGZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHsKICAgIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzOwogICAgaWYgKGRpcnMpIHsKICAgICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHsKICAgICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldOwogICAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkgewogICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkgewogICAgICB3YXJuKAogICAgICAgICJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXCIiICsgbmFtZSArICJcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCAiICsKICAgICAgICAiYnV0IGdvdCAiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgIi4iLAogICAgICAgIHZtCiAgICAgICk7CiAgICB9CiAgfQoKICAvKioKICAgKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuCiAgICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS4KICAgKi8KICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMgKAogICAgcGFyZW50LAogICAgY2hpbGQsCiAgICB2bQogICkgewogICAgewogICAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpOwogICAgfQoKICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zOwogICAgfQoKICAgIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7CiAgICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTsKICAgIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpOwoKICAgIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucywKICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3QKICAgIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC4KICAgIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS4KICAgIGlmICghY2hpbGQuX2Jhc2UpIHsKICAgICAgaWYgKGNoaWxkLmV4dGVuZHMpIHsKICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7CiAgICAgIH0KICAgICAgaWYgKGNoaWxkLm1peGlucykgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgdmFyIG9wdGlvbnMgPSB7fTsKICAgIHZhciBrZXk7CiAgICBmb3IgKGtleSBpbiBwYXJlbnQpIHsKICAgICAgbWVyZ2VGaWVsZChrZXkpOwogICAgfQogICAgZm9yIChrZXkgaW4gY2hpbGQpIHsKICAgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7CiAgICAgICAgbWVyZ2VGaWVsZChrZXkpOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHsKICAgICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0OwogICAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7CiAgICB9CiAgICByZXR1cm4gb3B0aW9ucwogIH0KCiAgLyoqCiAgICogUmVzb2x2ZSBhbiBhc3NldC4KICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3MKICAgKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uCiAgICovCiAgZnVuY3Rpb24gcmVzb2x2ZUFzc2V0ICgKICAgIG9wdGlvbnMsCiAgICB0eXBlLAogICAgaWQsCiAgICB3YXJuTWlzc2luZwogICkgewogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykgewogICAgICByZXR1cm4KICAgIH0KICAgIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdOwogICAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3QKICAgIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfQogICAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpOwogICAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9CiAgICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7CiAgICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfQogICAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluCiAgICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdOwogICAgaWYgKHdhcm5NaXNzaW5nICYmICFyZXMpIHsKICAgICAgd2FybigKICAgICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLAogICAgICAgIG9wdGlvbnMKICAgICAgKTsKICAgIH0KICAgIHJldHVybiByZXMKICB9CgogIC8qICAqLwoKCgogIGZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoCiAgICBrZXksCiAgICBwcm9wT3B0aW9ucywKICAgIHByb3BzRGF0YSwKICAgIHZtCiAgKSB7CiAgICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07CiAgICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7CiAgICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTsKICAgIC8vIGJvb2xlYW4gY2FzdGluZwogICAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpOwogICAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7CiAgICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7CiAgICAgICAgdmFsdWUgPSBmYWxzZTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7CiAgICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmCiAgICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5CiAgICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTsKICAgICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7CiAgICAgICAgICB2YWx1ZSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlCiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7CiAgICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSwKICAgICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuCiAgICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7CiAgICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTsKICAgICAgb2JzZXJ2ZSh2YWx1ZSk7CiAgICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7CiAgICB9CiAgICB7CiAgICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7CiAgICB9CiAgICByZXR1cm4gdmFsdWUKICB9CgogIC8qKgogICAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuCiAgICovCiAgZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkgewogICAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZAogICAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkgewogICAgICByZXR1cm4gdW5kZWZpbmVkCiAgICB9CiAgICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0OwogICAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheQogICAgaWYgKGlzT2JqZWN0KGRlZikpIHsKICAgICAgd2FybigKICAgICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wICInICsga2V5ICsgJyI6ICcgKwogICAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICsKICAgICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsCiAgICAgICAgdm0KICAgICAgKTsKICAgIH0KICAgIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsCiAgICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXIKICAgIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiYKICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJgogICAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkCiAgICApIHsKICAgICAgcmV0dXJuIHZtLl9wcm9wc1trZXldCiAgICB9CiAgICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlcwogICAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dAogICAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nCiAgICAgID8gZGVmLmNhbGwodm0pCiAgICAgIDogZGVmCiAgfQoKICAvKioKICAgKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuCiAgICovCiAgZnVuY3Rpb24gYXNzZXJ0UHJvcCAoCiAgICBwcm9wLAogICAgbmFtZSwKICAgIHZhbHVlLAogICAgdm0sCiAgICBhYnNlbnQKICApIHsKICAgIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkgewogICAgICB3YXJuKAogICAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6ICInICsgbmFtZSArICciJywKICAgICAgICB2bQogICAgICApOwogICAgICByZXR1cm4KICAgIH0KICAgIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7CiAgICAgIHJldHVybgogICAgfQogICAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7CiAgICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlOwogICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTsKICAgIGlmICh0eXBlKSB7CiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkgewogICAgICAgIHR5cGUgPSBbdHlwZV07CiAgICAgIH0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykgewogICAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTsKICAgICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7CiAgICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoIXZhbGlkKSB7CiAgICAgIHdhcm4oCiAgICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSwKICAgICAgICB2bQogICAgICApOwogICAgICByZXR1cm4KICAgIH0KICAgIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjsKICAgIGlmICh2YWxpZGF0b3IpIHsKICAgICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wICInICsgbmFtZSArICciLicsCiAgICAgICAgICB2bQogICAgICAgICk7CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLzsKCiAgZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHsKICAgIHZhciB2YWxpZDsKICAgIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpOwogICAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7CiAgICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlOwogICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0cwogICAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7CiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0JykgewogICAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpOwogICAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHsKICAgICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgdmFsaWQ6IHZhbGlkLAogICAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZQogICAgfQogIH0KCiAgLyoqCiAgICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLAogICAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZwogICAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy4KICAgKi8KICBmdW5jdGlvbiBnZXRUeXBlIChmbikgewogICAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxzKmZ1bmN0aW9uIChcdyspLyk7CiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnCiAgfQoKICBmdW5jdGlvbiBpc1NhbWVUeXBlIChhLCBiKSB7CiAgICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKQogIH0KCiAgZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHsKICAgICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTEKICAgIH0KICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7CiAgICAgICAgcmV0dXJuIGkKICAgICAgfQogICAgfQogICAgcmV0dXJuIC0xCiAgfQoKICBmdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UgKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7CiAgICB2YXIgbWVzc2FnZSA9ICJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiIiArIG5hbWUgKyAiXCIuIiArCiAgICAgICIgRXhwZWN0ZWQgIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTsKICAgIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdOwogICAgdmFyIHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7CiAgICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7CiAgICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7CiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWUKICAgIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJgogICAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmCiAgICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHsKICAgICAgbWVzc2FnZSArPSAiIHdpdGggdmFsdWUgIiArIGV4cGVjdGVkVmFsdWU7CiAgICB9CiAgICBtZXNzYWdlICs9ICIsIGdvdCAiICsgcmVjZWl2ZWRUeXBlICsgIiAiOwogICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlCiAgICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHsKICAgICAgbWVzc2FnZSArPSAid2l0aCB2YWx1ZSAiICsgcmVjZWl2ZWRWYWx1ZSArICIuIjsKICAgIH0KICAgIHJldHVybiBtZXNzYWdlCiAgfQoKICBmdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkgewogICAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7CiAgICAgIHJldHVybiAoIlwiIiArIHZhbHVlICsgIlwiIikKICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHsKICAgICAgcmV0dXJuICgiIiArIChOdW1iZXIodmFsdWUpKSkKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAoIiIgKyB2YWx1ZSkKICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHsKICAgIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTsKICAgIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pCiAgfQoKICBmdW5jdGlvbiBpc0Jvb2xlYW4gKCkgewogICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07CgogICAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pCiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHsKICAgIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLgogICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNQogICAgcHVzaFRhcmdldCgpOwogICAgdHJ5IHsKICAgICAgaWYgKHZtKSB7CiAgICAgICAgdmFyIGN1ciA9IHZtOwogICAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7CiAgICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDsKICAgICAgICAgIGlmIChob29rcykgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pOwogICAgfSBmaW5hbGx5IHsKICAgICAgcG9wVGFyZ2V0KCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoCiAgICBoYW5kbGVyLAogICAgY29udGV4dCwKICAgIGFyZ3MsCiAgICB2bSwKICAgIGluZm8KICApIHsKICAgIHZhciByZXM7CiAgICB0cnkgewogICAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTsKICAgICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7CiAgICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArICIgKFByb21pc2UvYXN5bmMpIik7IH0pOwogICAgICAgIC8vIGlzc3VlICM5NTExCiAgICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxscwogICAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pOwogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHsKICAgIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKQogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLAogICAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2UKICAgICAgICBpZiAoZSAhPT0gZXJyKSB7CiAgICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7CiAgfQoKICBmdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykgewogICAgewogICAgICB3YXJuKCgiRXJyb3IgaW4gIiArIGluZm8gKyAiOiBcIiIgKyAoZXJyLnRvU3RyaW5nKCkpICsgIlwiIiksIHZtKTsKICAgIH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykgewogICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBlcnIKICAgIH0KICB9CgogIC8qICAqLwoKICB2YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlOwoKICB2YXIgY2FsbGJhY2tzID0gW107CiAgdmFyIHBlbmRpbmcgPSBmYWxzZTsKCiAgZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkgewogICAgcGVuZGluZyA9IGZhbHNlOwogICAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTsKICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHsKICAgICAgY29waWVzW2ldKCk7CiAgICB9CiAgfQoKICAvLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuCiAgLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS4KICAvLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludAogIC8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLgogIC8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9ycwogIC8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLgogIC8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi4KICAvLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3MKICAvLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHkKICAvLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpCiAgLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuCiAgdmFyIHRpbWVyRnVuYzsKCiAgLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWQKICAvLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci4KICAvLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW4KICAvLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdAogIC8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmUKICAvLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6CiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqLwogIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHsKICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7CiAgICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dAogICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGUKICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXIKICAgICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuCiAgICAgIC8vICJmb3JjZSIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci4KICAgICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH0KICAgIH07CiAgICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTsKICB9IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoCiAgICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fAogICAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54CiAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nCiAgKSkgewogICAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSwKICAgIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNAogICAgLy8gKCM2NDY2IE11dGF0aW9uT2JzZXJ2ZXIgaXMgdW5yZWxpYWJsZSBpbiBJRTExKQogICAgdmFyIGNvdW50ZXIgPSAxOwogICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpOwogICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTsKICAgIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHsKICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZQogICAgfSk7CiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjsKICAgICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTsKICAgIH07CiAgICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTsKICB9IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHsKICAgIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS4KICAgIC8vIFRlY2huaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLAogICAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuCiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7CiAgICB9OwogIH0gZWxzZSB7CiAgICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LgogICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkgewogICAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkgewogICAgdmFyIF9yZXNvbHZlOwogICAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkgewogICAgICBpZiAoY2IpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY2IuY2FsbChjdHgpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7CiAgICAgICAgX3Jlc29sdmUoY3R4KTsKICAgICAgfQogICAgfSk7CiAgICBpZiAoIXBlbmRpbmcpIHsKICAgICAgcGVuZGluZyA9IHRydWU7CiAgICAgIHRpbWVyRnVuYygpOwogICAgfQogICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7CiAgICAgIH0pCiAgICB9CiAgfQoKICAvKiAgKi8KCiAgdmFyIG1hcms7CiAgdmFyIG1lYXN1cmU7CgogIHsKICAgIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgaWYgKAogICAgICBwZXJmICYmCiAgICAgIHBlcmYubWFyayAmJgogICAgICBwZXJmLm1lYXN1cmUgJiYKICAgICAgcGVyZi5jbGVhck1hcmtzICYmCiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcwogICAgKSB7CiAgICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTsKICAgICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7CiAgICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpOwogICAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7CiAgICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7CiAgICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpCiAgICAgIH07CiAgICB9CiAgfQoKICAvKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi8KCiAgdmFyIGluaXRQcm94eTsKCiAgewogICAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcCgKICAgICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArCiAgICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICsKICAgICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICsKICAgICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnkKICAgICk7CgogICAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7CiAgICAgIHdhcm4oCiAgICAgICAgIlByb3BlcnR5IG9yIG1ldGhvZCBcIiIgKyBrZXkgKyAiXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCAiICsKICAgICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICsKICAgICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgKwogICAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICsKICAgICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJywKICAgICAgICB0YXJnZXQKICAgICAgKTsKICAgIH07CgogICAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgewogICAgICB3YXJuKAogICAgICAgICJQcm9wZXJ0eSBcIiIgKyBrZXkgKyAiXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFwiJGRhdGEuIiArIGtleSArICJcIiBiZWNhdXNlICIgKwogICAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggIiQiIG9yICJfIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICsKICAgICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzLiAnICsKICAgICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLAogICAgICAgIHRhcmdldAogICAgICApOwogICAgfTsKCiAgICB2YXIgaGFzUHJveHkgPQogICAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTsKCiAgICBpZiAoaGFzUHJveHkpIHsKICAgICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpOwogICAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7CiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkgewogICAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHsKICAgICAgICAgICAgd2FybigoIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLiIgKyBrZXkpKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlOwogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgdmFyIGhhc0hhbmRsZXIgPSB7CiAgICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkgewogICAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0OwogICAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8CiAgICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpOwogICAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHsKICAgICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH0KICAgICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkCiAgICAgIH0KICAgIH07CgogICAgdmFyIGdldEhhbmRsZXIgPSB7CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkgewogICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7CiAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9CiAgICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0YXJnZXRba2V5XQogICAgICB9CiAgICB9OwoKICAgIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHsKICAgICAgaWYgKGhhc1Byb3h5KSB7CiAgICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlCiAgICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9uczsKICAgICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkCiAgICAgICAgICA/IGdldEhhbmRsZXIKICAgICAgICAgIDogaGFzSGFuZGxlcjsKICAgICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTsKICAgICAgfQogICAgfTsKICB9CgogIC8qICAqLwoKICB2YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpOwoKICAvKioKICAgKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZAogICAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0CiAgICogaXMgY29sbGVjdGVkIGFzIGEgImRlZXAiIGRlcGVuZGVuY3kuCiAgICovCiAgZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkgewogICAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpOwogICAgc2Vlbk9iamVjdHMuY2xlYXIoKTsKICB9CgogIGZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7CiAgICB2YXIgaSwga2V5czsKICAgIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7CiAgICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7CiAgICAgIHJldHVybgogICAgfQogICAgaWYgKHZhbC5fX29iX18pIHsKICAgICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7CiAgICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICBzZWVuLmFkZChkZXBJZCk7CiAgICB9CiAgICBpZiAoaXNBKSB7CiAgICAgIGkgPSB2YWwubGVuZ3RoOwogICAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9CiAgICB9IGVsc2UgewogICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTsKICAgICAgaSA9IGtleXMubGVuZ3RoOwogICAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgdmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7CiAgICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7CiAgICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lOwogICAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0CiAgICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lOwogICAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnOwogICAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTsKICAgIHJldHVybiB7CiAgICAgIG5hbWU6IG5hbWUsCiAgICAgIG9uY2U6IG9uY2UkJDEsCiAgICAgIGNhcHR1cmU6IGNhcHR1cmUsCiAgICAgIHBhc3NpdmU6IHBhc3NpdmUKICAgIH0KICB9KTsKCiAgZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7CiAgICBmdW5jdGlvbiBpbnZva2VyICgpIHsKICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzOwoKICAgICAgdmFyIGZucyA9IGludm9rZXIuZm5zOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7CiAgICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgInYtb24gaGFuZGxlciIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVycwogICAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sICJ2LW9uIGhhbmRsZXIiKQogICAgICB9CiAgICB9CiAgICBpbnZva2VyLmZucyA9IGZuczsKICAgIHJldHVybiBpbnZva2VyCiAgfQoKICBmdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKAogICAgb24sCiAgICBvbGRPbiwKICAgIGFkZCwKICAgIHJlbW92ZSQkMSwKICAgIGNyZWF0ZU9uY2VIYW5kbGVyLAogICAgdm0KICApIHsKICAgIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDsKICAgIGZvciAobmFtZSBpbiBvbikgewogICAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTsKICAgICAgb2xkID0gb2xkT25bbmFtZV07CiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7CiAgICAgIGlmIChpc1VuZGVmKGN1cikpIHsKICAgICAgICB3YXJuKAogICAgICAgICAgIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXCIiICsgKGV2ZW50Lm5hbWUpICsgIlwiOiBnb3QgIiArIFN0cmluZyhjdXIpLAogICAgICAgICAgdm0KICAgICAgICApOwogICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkgewogICAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7CiAgICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkgewogICAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpOwogICAgICAgIH0KICAgICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpOwogICAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7CiAgICAgICAgb2xkLmZucyA9IGN1cjsKICAgICAgICBvbltuYW1lXSA9IG9sZDsKICAgICAgfQogICAgfQogICAgZm9yIChuYW1lIGluIG9sZE9uKSB7CiAgICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkgewogICAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7CiAgICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTsKICAgICAgfQogICAgfQogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHsKICAgIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkgewogICAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pOwogICAgfQogICAgdmFyIGludm9rZXI7CiAgICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTsKCiAgICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7CiAgICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZQogICAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVhawogICAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTsKICAgIH0KCiAgICBpZiAoaXNVbmRlZihvbGRIb29rKSkgewogICAgICAvLyBubyBleGlzdGluZyBob29rCiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7CiAgICB9IGVsc2UgewogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7CiAgICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyCiAgICAgICAgaW52b2tlciA9IG9sZEhvb2s7CiAgICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9vawogICAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7CiAgICAgIH0KICAgIH0KCiAgICBpbnZva2VyLm1lcmdlZCA9IHRydWU7CiAgICBkZWZbaG9va0tleV0gPSBpbnZva2VyOwogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKAogICAgZGF0YSwKICAgIEN0b3IsCiAgICB0YWcKICApIHsKICAgIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLgogICAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkCiAgICAvLyBjb21wb25lbnQgaXRzZWxmLgogICAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzOwogICAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7CiAgICAgIHJldHVybgogICAgfQogICAgdmFyIHJlcyA9IHt9OwogICAgdmFyIGF0dHJzID0gZGF0YS5hdHRyczsKICAgIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7CiAgICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkgewogICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHsKICAgICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7CiAgICAgICAgewogICAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiYKICAgICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSkKICAgICAgICAgICkgewogICAgICAgICAgICB0aXAoCiAgICAgICAgICAgICAgIlByb3AgXCIiICsga2V5SW5Mb3dlckNhc2UgKyAiXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCAiICsKICAgICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXMiICsKICAgICAgICAgICAgICAiIFwiIiArIGtleSArICJcIi4gIiArCiAgICAgICAgICAgICAgIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgIiArCiAgICAgICAgICAgICAgInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gIiArCiAgICAgICAgICAgICAgInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIiICsgYWx0S2V5ICsgIlwiIGluc3RlYWQgb2YgXCIiICsga2V5ICsgIlwiLiIKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fAogICAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBmdW5jdGlvbiBjaGVja1Byb3AgKAogICAgcmVzLAogICAgaGFzaCwKICAgIGtleSwKICAgIGFsdEtleSwKICAgIHByZXNlcnZlCiAgKSB7CiAgICBpZiAoaXNEZWYoaGFzaCkpIHsKICAgICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7CiAgICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07CiAgICAgICAgaWYgKCFwcmVzZXJ2ZSkgewogICAgICAgICAgZGVsZXRlIGhhc2hba2V5XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkgewogICAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldOwogICAgICAgIGlmICghcHJlc2VydmUpIHsKICAgICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZQogIH0KCiAgLyogICovCgogIC8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieQogIC8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuCiAgLy8KICAvLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZQogIC8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmUKICAvLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6CgogIC8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnQKICAvLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlCiAgLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlCiAgLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwCiAgLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLgogIGZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHsKICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pCiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjaGlsZHJlbgogIH0KCiAgLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cywKICAvLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXIKICAvLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uCiAgLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuCiAgZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7CiAgICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pCiAgICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildCiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbikKICAgICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pCiAgICAgICAgOiB1bmRlZmluZWQKICB9CgogIGZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHsKICAgIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpCiAgfQoKICBmdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHsKICAgIHZhciByZXMgPSBbXTsKICAgIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7CiAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgYyA9IGNoaWxkcmVuW2ldOwogICAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH0KICAgICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7CiAgICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTsKICAgICAgLy8gIG5lc3RlZAogICAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkgewogICAgICAgIGlmIChjLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgIl8iICsgaSkpOwogICAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2RlcwogICAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkgewogICAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7CiAgICAgICAgICAgIGMuc2hpZnQoKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7CiAgICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHsKICAgICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXMKICAgICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmUKICAgICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5ncwogICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7CiAgICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykgewogICAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGUKICAgICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHsKICAgICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXMKICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpCiAgICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJgogICAgICAgICAgICBpc0RlZihjLnRhZykgJiYKICAgICAgICAgICAgaXNVbmRlZihjLmtleSkgJiYKICAgICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7CiAgICAgICAgICAgIGMua2V5ID0gIl9fdmxpc3QiICsgbmVzdGVkSW5kZXggKyAiXyIgKyBpICsgIl9fIjsKICAgICAgICAgIH0KICAgICAgICAgIHJlcy5wdXNoKGMpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkgewogICAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlOwogICAgaWYgKHByb3ZpZGUpIHsKICAgICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbicKICAgICAgICA/IHByb3ZpZGUuY2FsbCh2bSkKICAgICAgICA6IHByb3ZpZGU7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHsKICAgIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pOwogICAgaWYgKHJlc3VsdCkgewogICAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpOwogICAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgICAgICAgewogICAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgd2FybigKICAgICAgICAgICAgICAiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSAiICsKICAgICAgICAgICAgICAib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiAiICsKICAgICAgICAgICAgICAiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFwiIiArIGtleSArICJcIiIsCiAgICAgICAgICAgICAgdm0KICAgICAgICAgICAgKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHsKICAgIGlmIChpbmplY3QpIHsKICAgICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWQKICAgICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIHZhciBrZXlzID0gaGFzU3ltYm9sCiAgICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KQogICAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBrZXkgPSBrZXlzW2ldOwogICAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi4KICAgICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9CiAgICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tOwogICAgICAgIHZhciBzb3VyY2UgPSB2bTsKICAgICAgICB3aGlsZSAoc291cmNlKSB7CiAgICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHsKICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldOwogICAgICAgICAgICBicmVhawogICAgICAgICAgfQogICAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7CiAgICAgICAgfQogICAgICAgIGlmICghc291cmNlKSB7CiAgICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7CiAgICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7CiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nCiAgICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKQogICAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB3YXJuKCgiSW5qZWN0aW9uIFwiIiArIGtleSArICJcIiBub3QgZm91bmQiKSwgdm0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0CiAgICB9CiAgfQoKICAvKiAgKi8KCgoKICAvKioKICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LgogICAqLwogIGZ1bmN0aW9uIHJlc29sdmVTbG90cyAoCiAgICBjaGlsZHJlbiwKICAgIGNvbnRleHQKICApIHsKICAgIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkgewogICAgICByZXR1cm4ge30KICAgIH0KICAgIHZhciBzbG90cyA9IHt9OwogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07CiAgICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTsKICAgICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZQogICAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkgewogICAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7CiAgICAgIH0KICAgICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlCiAgICAgIC8vIHNhbWUgY29udGV4dC4KICAgICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiYKICAgICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsCiAgICAgICkgewogICAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90OwogICAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7CiAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykgewogICAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpOwogICAgICB9CiAgICB9CiAgICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2UKICAgIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykgewogICAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7CiAgICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBzbG90cwogIH0KCiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7CiAgICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICcKICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoCiAgICBzbG90cywKICAgIG5vcm1hbFNsb3RzLAogICAgcHJldlNsb3RzCiAgKSB7CiAgICB2YXIgcmVzOwogICAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7CiAgICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90czsKICAgIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5OwogICAgaWYgKCFzbG90cykgewogICAgICByZXMgPSB7fTsKICAgIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHsKICAgICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlCiAgICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZAogICAgfSBlbHNlIGlmICgKICAgICAgaXNTdGFibGUgJiYKICAgICAgcHJldlNsb3RzICYmCiAgICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYKICAgICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJgogICAgICAhaGFzTm9ybWFsU2xvdHMgJiYKICAgICAgIXByZXZTbG90cy4kaGFzTm9ybWFsCiAgICApIHsKICAgICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LAogICAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2UKICAgICAgcmV0dXJuIHByZXZTbG90cwogICAgfSBlbHNlIHsKICAgICAgcmVzID0ge307CiAgICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7CiAgICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7CiAgICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzCiAgICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykgewogICAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7CiAgICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpOwogICAgICB9CiAgICB9CiAgICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0CiAgICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3IKICAgIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkgewogICAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzOwogICAgfQogICAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7CiAgICBkZWYocmVzLCAnJGtleScsIGtleSk7CiAgICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTsKICAgIHJldHVybiByZXMKICB9CgogIGZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHsKICAgIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7CiAgICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpCiAgICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGUKICAgICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7CiAgICAgIHJldHVybiByZXMgJiYgKAogICAgICAgIHJlcy5sZW5ndGggPT09IDAgfHwKICAgICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OAogICAgICApID8gdW5kZWZpbmVkCiAgICAgICAgOiByZXMKICAgIH07CiAgICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXMKICAgIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudAogICAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuCiAgICBpZiAoZm4ucHJveHkpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHsKICAgICAgICBnZXQ6IG5vcm1hbGl6ZWQsCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gbm9ybWFsaXplZAogIH0KCiAgZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9CiAgfQoKICAvKiAgKi8KCiAgLyoqCiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy4KICAgKi8KICBmdW5jdGlvbiByZW5kZXJMaXN0ICgKICAgIHZhbCwKICAgIHJlbmRlcgogICkgewogICAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5OwogICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewogICAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7CiAgICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7CiAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykgewogICAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkgewogICAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7CiAgICAgICAgcmV0ID0gW107CiAgICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTsKICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpOwogICAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHsKICAgICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTsKICAgICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7CiAgICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTsKICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgIGtleSA9IGtleXNbaV07CiAgICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoIWlzRGVmKHJldCkpIHsKICAgICAgcmV0ID0gW107CiAgICB9CiAgICAocmV0KS5faXNWTGlzdCA9IHRydWU7CiAgICByZXR1cm4gcmV0CiAgfQoKICAvKiAgKi8KCiAgLyoqCiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD4KICAgKi8KICBmdW5jdGlvbiByZW5kZXJTbG90ICgKICAgIG5hbWUsCiAgICBmYWxsYmFjaywKICAgIHByb3BzLAogICAgYmluZE9iamVjdAogICkgewogICAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdOwogICAgdmFyIG5vZGVzOwogICAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdAogICAgICBwcm9wcyA9IHByb3BzIHx8IHt9OwogICAgICBpZiAoYmluZE9iamVjdCkgewogICAgICAgIGlmICghaXNPYmplY3QoYmluZE9iamVjdCkpIHsKICAgICAgICAgIHdhcm4oCiAgICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JywKICAgICAgICAgICAgdGhpcwogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpOwogICAgICB9CiAgICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjazsKICAgIH0gZWxzZSB7CiAgICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7CiAgICB9CgogICAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7CiAgICBpZiAodGFyZ2V0KSB7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG5vZGVzCiAgICB9CiAgfQoKICAvKiAgKi8KCiAgLyoqCiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzCiAgICovCiAgZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHsKICAgIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHkKICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkgewogICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkgewogICAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTEKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbAogICAgfQogIH0KCiAgLyoqCiAgICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLgogICAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fawogICAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdAogICAqLwogIGZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKAogICAgZXZlbnRLZXlDb2RlLAogICAga2V5LAogICAgYnVpbHRJbktleUNvZGUsCiAgICBldmVudEtleU5hbWUsCiAgICBidWlsdEluS2V5TmFtZQogICkgewogICAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTsKICAgIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7CiAgICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpCiAgICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHsKICAgICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKQogICAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHsKICAgICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXkKICAgIH0KICB9CgogIC8qICAqLwoKICAvKioKICAgKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9Im9iamVjdCIgaW50byBhIFZOb2RlJ3MgZGF0YS4KICAgKi8KICBmdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKAogICAgZGF0YSwKICAgIHRhZywKICAgIHZhbHVlLAogICAgYXNQcm9wLAogICAgaXNTeW5jCiAgKSB7CiAgICBpZiAodmFsdWUpIHsKICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHsKICAgICAgICB3YXJuKAogICAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJywKICAgICAgICAgIHRoaXMKICAgICAgICApOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHZhciBoYXNoOwogICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fAogICAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHwKICAgICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpCiAgICAgICAgICApIHsKICAgICAgICAgICAgaGFzaCA9IGRhdGE7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlOwogICAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSkKICAgICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSkKICAgICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTsKICAgICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7CiAgICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7CiAgICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07CgogICAgICAgICAgICBpZiAoaXNTeW5jKSB7CiAgICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTsKICAgICAgICAgICAgICBvblsoInVwZGF0ZToiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50OwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZGF0YQogIH0KCiAgLyogICovCgogIC8qKgogICAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLgogICAqLwogIGZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoCiAgICBpbmRleCwKICAgIGlzSW5Gb3IKICApIHsKICAgIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7CiAgICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07CiAgICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvciwKICAgIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLgogICAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHsKICAgICAgcmV0dXJuIHRyZWUKICAgIH0KICAgIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS4KICAgIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoCiAgICAgIHRoaXMuX3JlbmRlclByb3h5LAogICAgICBudWxsLAogICAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzCiAgICApOwogICAgbWFya1N0YXRpYyh0cmVlLCAoIl9fc3RhdGljX18iICsgaW5kZXgpLCBmYWxzZSk7CiAgICByZXR1cm4gdHJlZQogIH0KCiAgLyoqCiAgICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS4KICAgKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS4KICAgKi8KICBmdW5jdGlvbiBtYXJrT25jZSAoCiAgICB0cmVlLAogICAgaW5kZXgsCiAgICBrZXkKICApIHsKICAgIG1hcmtTdGF0aWModHJlZSwgKCJfX29uY2VfXyIgKyBpbmRleCArIChrZXkgPyAoIl8iICsga2V5KSA6ICIiKSksIHRydWUpOwogICAgcmV0dXJuIHRyZWUKICB9CgogIGZ1bmN0aW9uIG1hcmtTdGF0aWMgKAogICAgdHJlZSwKICAgIGtleSwKICAgIGlzT25jZQogICkgewogICAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgIl8iICsgaSksIGlzT25jZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHsKICAgIG5vZGUuaXNTdGF0aWMgPSB0cnVlOwogICAgbm9kZS5rZXkgPSBrZXk7CiAgICBub2RlLmlzT25jZSA9IGlzT25jZTsKICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkgewogICAgaWYgKHZhbHVlKSB7CiAgICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHsKICAgICAgICB3YXJuKAogICAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsCiAgICAgICAgICB0aGlzCiAgICAgICAgKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHsKICAgICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07CiAgICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07CiAgICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VyczsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkYXRhCiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzICgKICAgIGZucywgLy8gc2VlIGZsb3cvdm5vZGUKICAgIHJlcywKICAgIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNgogICAgaGFzRHluYW1pY0tleXMsCiAgICBjb250ZW50SGFzaEtleQogICkgewogICAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc2xvdCA9IGZuc1tpXTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHsKICAgICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7CiAgICAgIH0gZWxzZSBpZiAoc2xvdCkgewogICAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90cwogICAgICAgIGlmIChzbG90LnByb3h5KSB7CiAgICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47CiAgICAgIH0KICAgIH0KICAgIGlmIChjb250ZW50SGFzaEtleSkgewogICAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7CiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07CiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHsKICAgICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdOwogICAgICB9IGVsc2UgaWYgKGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7CiAgICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nCiAgICAgICAgd2FybigKICAgICAgICAgICgiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogIiArIGtleSksCiAgICAgICAgICB0aGlzCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGJhc2VPYmoKICB9CgogIC8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLgogIC8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0CiAgLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLgogIGZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkgewogICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlCiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkgewogICAgdGFyZ2V0Ll9vID0gbWFya09uY2U7CiAgICB0YXJnZXQuX24gPSB0b051bWJlcjsKICAgIHRhcmdldC5fcyA9IHRvU3RyaW5nOwogICAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDsKICAgIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7CiAgICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsOwogICAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mOwogICAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljOwogICAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjsKICAgIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7CiAgICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7CiAgICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7CiAgICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlOwogICAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzOwogICAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVyczsKICAgIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5czsKICAgIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjsKICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoCiAgICBkYXRhLAogICAgcHJvcHMsCiAgICBjaGlsZHJlbiwKICAgIHBhcmVudCwKICAgIEN0b3IKICApIHsKICAgIHZhciB0aGlzJDEgPSB0aGlzOwoKICAgIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zOwogICAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50cwogICAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVjawogICAgdmFyIGNvbnRleHRWbTsKICAgIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7CiAgICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTsKICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7CiAgICB9IGVsc2UgewogICAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC4KICAgICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlCiAgICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS4KICAgICAgY29udGV4dFZtID0gcGFyZW50OwogICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICAgICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDsKICAgIH0KICAgIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTsKICAgIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkOwoKICAgIHRoaXMuZGF0YSA9IGRhdGE7CiAgICB0aGlzLnByb3BzID0gcHJvcHM7CiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDsKICAgIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDsKICAgIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7CiAgICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgewogICAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHsKICAgICAgICBub3JtYWxpemVTY29wZWRTbG90cygKICAgICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsCiAgICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpCiAgICAgICAgKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcyQxLiRzbG90cwogICAgfTsKCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHsKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkgewogICAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpCiAgICAgIH0KICAgIH0pKTsKCiAgICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlCiAgICBpZiAoaXNDb21waWxlZCkgewogICAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKCkKICAgICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7CiAgICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KCkKICAgICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7CiAgICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpOwogICAgfQoKICAgIGlmIChvcHRpb25zLl9zY29wZUlkKSB7CiAgICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgewogICAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7CiAgICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkgewogICAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDsKICAgICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZub2RlCiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07CiAgICB9CiAgfQoKICBpbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpOwoKICBmdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50ICgKICAgIEN0b3IsCiAgICBwcm9wc0RhdGEsCiAgICBkYXRhLAogICAgY29udGV4dFZtLAogICAgY2hpbGRyZW4KICApIHsKICAgIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zOwogICAgdmFyIHByb3BzID0ge307CiAgICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzOwogICAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkgewogICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHsKICAgICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfQogICAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH0KICAgIH0KCiAgICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCgKICAgICAgZGF0YSwKICAgICAgcHJvcHMsCiAgICAgIGNoaWxkcmVuLAogICAgICBjb250ZXh0Vm0sCiAgICAgIEN0b3IKICAgICk7CgogICAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTsKCiAgICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkgewogICAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpCiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7CiAgICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107CiAgICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzCiAgICB9CiAgfQoKICBmdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7CiAgICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZAogICAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzCiAgICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC4KICAgIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpOwogICAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtOwogICAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9uczsKICAgIHsKICAgICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7CiAgICB9CiAgICBpZiAoZGF0YS5zbG90KSB7CiAgICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90OwogICAgfQogICAgcmV0dXJuIGNsb25lCiAgfQoKICBmdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkgewogICAgZm9yICh2YXIga2V5IGluIGZyb20pIHsKICAgICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgLyogICovCgogIC8qICAqLwoKICAvKiAgKi8KCiAgLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2gKICB2YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHsKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHsKICAgICAgaWYgKAogICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmCiAgICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJgogICAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlCiAgICAgICkgewogICAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaAogICAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93CiAgICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSgKICAgICAgICAgIHZub2RlLAogICAgICAgICAgYWN0aXZlSW5zdGFuY2UKICAgICAgICApOwogICAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7CiAgICAgIH0KICAgIH0sCgogICAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHsKICAgICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zOwogICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlOwogICAgICB1cGRhdGVDaGlsZENvbXBvbmVudCgKICAgICAgICBjaGlsZCwKICAgICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wcwogICAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVycwogICAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlCiAgICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW4KICAgICAgKTsKICAgIH0sCgogICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7CiAgICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDsKICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CiAgICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkgewogICAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlOwogICAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpOwogICAgICB9CiAgICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkgewogICAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHsKICAgICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMgogICAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heQogICAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzCiAgICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsCiAgICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuCiAgICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHsKICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CiAgICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7CiAgICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkgewogICAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgdmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpOwoKICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKAogICAgQ3RvciwKICAgIGRhdGEsCiAgICBjb250ZXh0LAogICAgY2hpbGRyZW4sCiAgICB0YWcKICApIHsKICAgIGlmIChpc1VuZGVmKEN0b3IpKSB7CiAgICAgIHJldHVybgogICAgfQoKICAgIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7CgogICAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yCiAgICBpZiAoaXNPYmplY3QoQ3RvcikpIHsKICAgICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTsKICAgIH0KCiAgICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksCiAgICAvLyByZWplY3QuCiAgICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHsKICAgICAgewogICAgICAgIHdhcm4oKCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiAiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTsKICAgICAgfQogICAgICByZXR1cm4KICAgIH0KCiAgICAvLyBhc3luYyBjb21wb25lbnQKICAgIHZhciBhc3luY0ZhY3Rvcnk7CiAgICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHsKICAgICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjsKICAgICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTsKICAgICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWQKICAgICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS4KICAgICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uCiAgICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoCiAgICAgICAgICBhc3luY0ZhY3RvcnksCiAgICAgICAgICBkYXRhLAogICAgICAgICAgY29udGV4dCwKICAgICAgICAgIGNoaWxkcmVuLAogICAgICAgICAgdGFnCiAgICAgICAgKQogICAgICB9CiAgICB9CgogICAgZGF0YSA9IGRhdGEgfHwge307CgogICAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlcgogICAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uCiAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpOwoKICAgIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHMKICAgIGlmIChpc0RlZihkYXRhLm1vZGVsKSkgewogICAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpOwogICAgfQoKICAgIC8vIGV4dHJhY3QgcHJvcHMKICAgIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7CgogICAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnQKICAgIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7CiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pCiAgICB9CgogICAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXMKICAgIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzCiAgICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjsKICAgIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyCiAgICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC4KICAgIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uOwoKICAgIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkgewogICAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nCiAgICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90CgogICAgICAvLyB3b3JrIGFyb3VuZCBmbG93CiAgICAgIHZhciBzbG90ID0gZGF0YS5zbG90OwogICAgICBkYXRhID0ge307CiAgICAgIGlmIChzbG90KSB7CiAgICAgICAgZGF0YS5zbG90ID0gc2xvdDsKICAgICAgfQogICAgfQoKICAgIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZQogICAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpOwoKICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlCiAgICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZzsKICAgIHZhciB2bm9kZSA9IG5ldyBWTm9kZSgKICAgICAgKCJ2dWUtY29tcG9uZW50LSIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoIi0iICsgbmFtZSkgOiAnJykpLAogICAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LAogICAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LAogICAgICBhc3luY0ZhY3RvcnkKICAgICk7CgogICAgcmV0dXJuIHZub2RlCiAgfQoKICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlICgKICAgIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3QKICAgIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGUKICApIHsKICAgIHZhciBvcHRpb25zID0gewogICAgICBfaXNDb21wb25lbnQ6IHRydWUsCiAgICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsCiAgICAgIHBhcmVudDogcGFyZW50CiAgICB9OwogICAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnMKICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7CiAgICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7CiAgICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyOwogICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZuczsKICAgIH0KICAgIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpCiAgfQoKICBmdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHsKICAgIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTsKICAgICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTsKICAgICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07CiAgICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7CiAgICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikgewogICAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnkKICAgICAgZjEoYSwgYik7CiAgICAgIGYyKGEsIGIpOwogICAgfTsKICAgIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTsKICAgIHJldHVybiBtZXJnZWQKICB9CgogIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG8KICAvLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS4KICBmdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkgewogICAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7CiAgICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnCiAgICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTsKICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7CiAgICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07CiAgICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrOwogICAgaWYgKGlzRGVmKGV4aXN0aW5nKSkgewogICAgICBpZiAoCiAgICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZykKICAgICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xCiAgICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFjawogICAgICApIHsKICAgICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrOwogICAgfQogIH0KCiAgLyogICovCgogIHZhciBTSU1QTEVfTk9STUFMSVpFID0gMTsKICB2YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7CgogIC8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlCiAgLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93CiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoCiAgICBjb250ZXh0LAogICAgdGFnLAogICAgZGF0YSwKICAgIGNoaWxkcmVuLAogICAgbm9ybWFsaXphdGlvblR5cGUsCiAgICBhbHdheXNOb3JtYWxpemUKICApIHsKICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7CiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47CiAgICAgIGNoaWxkcmVuID0gZGF0YTsKICAgICAgZGF0YSA9IHVuZGVmaW5lZDsKICAgIH0KICAgIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkgewogICAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7CiAgICB9CiAgICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpCiAgfQoKICBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoCiAgICBjb250ZXh0LAogICAgdGFnLAogICAgZGF0YSwKICAgIGNoaWxkcmVuLAogICAgbm9ybWFsaXphdGlvblR5cGUKICApIHsKICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkgewogICAgICB3YXJuKAogICAgICAgICJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiAiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArICJcbiIgKwogICAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLAogICAgICAgIGNvbnRleHQKICAgICAgKTsKICAgICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKQogICAgfQogICAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmQKICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkgewogICAgICB0YWcgPSBkYXRhLmlzOwogICAgfQogICAgaWYgKCF0YWcpIHsKICAgICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZQogICAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpCiAgICB9CiAgICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXkKICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KQogICAgKSB7CiAgICAgIHsKICAgICAgICB3YXJuKAogICAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICsKICAgICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsCiAgICAgICAgICBjb250ZXh0CiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdAogICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmCiAgICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJwogICAgKSB7CiAgICAgIGRhdGEgPSBkYXRhIHx8IHt9OwogICAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9OwogICAgICBjaGlsZHJlbi5sZW5ndGggPSAwOwogICAgfQogICAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7CiAgICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pOwogICAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkgewogICAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTsKICAgIH0KICAgIHZhciB2bm9kZSwgbnM7CiAgICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHsKICAgICAgdmFyIEN0b3I7CiAgICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7CiAgICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7CiAgICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHMKICAgICAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHsKICAgICAgICAgIHdhcm4oCiAgICAgICAgICAgICgiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8IiArIHRhZyArICI+LiIpLAogICAgICAgICAgICBjb250ZXh0CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICB2bm9kZSA9IG5ldyBWTm9kZSgKICAgICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbiwKICAgICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0CiAgICAgICAgKTsKICAgICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHsKICAgICAgICAvLyBjb21wb25lbnQKICAgICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHMKICAgICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0cwogICAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuCiAgICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoCiAgICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLAogICAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQKICAgICAgICApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvcgogICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTsKICAgIH0KICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkgewogICAgICByZXR1cm4gdm5vZGUKICAgIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7CiAgICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9CiAgICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfQogICAgICByZXR1cm4gdm5vZGUKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKCkKICAgIH0KICB9CgogIGZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHsKICAgIHZub2RlLm5zID0gbnM7CiAgICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHsKICAgICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0CiAgICAgIG5zID0gdW5kZWZpbmVkOwogICAgICBmb3JjZSA9IHRydWU7CiAgICB9CiAgICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07CiAgICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKAogICAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7CiAgICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLy8gcmVmICM1MzE4CiAgLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmQKICAvLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2RlcwogIGZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7CiAgICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHsKICAgICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7CiAgICB9CiAgICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHsKICAgICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHsKICAgIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlCiAgICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzCiAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zOwogICAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlCiAgICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7CiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpOwogICAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7CiAgICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2UKICAgIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuCiAgICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplCiAgICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlcwogICAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9OwogICAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluCiAgICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy4KICAgIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9OwoKICAgIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uCiAgICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkCiAgICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7CgogICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KICAgIHsKICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHsKICAgICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oIiRhdHRycyBpcyByZWFkb25seS4iLCB2bSk7CiAgICAgIH0sIHRydWUpOwogICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHsKICAgICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuIiwgdm0pOwogICAgICB9LCB0cnVlKTsKICAgIH0KICB9CgogIHZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsOwoKICBmdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7CiAgICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVycwogICAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7CgogICAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKQogICAgfTsKCiAgICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIHZhciByZWYgPSB2bS4kb3B0aW9uczsKICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7CiAgICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlOwoKICAgICAgaWYgKF9wYXJlbnRWbm9kZSkgewogICAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKAogICAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsCiAgICAgICAgICB2bS4kc2xvdHMsCiAgICAgICAgICB2bS4kc2NvcGVkU2xvdHMKICAgICAgICApOwogICAgICB9CgogICAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzCiAgICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLgogICAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7CiAgICAgIC8vIHJlbmRlciBzZWxmCiAgICAgIHZhciB2bm9kZTsKICAgICAgdHJ5IHsKICAgICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWQKICAgICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWQKICAgICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC4KICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTsKICAgICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sICJyZW5kZXIiKTsKICAgICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCwKICAgICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudAogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAicmVuZGVyRXJyb3IiKTsKICAgICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlOwogICAgICAgIH0KICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsOwogICAgICB9CiAgICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHsKICAgICAgICB2bm9kZSA9IHZub2RlWzBdOwogICAgICB9CiAgICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXQKICAgICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHsKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHsKICAgICAgICAgIHdhcm4oCiAgICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArCiAgICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLAogICAgICAgICAgICB2bQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7CiAgICAgIH0KICAgICAgLy8gc2V0IHBhcmVudAogICAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7CiAgICAgIHJldHVybiB2bm9kZQogICAgfTsKICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7CiAgICBpZiAoCiAgICAgIGNvbXAuX19lc01vZHVsZSB8fAogICAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpCiAgICApIHsKICAgICAgY29tcCA9IGNvbXAuZGVmYXVsdDsKICAgIH0KICAgIHJldHVybiBpc09iamVjdChjb21wKQogICAgICA/IGJhc2UuZXh0ZW5kKGNvbXApCiAgICAgIDogY29tcAogIH0KCiAgZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoCiAgICBmYWN0b3J5LAogICAgZGF0YSwKICAgIGNvbnRleHQsCiAgICBjaGlsZHJlbiwKICAgIHRhZwogICkgewogICAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7CiAgICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7CiAgICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9OwogICAgcmV0dXJuIG5vZGUKICB9CgogIGZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoCiAgICBmYWN0b3J5LAogICAgYmFzZUN0b3IKICApIHsKICAgIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7CiAgICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcAogICAgfQoKICAgIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkgewogICAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZAogICAgfQoKICAgIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTsKICAgIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7CiAgICAgIC8vIGFscmVhZHkgcGVuZGluZwogICAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTsKICAgIH0KCiAgICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHsKICAgICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXAKICAgIH0KCiAgICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkgewogICAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdOwogICAgICB2YXIgc3luYyA9IHRydWU7CiAgICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsOwogICAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbAoKICAgICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7CgogICAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTsKICAgICAgICB9CgogICAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHsKICAgICAgICAgIG93bmVycy5sZW5ndGggPSAwOwogICAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkgewogICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTsKICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7CiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAvLyBjYWNoZSByZXNvbHZlZAogICAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpOwogICAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmUKICAgICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUikKICAgICAgICBpZiAoIXN5bmMpIHsKICAgICAgICAgIGZvcmNlUmVuZGVyKHRydWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBvd25lcnMubGVuZ3RoID0gMDsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIHdhcm4oCiAgICAgICAgICAiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiAiICsgKFN0cmluZyhmYWN0b3J5KSkgKwogICAgICAgICAgKHJlYXNvbiA/ICgiXG5SZWFzb246ICIgKyByZWFzb24pIDogJycpCiAgICAgICAgKTsKICAgICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7CiAgICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTsKICAgICAgICAgIGZvcmNlUmVuZGVyKHRydWUpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpOwoKICAgICAgaWYgKGlzT2JqZWN0KHJlcykpIHsKICAgICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHsKICAgICAgICAgIC8vICgpID0+IFByb21pc2UKICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7CiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHsKICAgICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpOwoKICAgICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7CiAgICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7CiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7CiAgICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHsKICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHsKICAgICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkgewogICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsOwogICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7CiAgICAgICAgICAgICAgICByZWplY3QoCiAgICAgICAgICAgICAgICAgICJ0aW1lb3V0ICgiICsgKHJlcy50aW1lb3V0KSArICJtcykiCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgcmVzLnRpbWVvdXQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgc3luYyA9IGZhbHNlOwogICAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5CiAgICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmcKICAgICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXAKICAgICAgICA6IGZhY3RvcnkucmVzb2x2ZWQKICAgIH0KICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHsKICAgIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeQogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7CiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjID0gY2hpbGRyZW5baV07CiAgICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHsKICAgICAgICAgIHJldHVybiBjCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgLyogICovCgogIGZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7CiAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTsKICAgIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50cwogICAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7CiAgICBpZiAobGlzdGVuZXJzKSB7CiAgICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTsKICAgIH0KICB9CgogIHZhciB0YXJnZXQ7CgogIGZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7CiAgICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7CiAgfQoKICBmdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7CiAgICB0YXJnZXQuJG9mZihldmVudCwgZm4pOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikgewogICAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7CiAgICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkgewogICAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgaWYgKHJlcyAhPT0gbnVsbCkgewogICAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKAogICAgdm0sCiAgICBsaXN0ZW5lcnMsCiAgICBvbGRMaXN0ZW5lcnMKICApIHsKICAgIHRhcmdldCA9IHZtOwogICAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pOwogICAgdGFyZ2V0ID0gdW5kZWZpbmVkOwogIH0KCiAgZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkgewogICAgdmFyIGhvb2tSRSA9IC9eaG9vazovOwogICAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7CiAgICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb24KICAgICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXAKICAgICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7CiAgICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHZtCiAgICB9OwoKICAgIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIGZ1bmN0aW9uIG9uICgpIHsKICAgICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7CiAgICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICAgb24uZm4gPSBmbjsKICAgICAgdm0uJG9uKGV2ZW50LCBvbik7CiAgICAgIHJldHVybiB2bQogICAgfTsKCiAgICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIC8vIGFsbAogICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHsKICAgICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICByZXR1cm4gdm0KICAgICAgfQogICAgICAvLyBhcnJheSBvZiBldmVudHMKICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7CiAgICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHsKICAgICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdm0KICAgICAgfQogICAgICAvLyBzcGVjaWZpYyBldmVudAogICAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07CiAgICAgIGlmICghY2JzKSB7CiAgICAgICAgcmV0dXJuIHZtCiAgICAgIH0KICAgICAgaWYgKCFmbikgewogICAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDsKICAgICAgICByZXR1cm4gdm0KICAgICAgfQogICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyCiAgICAgIHZhciBjYjsKICAgICAgdmFyIGkgPSBjYnMubGVuZ3RoOwogICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgY2IgPSBjYnNbaV07CiAgICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHsKICAgICAgICAgIGNicy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICBicmVhawogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdm0KICAgIH07CgogICAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICB7CiAgICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTsKICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7CiAgICAgICAgICB0aXAoCiAgICAgICAgICAgICJFdmVudCBcIiIgKyBsb3dlckNhc2VFdmVudCArICJcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCAiICsKICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArICIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFwiIiArIGV2ZW50ICsgIlwiLiAiICsKICAgICAgICAgICAgIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlICIgKwogICAgICAgICAgICAidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuICIgKwogICAgICAgICAgICAiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIiICsgKGh5cGhlbmF0ZShldmVudCkpICsgIlwiIGluc3RlYWQgb2YgXCIiICsgZXZlbnQgKyAiXCIuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdOwogICAgICBpZiAoY2JzKSB7CiAgICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7CiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7CiAgICAgICAgdmFyIGluZm8gPSAiZXZlbnQgaGFuZGxlciBmb3IgXCIiICsgZXZlbnQgKyAiXCIiOwogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdm0KICAgIH07CiAgfQoKICAvKiAgKi8KCiAgdmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDsKICB2YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7CgogIGZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7CiAgICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7CiAgICBhY3RpdmVJbnN0YW5jZSA9IHZtOwogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkgewogICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9uczsKCiAgICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudAogICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50OwogICAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkgewogICAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7CiAgICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7CiAgICAgIH0KICAgICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTsKICAgIH0KCiAgICB2bS4kcGFyZW50ID0gcGFyZW50OwogICAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTsKCiAgICB2bS4kY2hpbGRyZW4gPSBbXTsKICAgIHZtLiRyZWZzID0ge307CgogICAgdm0uX3dhdGNoZXIgPSBudWxsOwogICAgdm0uX2luYWN0aXZlID0gbnVsbDsKICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlOwogICAgdm0uX2lzTW91bnRlZCA9IGZhbHNlOwogICAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7CiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkgewogICAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgdmFyIHByZXZFbCA9IHZtLiRlbDsKICAgICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTsKICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTsKICAgICAgdm0uX3Zub2RlID0gdm5vZGU7CiAgICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50cwogICAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC4KICAgICAgaWYgKCFwcmV2Vm5vZGUpIHsKICAgICAgICAvLyBpbml0aWFsIHJlbmRlcgogICAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHVwZGF0ZXMKICAgICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7CiAgICAgIH0KICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7CiAgICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZQogICAgICBpZiAocHJldkVsKSB7CiAgICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsOwogICAgICB9CiAgICAgIGlmICh2bS4kZWwpIHsKICAgICAgICB2bS4kZWwuX192dWVfXyA9IHZtOwogICAgICB9CiAgICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGwKICAgICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHsKICAgICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDsKICAgICAgfQogICAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlCiAgICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suCiAgICB9OwoKICAgIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICBpZiAodm0uX3dhdGNoZXIpIHsKICAgICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTsKICAgICAgfQogICAgfTsKCiAgICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTsKICAgICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlOwogICAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudAogICAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDsKICAgICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkgewogICAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7CiAgICAgIH0KICAgICAgLy8gdGVhcmRvd24gd2F0Y2hlcnMKICAgICAgaWYgKHZtLl93YXRjaGVyKSB7CiAgICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTsKICAgICAgfQogICAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7CiAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTsKICAgICAgfQogICAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYgogICAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci4KICAgICAgaWYgKHZtLl9kYXRhLl9fb2JfXykgewogICAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07CiAgICAgIH0KICAgICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uCiAgICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7CiAgICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZQogICAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTsKICAgICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9vawogICAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpOwogICAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLgogICAgICB2bS4kb2ZmKCk7CiAgICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZQogICAgICBpZiAodm0uJGVsKSB7CiAgICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsOwogICAgICB9CiAgICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSkKICAgICAgaWYgKHZtLiR2bm9kZSkgewogICAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKAogICAgdm0sCiAgICBlbCwKICAgIGh5ZHJhdGluZwogICkgewogICAgdm0uJGVsID0gZWw7CiAgICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikgewogICAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlOwogICAgICB7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHwKICAgICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7CiAgICAgICAgICB3YXJuKAogICAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArCiAgICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgKwogICAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLAogICAgICAgICAgICB2bQogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgd2FybigKICAgICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLAogICAgICAgICAgICB2bQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTsKCiAgICB2YXIgdXBkYXRlQ29tcG9uZW50OwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHsKICAgICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7CiAgICAgICAgdmFyIGlkID0gdm0uX3VpZDsKICAgICAgICB2YXIgc3RhcnRUYWcgPSAidnVlLXBlcmYtc3RhcnQ6IiArIGlkOwogICAgICAgIHZhciBlbmRUYWcgPSAidnVlLXBlcmYtZW5kOiIgKyBpZDsKCiAgICAgICAgbWFyayhzdGFydFRhZyk7CiAgICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpOwogICAgICAgIG1hcmsoZW5kVGFnKTsKICAgICAgICBtZWFzdXJlKCgidnVlICIgKyBuYW1lICsgIiByZW5kZXIiKSwgc3RhcnRUYWcsIGVuZFRhZyk7CgogICAgICAgIG1hcmsoc3RhcnRUYWcpOwogICAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7CiAgICAgICAgbWFyayhlbmRUYWcpOwogICAgICAgIG1lYXN1cmUoKCJ2dWUgIiArIG5hbWUgKyAiIHBhdGNoIiksIHN0YXJ0VGFnLCBlbmRUYWcpOwogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpOwogICAgICB9OwogICAgfQoKICAgIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yCiAgICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZAogICAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZAogICAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwgewogICAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7CiAgICAgICAgaWYgKHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkgewogICAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTsKICAgIGh5ZHJhdGluZyA9IGZhbHNlOwoKICAgIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmCiAgICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9vawogICAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7CiAgICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlOwogICAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTsKICAgIH0KICAgIHJldHVybiB2bQogIH0KCiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKAogICAgdm0sCiAgICBwcm9wc0RhdGEsCiAgICBsaXN0ZW5lcnMsCiAgICBwYXJlbnRWbm9kZSwKICAgIHJlbmRlckNoaWxkcmVuCiAgKSB7CiAgICB7CiAgICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7CiAgICB9CgogICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuCiAgICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi4KCiAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoCiAgICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZQogICAgLy8gIiRzdGFibGUiIG1hcmtlci4KICAgIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7CiAgICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7CiAgICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhISgKICAgICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fAogICAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fAogICAgICAobmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpCiAgICApOwoKICAgIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3MKICAgIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZAogICAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuCiAgICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKAogICAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzCiAgICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHMKICAgICAgaGFzRHluYW1pY1Njb3BlZFNsb3QKICAgICk7CgogICAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7CiAgICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlcgoKICAgIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnQKICAgICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlOwogICAgfQogICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47CgogICAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoCiAgICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGQKICAgIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyCiAgICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0OwogICAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDsKCiAgICAvLyB1cGRhdGUgcHJvcHMKICAgIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHsKICAgICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTsKICAgICAgdmFyIHByb3BzID0gdm0uX3Byb3BzOwogICAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07CiAgICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93PwogICAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7CiAgICAgIH0KICAgICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpOwogICAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhCiAgICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTsKICAgIH0KCiAgICAvLyB1cGRhdGUgbGlzdGVuZXJzCiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7CiAgICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczsKICAgIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7CiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTsKCiAgICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlbgogICAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHsKICAgICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTsKICAgICAgdm0uJGZvcmNlVXBkYXRlKCk7CiAgICB9CgogICAgewogICAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7CiAgICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHsKICAgICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9CiAgICB9CiAgICByZXR1cm4gZmFsc2UKICB9CgogIGZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHsKICAgIGlmIChkaXJlY3QpIHsKICAgICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7CiAgICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkgewogICAgICByZXR1cm4KICAgIH0KICAgIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7CiAgICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTsKICAgICAgfQogICAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7CiAgICBpZiAoZGlyZWN0KSB7CiAgICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7CiAgICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICB9CiAgICBpZiAoIXZtLl9pbmFjdGl2ZSkgewogICAgICB2bS5faW5hY3RpdmUgPSB0cnVlOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pOwogICAgICB9CiAgICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykgewogICAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rcwogICAgcHVzaFRhcmdldCgpOwogICAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107CiAgICB2YXIgaW5mbyA9IGhvb2sgKyAiIGhvb2siOwogICAgaWYgKGhhbmRsZXJzKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7CiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7CiAgICAgIH0KICAgIH0KICAgIGlmICh2bS5faGFzSG9va0V2ZW50KSB7CiAgICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTsKICAgIH0KICAgIHBvcFRhcmdldCgpOwogIH0KCiAgLyogICovCgogIHZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwOwoKICB2YXIgcXVldWUgPSBbXTsKICB2YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTsKICB2YXIgaGFzID0ge307CiAgdmFyIGNpcmN1bGFyID0ge307CiAgdmFyIHdhaXRpbmcgPSBmYWxzZTsKICB2YXIgZmx1c2hpbmcgPSBmYWxzZTsKICB2YXIgaW5kZXggPSAwOwoKICAvKioKICAgKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuCiAgICovCiAgZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7CiAgICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7CiAgICBoYXMgPSB7fTsKICAgIHsKICAgICAgY2lyY3VsYXIgPSB7fTsKICAgIH0KICAgIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlOwogIH0KCiAgLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZQogIC8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseQogIC8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wCiAgLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzCiAgLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guCiAgdmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7CgogIC8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuCiAgdmFyIGdldE5vdyA9IERhdGUubm93OwoKICAvLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZQogIC8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzCiAgLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlCiAgLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLgogIC8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9jawogIC8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpCiAgaWYgKGluQnJvd3NlciAmJiAhaXNJRSkgewogICAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlOwogICAgaWYgKAogICAgICBwZXJmb3JtYW5jZSAmJgogICAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmCiAgICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wCiAgICApIHsKICAgICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpcwogICAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsCiAgICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXMKICAgICAgLy8gd2VsbC4KICAgICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07CiAgICB9CiAgfQoKICAvKioKICAgKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy4KICAgKi8KICBmdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHsKICAgIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpOwogICAgZmx1c2hpbmcgPSB0cnVlOwogICAgdmFyIHdhdGNoZXIsIGlkOwoKICAgIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLgogICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6CiAgICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzCiAgICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpCiAgICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlCiAgICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpCiAgICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLAogICAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLgogICAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pOwoKICAgIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZAogICAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzCiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHsKICAgICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTsKICAgICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7CiAgICAgICAgd2F0Y2hlci5iZWZvcmUoKTsKICAgICAgfQogICAgICBpZCA9IHdhdGNoZXIuaWQ7CiAgICAgIGhhc1tpZF0gPSBudWxsOwogICAgICB3YXRjaGVyLnJ1bigpOwogICAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuCiAgICAgIGlmIChoYXNbaWRdICE9IG51bGwpIHsKICAgICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTsKICAgICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkgewogICAgICAgICAgd2FybigKICAgICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKAogICAgICAgICAgICAgIHdhdGNoZXIudXNlcgogICAgICAgICAgICAgICAgPyAoImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFwiIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgIlwiIikKICAgICAgICAgICAgICAgIDogImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHdhdGNoZXIudm0KICAgICAgICAgICk7CiAgICAgICAgICBicmVhawogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGUKICAgIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7CiAgICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTsKCiAgICByZXNldFNjaGVkdWxlclN0YXRlKCk7CgogICAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzCiAgICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpOwogICAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpOwoKICAgIC8vIGRldnRvb2wgaG9vawogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7CiAgICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkgewogICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7CiAgICB3aGlsZSAoaS0tKSB7CiAgICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07CiAgICAgIHZhciB2bSA9IHdhdGNoZXIudm07CiAgICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHsKICAgICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTsKICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLgogICAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC4KICAgKi8KICBmdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHsKICAgIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW4KICAgIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpCiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTsKICAgIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pOwogIH0KCiAgZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykgewogICAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlOwogICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pOwogICAgfQogIH0KCiAgLyoqCiAgICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS4KICAgKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3MKICAgKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC4KICAgKi8KICBmdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHsKICAgIHZhciBpZCA9IHdhdGNoZXIuaWQ7CiAgICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7CiAgICAgIGhhc1tpZF0gPSB0cnVlOwogICAgICBpZiAoIWZsdXNoaW5nKSB7CiAgICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkCiAgICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS4KICAgICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7CiAgICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHsKICAgICAgICAgIGktLTsKICAgICAgICB9CiAgICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTsKICAgICAgfQogICAgICAvLyBxdWV1ZSB0aGUgZmx1c2gKICAgICAgaWYgKCF3YWl0aW5nKSB7CiAgICAgICAgd2FpdGluZyA9IHRydWU7CgogICAgICAgIGlmICghY29uZmlnLmFzeW5jKSB7CiAgICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7CiAgICAgIH0KICAgIH0KICB9CgogIC8qICAqLwoKCgogIHZhciB1aWQkMiA9IDA7CgogIC8qKgogICAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLAogICAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuCiAgICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuCiAgICovCiAgdmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyICgKICAgIHZtLAogICAgZXhwT3JGbiwKICAgIGNiLAogICAgb3B0aW9ucywKICAgIGlzUmVuZGVyV2F0Y2hlcgogICkgewogICAgdGhpcy52bSA9IHZtOwogICAgaWYgKGlzUmVuZGVyV2F0Y2hlcikgewogICAgICB2bS5fd2F0Y2hlciA9IHRoaXM7CiAgICB9CiAgICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTsKICAgIC8vIG9wdGlvbnMKICAgIGlmIChvcHRpb25zKSB7CiAgICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwOwogICAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjsKICAgICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7CiAgICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jOwogICAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7CiAgICB9CiAgICB0aGlzLmNiID0gY2I7CiAgICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZwogICAgdGhpcy5hY3RpdmUgPSB0cnVlOwogICAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnMKICAgIHRoaXMuZGVwcyA9IFtdOwogICAgdGhpcy5uZXdEZXBzID0gW107CiAgICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7CiAgICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7CiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHBPckZuLnRvU3RyaW5nKCk7CiAgICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXIKICAgIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47CiAgICB9IGVsc2UgewogICAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTsKICAgICAgaWYgKCF0aGlzLmdldHRlcikgewogICAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDsKICAgICAgICB3YXJuKAogICAgICAgICAgIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcIiIgKyBleHBPckZuICsgIlwiICIgKwogICAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICsKICAgICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsCiAgICAgICAgICB2bQogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIHRoaXMudmFsdWUgPSB0aGlzLmxhenkKICAgICAgPyB1bmRlZmluZWQKICAgICAgOiB0aGlzLmdldCgpOwogIH07CgogIC8qKgogICAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy4KICAgKi8KICBXYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkgewogICAgcHVzaFRhcmdldCh0aGlzKTsKICAgIHZhciB2YWx1ZTsKICAgIHZhciB2bSA9IHRoaXMudm07CiAgICB0cnkgewogICAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaWYgKHRoaXMudXNlcikgewogICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoImdldHRlciBmb3Igd2F0Y2hlciBcIiIgKyAodGhpcy5leHByZXNzaW9uKSArICJcIiIpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBlCiAgICAgIH0KICAgIH0gZmluYWxseSB7CiAgICAgIC8vICJ0b3VjaCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXMKICAgICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nCiAgICAgIGlmICh0aGlzLmRlZXApIHsKICAgICAgICB0cmF2ZXJzZSh2YWx1ZSk7CiAgICAgIH0KICAgICAgcG9wVGFyZ2V0KCk7CiAgICAgIHRoaXMuY2xlYW51cERlcHMoKTsKICAgIH0KICAgIHJldHVybiB2YWx1ZQogIH07CgogIC8qKgogICAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuCiAgICovCiAgV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHsKICAgIHZhciBpZCA9IGRlcC5pZDsKICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkgewogICAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpOwogICAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApOwogICAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHsKICAgICAgICBkZXAuYWRkU3ViKHRoaXMpOwogICAgICB9CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi4KICAgKi8KICBXYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHsKICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDsKICAgIHdoaWxlIChpLS0pIHsKICAgICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTsKICAgICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkgewogICAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7CiAgICAgIH0KICAgIH0KICAgIHZhciB0bXAgPSB0aGlzLmRlcElkczsKICAgIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7CiAgICB0aGlzLm5ld0RlcElkcyA9IHRtcDsKICAgIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7CiAgICB0bXAgPSB0aGlzLmRlcHM7CiAgICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7CiAgICB0aGlzLm5ld0RlcHMgPSB0bXA7CiAgICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDsKICB9OwoKICAvKioKICAgKiBTdWJzY3JpYmVyIGludGVyZmFjZS4KICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLgogICAqLwogIFdhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwogICAgaWYgKHRoaXMubGF6eSkgewogICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7CiAgICAgIHRoaXMucnVuKCk7CiAgICB9IGVsc2UgewogICAgICBxdWV1ZVdhdGNoZXIodGhpcyk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuCiAgICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci4KICAgKi8KICBXYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkgewogICAgaWYgKHRoaXMuYWN0aXZlKSB7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7CiAgICAgIGlmICgKICAgICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fAogICAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlbgogICAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXkKICAgICAgICAvLyBoYXZlIG11dGF0ZWQuCiAgICAgICAgaXNPYmplY3QodmFsdWUpIHx8CiAgICAgICAgdGhpcy5kZWVwCiAgICAgICkgewogICAgICAgIC8vIHNldCBuZXcgdmFsdWUKICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlOwogICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTsKICAgICAgICBpZiAodGhpcy51c2VyKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcIiIgKyAodGhpcy5leHByZXNzaW9uKSArICJcIiIpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgLyoqCiAgICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLgogICAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy4KICAgKi8KICBXYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHsKICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpOwogICAgdGhpcy5kaXJ0eSA9IGZhbHNlOwogIH07CgogIC8qKgogICAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLgogICAqLwogIFdhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7CiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7CiAgICB3aGlsZSAoaS0tKSB7CiAgICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTsKICAgIH0KICB9OwoKICAvKioKICAgKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC4KICAgKi8KICBXYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHsKICAgIGlmICh0aGlzLmFjdGl2ZSkgewogICAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0CiAgICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXQKICAgICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC4KICAgICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7CiAgICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTsKICAgICAgfQogICAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7CiAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpOwogICAgICB9CiAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7CiAgICB9CiAgfTsKCiAgLyogICovCgogIHZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBub29wLAogICAgc2V0OiBub29wCiAgfTsKCiAgZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHsKICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7CiAgICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XQogICAgfTsKICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7CiAgICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsOwogICAgfTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTsKICB9CgogIGZ1bmN0aW9uIGluaXRTdGF0ZSAodm0pIHsKICAgIHZtLl93YXRjaGVycyA9IFtdOwogICAgdmFyIG9wdHMgPSB2bS4kb3B0aW9uczsKICAgIGlmIChvcHRzLnByb3BzKSB7IGluaXRQcm9wcyh2bSwgb3B0cy5wcm9wcyk7IH0KICAgIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH0KICAgIGlmIChvcHRzLmRhdGEpIHsKICAgICAgaW5pdERhdGEodm0pOwogICAgfSBlbHNlIHsKICAgICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pOwogICAgfQogICAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfQogICAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHsKICAgICAgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykgewogICAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTsKICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9OwogICAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXkKICAgIC8vIGluc3RlYWQgb2YgZHluYW1pYyBvYmplY3Qga2V5IGVudW1lcmF0aW9uLgogICAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTsKICAgIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDsKICAgIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZAogICAgaWYgKCFpc1Jvb3QpIHsKICAgICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTsKICAgIH0KICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgICB2YXIgdmFsdWUgPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wc09wdGlvbnMsIHByb3BzRGF0YSwgdm0pOwogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwogICAgICB7CiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTsKICAgICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fAogICAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHsKICAgICAgICAgIHdhcm4oCiAgICAgICAgICAgICgiXCIiICsgaHlwaGVuYXRlZEtleSArICJcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuIiksCiAgICAgICAgICAgIHZtCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkgewogICAgICAgICAgICB3YXJuKAogICAgICAgICAgICAgICJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgIiArCiAgICAgICAgICAgICAgIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuICIgKwogICAgICAgICAgICAgICJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgIiArCiAgICAgICAgICAgICAgInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFwiIiArIGtleSArICJcIiIsCiAgICAgICAgICAgICAgdm0KICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlCiAgICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0CiAgICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS4KICAgICAgaWYgKCEoa2V5IGluIHZtKSkgewogICAgICAgIHByb3h5KHZtLCAiX3Byb3BzIiwga2V5KTsKICAgICAgfQogICAgfTsKCiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTsKICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTsKICB9CgogIGZ1bmN0aW9uIGluaXREYXRhICh2bSkgewogICAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhOwogICAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicKICAgICAgPyBnZXREYXRhKGRhdGEsIHZtKQogICAgICA6IGRhdGEgfHwge307CiAgICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHsKICAgICAgZGF0YSA9IHt9OwogICAgICB3YXJuKAogICAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcbicgKwogICAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLAogICAgICAgIHZtCiAgICAgICk7CiAgICB9CiAgICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlCiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpOwogICAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7CiAgICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7CiAgICB2YXIgaSA9IGtleXMubGVuZ3RoOwogICAgd2hpbGUgKGktLSkgewogICAgICB2YXIga2V5ID0ga2V5c1tpXTsKICAgICAgewogICAgICAgIGlmIChtZXRob2RzICYmIGhhc093bihtZXRob2RzLCBrZXkpKSB7CiAgICAgICAgICB3YXJuKAogICAgICAgICAgICAoIk1ldGhvZCBcIiIgKyBrZXkgKyAiXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS4iKSwKICAgICAgICAgICAgdm0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHsKICAgICAgICB3YXJuKAogICAgICAgICAgIlRoZSBkYXRhIHByb3BlcnR5IFwiIiArIGtleSArICJcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gIiArCiAgICAgICAgICAiVXNlIHByb3AgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLiIsCiAgICAgICAgICB2bQogICAgICAgICk7CiAgICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkgewogICAgICAgIHByb3h5KHZtLCAiX2RhdGEiLCBrZXkpOwogICAgICB9CiAgICB9CiAgICAvLyBvYnNlcnZlIGRhdGEKICAgIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTsKICB9CgogIGZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7CiAgICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzCiAgICBwdXNoVGFyZ2V0KCk7CiAgICB0cnkgewogICAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSkKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sICJkYXRhKCkiKTsKICAgICAgcmV0dXJuIHt9CiAgICB9IGZpbmFsbHkgewogICAgICBwb3BUYXJnZXQoKTsKICAgIH0KICB9CgogIHZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07CgogIGZ1bmN0aW9uIGluaXRDb21wdXRlZCAodm0sIGNvbXB1dGVkKSB7CiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmUKICAgIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSCiAgICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpOwoKICAgIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkgewogICAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07CiAgICAgIHZhciBnZXR0ZXIgPSB0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJyA/IHVzZXJEZWYgOiB1c2VyRGVmLmdldDsKICAgICAgaWYgKGdldHRlciA9PSBudWxsKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICgiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFwiIiArIGtleSArICJcIi4iKSwKICAgICAgICAgIHZtCiAgICAgICAgKTsKICAgICAgfQoKICAgICAgaWYgKCFpc1NTUikgewogICAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuCiAgICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKAogICAgICAgICAgdm0sCiAgICAgICAgICBnZXR0ZXIgfHwgbm9vcCwKICAgICAgICAgIG5vb3AsCiAgICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zCiAgICAgICAgKTsKICAgICAgfQoKICAgICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZQogICAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZAogICAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuCiAgICAgIGlmICghKGtleSBpbiB2bSkpIHsKICAgICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7CiAgICAgICAgICB3YXJuKCgiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFwiIiArIGtleSArICJcIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gZGF0YS4iKSwgdm0pOwogICAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMucHJvcHMgJiYga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7CiAgICAgICAgICB3YXJuKCgiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFwiIiArIGtleSArICJcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLiIpLCB2bSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoCiAgICB0YXJnZXQsCiAgICBrZXksCiAgICB1c2VyRGVmCiAgKSB7CiAgICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTsKICAgIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGUKICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSkKICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7CiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wOwogICAgfSBlbHNlIHsKICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0CiAgICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZQogICAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpCiAgICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpCiAgICAgICAgOiBub29wOwogICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDsKICAgIH0KICAgIGlmIChzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7CiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICgiQ29tcHV0ZWQgcHJvcGVydHkgXCIiICsga2V5ICsgIlwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci4iKSwKICAgICAgICAgIHRoaXMKICAgICAgICApOwogICAgICB9OwogICAgfQogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHsKICAgICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTsKICAgICAgaWYgKHdhdGNoZXIpIHsKICAgICAgICBpZiAod2F0Y2hlci5kaXJ0eSkgewogICAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpOwogICAgICAgIH0KICAgICAgICBpZiAoRGVwLnRhcmdldCkgewogICAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWUKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikgewogICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcykKICAgIH0KICB9CgogIGZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykgewogICAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7CiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgewogICAgICB7CiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIHdhcm4oCiAgICAgICAgICAgICJNZXRob2QgXCIiICsga2V5ICsgIlwiIGhhcyB0eXBlIFwiIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArICJcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uICIgKwogICAgICAgICAgICAiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT8iLAogICAgICAgICAgICB2bQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkgewogICAgICAgICAgd2FybigKICAgICAgICAgICAgKCJNZXRob2QgXCIiICsga2V5ICsgIlwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuIiksCiAgICAgICAgICAgIHZtCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7CiAgICAgICAgICB3YXJuKAogICAgICAgICAgICAiTWV0aG9kIFwiIiArIGtleSArICJcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiAiICsKICAgICAgICAgICAgIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuIgogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHsKICAgICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldOwogICAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykgewogICAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoCiAgICB2bSwKICAgIGV4cE9yRm4sCiAgICBoYW5kbGVyLAogICAgb3B0aW9ucwogICkgewogICAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHsKICAgICAgb3B0aW9ucyA9IGhhbmRsZXI7CiAgICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7CiAgICB9CiAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTsKICAgIH0KICAgIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucykKICB9CgogIGZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkgewogICAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0CiAgICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXAKICAgIC8vIHRoZSBvYmplY3QgaGVyZS4KICAgIHZhciBkYXRhRGVmID0ge307CiAgICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTsKICAgIHZhciBwcm9wc0RlZiA9IHt9OwogICAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTsKICAgIHsKICAgICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArCiAgICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLAogICAgICAgICAgdGhpcwogICAgICAgICk7CiAgICAgIH07CiAgICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB3YXJuKCIkcHJvcHMgaXMgcmVhZG9ubHkuIiwgdGhpcyk7CiAgICAgIH07CiAgICB9CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTsKCiAgICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7CiAgICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7CgogICAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoCiAgICAgIGV4cE9yRm4sCiAgICAgIGNiLAogICAgICBvcHRpb25zCiAgICApIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7CiAgICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKQogICAgICB9CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICBvcHRpb25zLnVzZXIgPSB0cnVlOwogICAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7CiAgICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcIiIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArICJcIiIpKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7CiAgICAgICAgd2F0Y2hlci50ZWFyZG93bigpOwogICAgICB9CiAgICB9OwogIH0KCiAgLyogICovCgogIHZhciB1aWQkMyA9IDA7CgogIGZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7CiAgICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgLy8gYSB1aWQKICAgICAgdm0uX3VpZCA9IHVpZCQzKys7CgogICAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZzsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykgewogICAgICAgIHN0YXJ0VGFnID0gInZ1ZS1wZXJmLXN0YXJ0OiIgKyAodm0uX3VpZCk7CiAgICAgICAgZW5kVGFnID0gInZ1ZS1wZXJmLWVuZDoiICsgKHZtLl91aWQpOwogICAgICAgIG1hcmsoc3RhcnRUYWcpOwogICAgICB9CgogICAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZAogICAgICB2bS5faXNWdWUgPSB0cnVlOwogICAgICAvLyBtZXJnZSBvcHRpb25zCiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7CiAgICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb24KICAgICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlCiAgICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuCiAgICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucygKICAgICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLAogICAgICAgICAgb3B0aW9ucyB8fCB7fSwKICAgICAgICAgIHZtCiAgICAgICAgKTsKICAgICAgfQogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwogICAgICB7CiAgICAgICAgaW5pdFByb3h5KHZtKTsKICAgICAgfQogICAgICAvLyBleHBvc2UgcmVhbCBzZWxmCiAgICAgIHZtLl9zZWxmID0gdm07CiAgICAgIGluaXRMaWZlY3ljbGUodm0pOwogICAgICBpbml0RXZlbnRzKHZtKTsKICAgICAgaW5pdFJlbmRlcih2bSk7CiAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7CiAgICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzCiAgICAgIGluaXRTdGF0ZSh2bSk7CiAgICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHMKICAgICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7CgogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7CiAgICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7CiAgICAgICAgbWFyayhlbmRUYWcpOwogICAgICAgIG1lYXN1cmUoKCJ2dWUgIiArICh2bS5fbmFtZSkgKyAiIGluaXQiKSwgc3RhcnRUYWcsIGVuZFRhZyk7CiAgICAgIH0KCiAgICAgIGlmICh2bS4kb3B0aW9ucy5lbCkgewogICAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7CiAgICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTsKICAgIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uCiAgICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsKICAgIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7CiAgICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlOwoKICAgIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zOwogICAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhOwogICAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVyczsKICAgIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuOwogICAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZzsKCiAgICBpZiAob3B0aW9ucy5yZW5kZXIpIHsKICAgICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjsKICAgICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZuczsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHsKICAgIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zOwogICAgaWYgKEN0b3Iuc3VwZXIpIHsKICAgICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7CiAgICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9uczsKICAgICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7CiAgICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsCiAgICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLgogICAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zOwogICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NikKICAgICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTsKICAgICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9ucwogICAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHsKICAgICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpOwogICAgICAgIGlmIChvcHRpb25zLm5hbWUpIHsKICAgICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBvcHRpb25zCiAgfQoKICBmdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7CiAgICB2YXIgbW9kaWZpZWQ7CiAgICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zOwogICAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9uczsKICAgIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHsKICAgICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkgewogICAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfQogICAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG1vZGlmaWVkCiAgfQoKICBmdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHsKICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBWdWUpCiAgICApIHsKICAgICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpOwogICAgfQogICAgdGhpcy5faW5pdChvcHRpb25zKTsKICB9CgogIGluaXRNaXhpbihWdWUpOwogIHN0YXRlTWl4aW4oVnVlKTsKICBldmVudHNNaXhpbihWdWUpOwogIGxpZmVjeWNsZU1peGluKFZ1ZSk7CiAgcmVuZGVyTWl4aW4oVnVlKTsKCiAgLyogICovCgogIGZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkgewogICAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHsKICAgICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7CiAgICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7CiAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgfQoKICAgICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzCiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpOwogICAgICBhcmdzLnVuc2hpZnQodGhpcyk7CiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7CiAgICAgIH0KICAgICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7CiAgICAgIHJldHVybiB0aGlzCiAgICB9OwogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHsKICAgIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikgewogICAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7CiAgICAgIHJldHVybiB0aGlzCiAgICB9OwogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkgewogICAgLyoqCiAgICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWUKICAgICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkICJjaGlsZAogICAgICogY29uc3RydWN0b3JzIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS4KICAgICAqLwogICAgVnVlLmNpZCA9IDA7CiAgICB2YXIgY2lkID0gMTsKCiAgICAvKioKICAgICAqIENsYXNzIGluaGVyaXRhbmNlCiAgICAgKi8KICAgIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykgewogICAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTsKICAgICAgdmFyIFN1cGVyID0gdGhpczsKICAgICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7CiAgICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7CiAgICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkgewogICAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXQogICAgICB9CgogICAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7CiAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpOwogICAgICB9CgogICAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7CiAgICAgICAgdGhpcy5faW5pdChvcHRpb25zKTsKICAgICAgfTsKICAgICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTsKICAgICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjsKICAgICAgU3ViLmNpZCA9IGNpZCsrOwogICAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucygKICAgICAgICBTdXBlci5vcHRpb25zLAogICAgICAgIGV4dGVuZE9wdGlvbnMKICAgICAgKTsKICAgICAgU3ViWydzdXBlciddID0gU3VwZXI7CgogICAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvbgogICAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpcwogICAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuCiAgICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykgewogICAgICAgIGluaXRQcm9wcyQxKFN1Yik7CiAgICAgIH0KICAgICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7CiAgICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTsKICAgICAgfQoKICAgICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlCiAgICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7CiAgICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluOwogICAgICBTdWIudXNlID0gU3VwZXIudXNlOwoKICAgICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3NlcwogICAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uCiAgICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTsKICAgICAgfSk7CiAgICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXAKICAgICAgaWYgKG5hbWUpIHsKICAgICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViOwogICAgICB9CgogICAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLgogICAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZQogICAgICAvLyBiZWVuIHVwZGF0ZWQuCiAgICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zOwogICAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7CiAgICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7CgogICAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvcgogICAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjsKICAgICAgcmV0dXJuIFN1YgogICAgfTsKICB9CgogIGZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7CiAgICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7CiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHsKICAgICAgcHJveHkoQ29tcC5wcm90b3R5cGUsICJfcHJvcHMiLCBrZXkpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHsKICAgIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDsKICAgIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkgewogICAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTsKICAgIH0KICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkgewogICAgLyoqCiAgICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuCiAgICAgKi8KICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKAogICAgICAgIGlkLAogICAgICAgIGRlZmluaXRpb24KICAgICAgKSB7CiAgICAgICAgaWYgKCFkZWZpbml0aW9uKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JykgewogICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHsKICAgICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkOwogICAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uOwogICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24KICAgICAgICB9CiAgICAgIH07CiAgICB9KTsKICB9CgogIC8qICAqLwoKCgogIGZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHsKICAgIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKQogIH0KCiAgZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkgewogICAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHsKICAgICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMQogICAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkgewogICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpCiAgICB9CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgcmV0dXJuIGZhbHNlCiAgfQoKICBmdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7CiAgICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTsKICAgIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5czsKICAgIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7CiAgICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHsKICAgICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldOwogICAgICBpZiAoY2FjaGVkTm9kZSkgewogICAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpOwogICAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHsKICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5ICgKICAgIGNhY2hlLAogICAga2V5LAogICAga2V5cywKICAgIGN1cnJlbnQKICApIHsKICAgIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldOwogICAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7CiAgICAgIGNhY2hlZCQkMS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpOwogICAgfQogICAgY2FjaGVba2V5XSA9IG51bGw7CiAgICByZW1vdmUoa2V5cywga2V5KTsKICB9CgogIHZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTsKCiAgdmFyIEtlZXBBbGl2ZSA9IHsKICAgIG5hbWU6ICdrZWVwLWFsaXZlJywKICAgIGFic3RyYWN0OiB0cnVlLAoKICAgIHByb3BzOiB7CiAgICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcywKICAgICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLAogICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl0KICAgIH0sCgogICAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7CiAgICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICB0aGlzLmtleXMgPSBbXTsKICAgIH0sCgogICAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkgewogICAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7CiAgICAgIH0KICAgIH0sCgogICAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7CiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOwoKICAgICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pOwogICAgICB9KTsKICAgICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTsKICAgICAgfSk7CiAgICB9LAoKICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHsKICAgICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0OwogICAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpOwogICAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7CiAgICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7CiAgICAgICAgLy8gY2hlY2sgcGF0dGVybgogICAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTsKICAgICAgICB2YXIgcmVmID0gdGhpczsKICAgICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlOwogICAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7CiAgICAgICAgaWYgKAogICAgICAgICAgLy8gbm90IGluY2x1ZGVkCiAgICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fAogICAgICAgICAgLy8gZXhjbHVkZWQKICAgICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSkKICAgICAgICApIHsKICAgICAgICAgIHJldHVybiB2bm9kZQogICAgICAgIH0KCiAgICAgICAgdmFyIHJlZiQxID0gdGhpczsKICAgICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTsKICAgICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7CiAgICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsCiAgICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50cwogICAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KQogICAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKCI6OiIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKQogICAgICAgICAgOiB2bm9kZS5rZXk7CiAgICAgICAgaWYgKGNhY2hlW2tleV0pIHsKICAgICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTsKICAgICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3QKICAgICAgICAgIHJlbW92ZShrZXlzLCBrZXkpOwogICAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTsKICAgICAgICAgIGtleXMucHVzaChrZXkpOwogICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5CiAgICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHsKICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pCiAgICB9CiAgfTsKCiAgdmFyIGJ1aWx0SW5Db21wb25lbnRzID0gewogICAgS2VlcEFsaXZlOiBLZWVwQWxpdmUKICB9OwoKICAvKiAgKi8KCiAgZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7CiAgICAvLyBjb25maWcKICAgIHZhciBjb25maWdEZWYgPSB7fTsKICAgIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07CiAgICB7CiAgICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLicKICAgICAgICApOwogICAgICB9OwogICAgfQogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7CgogICAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuCiAgICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb24KICAgIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suCiAgICBWdWUudXRpbCA9IHsKICAgICAgd2Fybjogd2FybiwKICAgICAgZXh0ZW5kOiBleHRlbmQsCiAgICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLAogICAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDEKICAgIH07CgogICAgVnVlLnNldCA9IHNldDsKICAgIFZ1ZS5kZWxldGUgPSBkZWw7CiAgICBWdWUubmV4dFRpY2sgPSBuZXh0VGljazsKCiAgICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUEkKICAgIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikgewogICAgICBvYnNlcnZlKG9iaik7CiAgICAgIHJldHVybiBvYmoKICAgIH07CgogICAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgewogICAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB9KTsKCiAgICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlICJiYXNlIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdAogICAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuCiAgICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTsKCiAgICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpOwoKICAgIGluaXRVc2UoVnVlKTsKICAgIGluaXRNaXhpbiQxKFZ1ZSk7CiAgICBpbml0RXh0ZW5kKFZ1ZSk7CiAgICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTsKICB9CgogIGluaXRHbG9iYWxBUEkoVnVlKTsKCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7CiAgICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nCiAgfSk7CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7CiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0CiAgICB9CiAgfSk7CgogIC8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvbgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHsKICAgIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dAogIH0pOwoKICBWdWUudmVyc2lvbiA9ICcyLjYuMTEnOwoKICAvKiAgKi8KCiAgLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5CiAgLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uCiAgdmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTsKCiAgLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZwogIHZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTsKICB2YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7CiAgICByZXR1cm4gKAogICAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fAogICAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fAogICAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHwKICAgICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKQogICAgKQogIH07CgogIHZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7CgogIHZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7CgogIHZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJwogICAgICA/ICdmYWxzZScKICAgICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlCiAgICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpCiAgICAgICAgPyB2YWx1ZQogICAgICAgIDogJ3RydWUnCiAgfTsKCiAgdmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKAogICAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArCiAgICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgKwogICAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArCiAgICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICsKICAgICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgKwogICAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnCiAgKTsKCiAgdmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7CgogIHZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaycKICB9OwoKICB2YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJwogIH07CgogIHZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkgewogICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2UKICB9OwoKICAvKiAgKi8KCiAgZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHsKICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTsKICAgIHZhciBwYXJlbnROb2RlID0gdm5vZGU7CiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7CiAgICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkgewogICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlOwogICAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7CiAgICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTsKICAgICAgfQogICAgfQogICAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHsKICAgICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7CiAgICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKQogIH0KCiAgZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHsKICAgIHJldHVybiB7CiAgICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksCiAgICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcykKICAgICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXQogICAgICAgIDogcGFyZW50LmNsYXNzCiAgICB9CiAgfQoKICBmdW5jdGlvbiByZW5kZXJDbGFzcyAoCiAgICBzdGF0aWNDbGFzcywKICAgIGR5bmFtaWNDbGFzcwogICkgewogICAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7CiAgICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpCiAgICB9CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgcmV0dXJuICcnCiAgfQoKICBmdW5jdGlvbiBjb25jYXQgKGEsIGIpIHsKICAgIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpCiAgfQoKICBmdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHsKICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpCiAgICB9CiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7CiAgICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpCiAgICB9CiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gdmFsdWUKICAgIH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICByZXR1cm4gJycKICB9CgogIGZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkgewogICAgdmFyIHJlcyA9ICcnOwogICAgdmFyIHN0cmluZ2lmaWVkOwogICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHsKICAgICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH0KICAgICAgICByZXMgKz0gc3RyaW5naWZpZWQ7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXMKICB9CgogIGZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHsKICAgIHZhciByZXMgPSAnJzsKICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgewogICAgICBpZiAodmFsdWVba2V5XSkgewogICAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfQogICAgICAgIHJlcyArPSBrZXk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXMKICB9CgogIC8qICAqLwoKICB2YXIgbmFtZXNwYWNlTWFwID0gewogICAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLAogICAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnCiAgfTsKCiAgdmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoCiAgICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArCiAgICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgKwogICAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgKwogICAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICsKICAgICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICsKICAgICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICsKICAgICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICsKICAgICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgKwogICAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArCiAgICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgKwogICAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnCiAgKTsKCiAgLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5CiAgLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy4KICB2YXIgaXNTVkcgPSBtYWtlTWFwKAogICAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICsKICAgICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICsKICAgICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JywKICAgIHRydWUKICApOwoKICB2YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9OwoKICB2YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHsKICAgIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpCiAgfTsKCiAgZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHsKICAgIGlmIChpc1NWRyh0YWcpKSB7CiAgICAgIHJldHVybiAnc3ZnJwogICAgfQogICAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MCiAgICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzCiAgICBpZiAodGFnID09PSAnbWF0aCcpIHsKICAgICAgcmV0dXJuICdtYXRoJwogICAgfQogIH0KCiAgdmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykgewogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoIWluQnJvd3NlcikgewogICAgICByZXR1cm4gdHJ1ZQogICAgfQogICAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkgewogICAgICByZXR1cm4gZmFsc2UKICAgIH0KICAgIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpOwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHsKICAgICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXQogICAgfQogICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpOwogICAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkgewogICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0CiAgICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKAogICAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8CiAgICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudAogICAgICApKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKQogICAgfQogIH0KCiAgdmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7CgogIC8qICAqLwoKICAvKioKICAgKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS4KICAgKi8KICBmdW5jdGlvbiBxdWVyeSAoZWwpIHsKICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7CiAgICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpOwogICAgICBpZiAoIXNlbGVjdGVkKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWwKICAgICAgICApOwogICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgICB9CiAgICAgIHJldHVybiBzZWxlY3RlZAogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVsCiAgICB9CiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkgewogICAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7CiAgICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHsKICAgICAgcmV0dXJuIGVsbQogICAgfQogICAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3QKICAgIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7CiAgICB9CiAgICByZXR1cm4gZWxtCiAgfQoKICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkgewogICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSkKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7CiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHsKICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpCiAgfQoKICBmdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHsKICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpOwogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7CiAgICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTsKICB9CgogIGZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkgewogICAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7CiAgfQoKICBmdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7CiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlCiAgfQoKICBmdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkgewogICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmcKICB9CgogIGZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHsKICAgIHJldHVybiBub2RlLnRhZ05hbWUKICB9CgogIGZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7CiAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDsKICB9CgogIGZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHsKICAgIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTsKICB9CgogIHZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewogICAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLAogICAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsCiAgICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsCiAgICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LAogICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsCiAgICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsCiAgICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsCiAgICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLAogICAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLAogICAgdGFnTmFtZTogdGFnTmFtZSwKICAgIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCwKICAgIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGUKICB9KTsKCiAgLyogICovCgogIHZhciByZWYgPSB7CiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHsKICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpOwogICAgfSwKICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHsKICAgICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikgewogICAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTsKICAgICAgICByZWdpc3RlclJlZih2bm9kZSk7CiAgICAgIH0KICAgIH0sCiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkgewogICAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7CiAgICB9CiAgfTsKCiAgZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHsKICAgIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjsKICAgIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfQoKICAgIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7CiAgICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtOwogICAgdmFyIHJlZnMgPSB2bS4kcmVmczsKICAgIGlmIChpc1JlbW92YWwpIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkgewogICAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7CiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHsKICAgICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7CiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHsKICAgICAgICAgIHJlZnNba2V5XSA9IFtyZWZdOwogICAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHsKICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVmc1trZXldID0gcmVmOwogICAgICB9CiAgICB9CiAgfQoKICAvKioKICAgKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnkKICAgKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpCiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlCiAgICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFCiAgICoKICAgKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMykKICAgKgogICAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3QKICAgKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC4KICAgKi8KCiAgdmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTsKCiAgdmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107CgogIGZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikgewogICAgcmV0dXJuICgKICAgICAgYS5rZXkgPT09IGIua2V5ICYmICgKICAgICAgICAoCiAgICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiYKICAgICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJgogICAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJgogICAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKQogICAgICAgICkgfHwgKAogICAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJgogICAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmCiAgICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKQogICAgICAgICkKICAgICAgKQogICAgKQogIH0KCiAgZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikgewogICAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH0KICAgIHZhciBpOwogICAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTsKICAgIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7CiAgICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKQogIH0KCiAgZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7CiAgICB2YXIgaSwga2V5OwogICAgdmFyIG1hcCA9IHt9OwogICAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHsKICAgICAga2V5ID0gY2hpbGRyZW5baV0ua2V5OwogICAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH0KICAgIH0KICAgIHJldHVybiBtYXAKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHsKICAgIHZhciBpLCBqOwogICAgdmFyIGNicyA9IHt9OwoKICAgIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzOwogICAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7CgogICAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7CiAgICAgIGNic1tob29rc1tpXV0gPSBbXTsKICAgICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHsKICAgICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7CiAgICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHsKICAgICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKQogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHsKICAgICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHsKICAgICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7CiAgICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVyczsKICAgICAgcmV0dXJuIHJlbW92ZSQkMQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7CiAgICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpOwogICAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHQKICAgICAgaWYgKGlzRGVmKHBhcmVudCkpIHsKICAgICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkgewogICAgICByZXR1cm4gKAogICAgICAgICFpblZQcmUgJiYKICAgICAgICAhdm5vZGUubnMgJiYKICAgICAgICAhKAogICAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiYKICAgICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7CiAgICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpCiAgICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpCiAgICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZwogICAgICAgICAgfSkKICAgICAgICApICYmCiAgICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKQogICAgICApCiAgICB9CgogICAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDsKCiAgICBmdW5jdGlvbiBjcmVhdGVFbG0gKAogICAgICB2bm9kZSwKICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLAogICAgICBwYXJlbnRFbG0sCiAgICAgIHJlZkVsbSwKICAgICAgbmVzdGVkLAogICAgICBvd25lckFycmF5LAogICAgICBpbmRleAogICAgKSB7CiAgICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7CiAgICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciEKICAgICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2UKICAgICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uCiAgICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmcKICAgICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC4KICAgICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7CiAgICAgIH0KCiAgICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrCiAgICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTsKICAgICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47CiAgICAgIHZhciB0YWcgPSB2bm9kZS50YWc7CiAgICAgIGlmIChpc0RlZih0YWcpKSB7CiAgICAgICAgewogICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHsKICAgICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKzsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHsKICAgICAgICAgICAgd2FybigKICAgICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArCiAgICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgKwogICAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgIm5hbWUiIG9wdGlvbi4nLAogICAgICAgICAgICAgIHZub2RlLmNvbnRleHQKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zCiAgICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpCiAgICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTsKICAgICAgICBzZXRTY29wZSh2bm9kZSk7CgogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgIHsKICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTsKICAgICAgICAgIGlmIChpc0RlZihkYXRhKSkgewogICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTsKICAgICAgICAgIH0KICAgICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTsKICAgICAgICB9CgogICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7CiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkgewogICAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTsKICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTsKICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7CiAgICAgIHZhciBpID0gdm5vZGUuZGF0YTsKICAgICAgaWYgKGlzRGVmKGkpKSB7CiAgICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7CiAgICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7CiAgICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pOwogICAgICAgIH0KICAgICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudAogICAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZAogICAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLgogICAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuCiAgICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkgewogICAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTsKICAgICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTsKICAgICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHsKICAgICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHsKICAgICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHsKICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7CiAgICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDsKICAgICAgfQogICAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7CiAgICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHsKICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTsKICAgICAgICBzZXRTY29wZSh2bm9kZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuCiAgICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KQogICAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTsKICAgICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9vawogICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7CiAgICAgIHZhciBpOwogICAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uCiAgICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWQKICAgICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0CiAgICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuCiAgICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTsKICAgICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkgewogICAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7CiAgICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHsKICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTsKICAgICAgICAgIH0KICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7CiAgICAgICAgICBicmVhawogICAgICAgIH0KICAgICAgfQogICAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCwKICAgICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGYKICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkgewogICAgICBpZiAoaXNEZWYocGFyZW50KSkgewogICAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7CiAgICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkgewogICAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkgewogICAgICAgIHsKICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHsKICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkgewogICAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHsKICAgICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTsKICAgICAgfQogICAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKQogICAgfQoKICAgIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7CiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkgewogICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTsKICAgICAgfQogICAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZQogICAgICBpZiAoaXNEZWYoaSkpIHsKICAgICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9CiAgICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH0KICAgICAgfQogICAgfQoKICAgIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuCiAgICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZAogICAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLgogICAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7CiAgICAgIHZhciBpOwogICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHsKICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTsKICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHsKICAgICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7CiAgICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpOwogICAgICAgICAgfQogICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS4KICAgICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiYKICAgICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmCiAgICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmCiAgICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpCiAgICAgICkgewogICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHsKICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkgewogICAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHsKICAgICAgdmFyIGksIGo7CiAgICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTsKICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7CiAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfQogICAgICB9CiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7CiAgICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7CiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzICh2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHsKICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkgewogICAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07CiAgICAgICAgaWYgKGlzRGVmKGNoKSkgewogICAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHsKICAgICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7CiAgICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTsKICAgICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZQogICAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7CiAgICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHsKICAgICAgICB2YXIgaTsKICAgICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxOwogICAgICAgIGlmIChpc0RlZihybSkpIHsKICAgICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFjawogICAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudAogICAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVyczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmcKICAgICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7CiAgICAgICAgfQogICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlCiAgICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7CiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHsKICAgICAgICAgIGkodm5vZGUsIHJtKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcm0oKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHsKICAgICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDsKICAgICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDsKICAgICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7CiAgICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07CiAgICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07CiAgICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxOwogICAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdOwogICAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdOwogICAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtOwoKICAgICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+CiAgICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnMKICAgICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnMKICAgICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTsKCiAgICAgIHsKICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpOwogICAgICB9CgogICAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkgewogICAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7CiAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnQKICAgICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7CiAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTsKICAgICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkgewogICAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07CiAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07CiAgICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkgewogICAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7CiAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTsKICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdOwogICAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodAogICAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTsKICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTsKICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsKICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdOwogICAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0CiAgICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7CiAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTsKICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9CiAgICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KQogICAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XQogICAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7CiAgICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnQKICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTsKICAgICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHsKICAgICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50CiAgICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7CiAgICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtOwogICAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHsKICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikgewogICAgICB2YXIgc2VlbktleXMgPSB7fTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldOwogICAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7CiAgICAgICAgaWYgKGlzRGVmKGtleSkpIHsKICAgICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7CiAgICAgICAgICAgIHdhcm4oCiAgICAgICAgICAgICAgKCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJyIgKyBrZXkgKyAiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLiIpLAogICAgICAgICAgICAgIHZub2RlLmNvbnRleHQKICAgICAgICAgICAgKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHsKICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHsKICAgICAgICB2YXIgYyA9IG9sZENoW2ldOwogICAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoCiAgICAgIG9sZFZub2RlLAogICAgICB2bm9kZSwKICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLAogICAgICBvd25lckFycmF5LAogICAgICBpbmRleCwKICAgICAgcmVtb3ZlT25seQogICAgKSB7CiAgICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHsKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHsKICAgICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGUKICAgICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7CiAgICAgIH0KCiAgICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07CgogICAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHsKICAgICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkgewogICAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLgogICAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC0KICAgICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuCiAgICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuCiAgICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmCiAgICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJgogICAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmCiAgICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpCiAgICAgICkgewogICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHZhciBpOwogICAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7CiAgICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHsKICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7CiAgICAgIH0KCiAgICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuOwogICAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjsKICAgICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfQogICAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfQogICAgICB9CiAgICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7CiAgICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHsKICAgICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH0KICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkgewogICAgICAgICAgewogICAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH0KICAgICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpOwogICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7CiAgICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpOwogICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsKICAgICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHsKICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7CiAgICAgIH0KICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7CiAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHsKICAgICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlCiAgICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkCiAgICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkgewogICAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7CiAgICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleQogICAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb24KICAgIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZQogICAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuCiAgICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpOwoKICAgIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuCiAgICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkgewogICAgICB2YXIgaTsKICAgICAgdmFyIHRhZyA9IHZub2RlLnRhZzsKICAgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhOwogICAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjsKICAgICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTsKICAgICAgdm5vZGUuZWxtID0gZWxtOwoKICAgICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHsKICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlOwogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KICAgICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2gKICAgICAgewogICAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoaXNEZWYoZGF0YSkpIHsKICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9CiAgICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHsKICAgICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLgogICAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTsKICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChpc0RlZih0YWcpKSB7CiAgICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkgewogICAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuCiAgICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHsKICAgICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MCiAgICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHsKICAgICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkgewogICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmCiAgICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWQKICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzCiAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlOwogICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDsKICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkgewogICAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXMKICAgICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LgogICAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHsKICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJgogICAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChpc0RlZihkYXRhKSkgewogICAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTsKICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7CiAgICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7CiAgICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7CiAgICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHsKICAgICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXMKICAgICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7CiAgICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0OwogICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9CgogICAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7CiAgICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7CiAgICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKAogICAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiYKICAgICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKQogICAgICAgICkKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkgewogICAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHsKICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfQogICAgICAgIHJldHVybgogICAgICB9CgogICAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTsKICAgICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdOwoKICAgICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7CiAgICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudAogICAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTsKICAgICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7CiAgICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7CiAgICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGUKICAgICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkgewogICAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudAogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybQogICAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLgogICAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkgewogICAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7CiAgICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHsKICAgICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHsKICAgICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGUKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgd2FybigKICAgICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICsKICAgICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgKwogICAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgKwogICAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgKwogICAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJwogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuCiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0CiAgICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50CiAgICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtOwogICAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pOwoKICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZQogICAgICAgICAgY3JlYXRlRWxtKAogICAgICAgICAgICB2bm9kZSwKICAgICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLAogICAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYQogICAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICsKICAgICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MCkKICAgICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSwKICAgICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pCiAgICAgICAgICApOwoKICAgICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseQogICAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHsKICAgICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50OwogICAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpOwogICAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTsKICAgICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHsKICAgICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gIzY1MTMKICAgICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuCiAgICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgImluc2VydGVkIiBob29rLgogICAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7CiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkgewogICAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2sKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7CiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGUKICAgICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7CiAgICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkgewogICAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTsKICAgICAgcmV0dXJuIHZub2RlLmVsbQogICAgfQogIH0KCiAgLyogICovCgogIHZhciBkaXJlY3RpdmVzID0gewogICAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLAogICAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLAogICAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHsKICAgICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTsKICAgIH0KICB9OwoKICBmdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHsKICAgIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7CiAgICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkgewogICAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTsKICAgIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlOwogICAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTsKICAgIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7CgogICAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107CiAgICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTsKCiAgICB2YXIga2V5LCBvbGREaXIsIGRpcjsKICAgIGZvciAoa2V5IGluIG5ld0RpcnMpIHsKICAgICAgb2xkRGlyID0gb2xkRGlyc1trZXldOwogICAgICBkaXIgPSBuZXdEaXJzW2tleV07CiAgICAgIGlmICghb2xkRGlyKSB7CiAgICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZAogICAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7CiAgICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkgewogICAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZQogICAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTsKICAgICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZzsKICAgICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7CiAgICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7CiAgICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkgewogICAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgaWYgKGlzQ3JlYXRlKSB7CiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsSW5zZXJ0KCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7CiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmICghaXNDcmVhdGUpIHsKICAgICAgZm9yIChrZXkgaW4gb2xkRGlycykgewogICAgICAgIGlmICghbmV3RGlyc1trZXldKSB7CiAgICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kCiAgICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CgogIGZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoCiAgICBkaXJzLAogICAgdm0KICApIHsKICAgIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgaWYgKCFkaXJzKSB7CiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgICByZXR1cm4gcmVzCiAgICB9CiAgICB2YXIgaSwgZGlyOwogICAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHsKICAgICAgZGlyID0gZGlyc1tpXTsKICAgICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7CiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzOwogICAgICB9CiAgICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyOwogICAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTsKICAgIH0KICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgcmV0dXJuIHJlcwogIH0KCiAgZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7CiAgICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyAiLiIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSkKICB9CgogIGZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHsKICAgIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTsKICAgIGlmIChmbikgewogICAgICB0cnkgewogICAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoImRpcmVjdGl2ZSAiICsgKGRpci5uYW1lKSArICIgIiArIGhvb2sgKyAiIGhvb2siKSk7CiAgICAgIH0KICAgIH0KICB9CgogIHZhciBiYXNlTW9kdWxlcyA9IFsKICAgIHJlZiwKICAgIGRpcmVjdGl2ZXMKICBdOwoKICAvKiAgKi8KCiAgZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkgewogICAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zOwogICAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7CiAgICAgIHJldHVybgogICAgfQogICAgdmFyIGtleSwgY3VyLCBvbGQ7CiAgICB2YXIgZWxtID0gdm5vZGUuZWxtOwogICAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTsKICAgIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307CiAgICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXQKICAgIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7CiAgICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpOwogICAgfQoKICAgIGZvciAoa2V5IGluIGF0dHJzKSB7CiAgICAgIGN1ciA9IGF0dHJzW2tleV07CiAgICAgIG9sZCA9IG9sZEF0dHJzW2tleV07CiAgICAgIGlmIChvbGQgIT09IGN1cikgewogICAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7CiAgICAgIH0KICAgIH0KICAgIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dCiAgICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkgewogICAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpOwogICAgfQogICAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHsKICAgICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHsKICAgICAgICBpZiAoaXNYbGluayhrZXkpKSB7CiAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpOwogICAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkgewogICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHsKICAgIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7CiAgICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTsKICAgIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7CiAgICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlCiAgICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+CiAgICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkgewogICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPiwKICAgICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mICJ0cnVlIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWcKICAgICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJwogICAgICAgICAgPyAndHJ1ZScKICAgICAgICAgIDoga2V5OwogICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHsKICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7CiAgICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkgewogICAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHsKICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkgewogICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7CiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpOwogICAgfSBlbHNlIHsKICAgICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb24KICAgICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlcgogICAgICAvLyBpbW1lZGlhdGVseS4KICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgIGlmICgKICAgICAgICBpc0lFICYmICFpc0lFOSAmJgogICAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYKICAgICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGgKICAgICAgKSB7CiAgICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7CiAgICAgICAgfTsKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpOwogICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZQogICAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi8KICAgICAgfQogICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7CiAgICB9CiAgfQoKICB2YXIgYXR0cnMgPSB7CiAgICBjcmVhdGU6IHVwZGF0ZUF0dHJzLAogICAgdXBkYXRlOiB1cGRhdGVBdHRycwogIH07CgogIC8qICAqLwoKICBmdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7CiAgICB2YXIgZWwgPSB2bm9kZS5lbG07CiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7CiAgICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7CiAgICBpZiAoCiAgICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiYKICAgICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoCiAgICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoCiAgICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmCiAgICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpCiAgICAgICAgKQogICAgICApCiAgICApIHsKICAgICAgcmV0dXJuCiAgICB9CgogICAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpOwoKICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXMKICAgIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7CiAgICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkgewogICAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTsKICAgIH0KCiAgICAvLyBzZXQgdGhlIGNsYXNzCiAgICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7CiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpOwogICAgICBlbC5fcHJldkNsYXNzID0gY2xzOwogICAgfQogIH0KCiAgdmFyIGtsYXNzID0gewogICAgY3JlYXRlOiB1cGRhdGVDbGFzcywKICAgIHVwZGF0ZTogdXBkYXRlQ2xhc3MKICB9OwoKICAvKiAgKi8KCiAgdmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1x3KS4rXC1fJFxdXS87CgogIGZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7CiAgICB2YXIgaW5TaW5nbGUgPSBmYWxzZTsKICAgIHZhciBpbkRvdWJsZSA9IGZhbHNlOwogICAgdmFyIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsKICAgIHZhciBpblJlZ2V4ID0gZmFsc2U7CiAgICB2YXIgY3VybHkgPSAwOwogICAgdmFyIHNxdWFyZSA9IDA7CiAgICB2YXIgcGFyZW4gPSAwOwogICAgdmFyIGxhc3RGaWx0ZXJJbmRleCA9IDA7CiAgICB2YXIgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVyczsKCiAgICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7CiAgICAgIHByZXYgPSBjOwogICAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7CiAgICAgIGlmIChpblNpbmdsZSkgewogICAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfQogICAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7CiAgICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgeyBpbkRvdWJsZSA9IGZhbHNlOyB9CiAgICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykgewogICAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9CiAgICAgIH0gZWxzZSBpZiAoaW5SZWdleCkgewogICAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9CiAgICAgIH0gZWxzZSBpZiAoCiAgICAgICAgYyA9PT0gMHg3QyAmJiAvLyBwaXBlCiAgICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmCiAgICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmCiAgICAgICAgIWN1cmx5ICYmICFzcXVhcmUgJiYgIXBhcmVuCiAgICAgICkgewogICAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIC8vIGZpcnN0IGZpbHRlciwgZW5kIG9mIGV4cHJlc3Npb24KICAgICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxOwogICAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHB1c2hGaWx0ZXIoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAiCiAgICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnCiAgICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgCiAgICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoCiAgICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApCiAgICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbCiAgICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdCiAgICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7CiAgICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9CiAgICAgICAgfQogICAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC8KICAgICAgICAgIHZhciBqID0gaSAtIDE7CiAgICAgICAgICB2YXIgcCA9ICh2b2lkIDApOwogICAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXIKICAgICAgICAgIGZvciAoOyBqID49IDA7IGotLSkgewogICAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTsKICAgICAgICAgICAgaWYgKHAgIT09ICcgJykgeyBicmVhayB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkgewogICAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpOwogICAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHsKICAgICAgcHVzaEZpbHRlcigpOwogICAgfQoKICAgIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkgewogICAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpOwogICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTsKICAgIH0KCiAgICBpZiAoZmlsdGVycykgewogICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykgewogICAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGV4cHJlc3Npb24KICB9CgogIGZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7CiAgICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7CiAgICBpZiAoaSA8IDApIHsKICAgICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXIKICAgICAgcmV0dXJuICgiX2YoXCIiICsgZmlsdGVyICsgIlwiKSgiICsgZXhwICsgIikiKQogICAgfSBlbHNlIHsKICAgICAgdmFyIG5hbWUgPSBmaWx0ZXIuc2xpY2UoMCwgaSk7CiAgICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTsKICAgICAgcmV0dXJuICgiX2YoXCIiICsgbmFtZSArICJcIikoIiArIGV4cCArIChhcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJncykpCiAgICB9CiAgfQoKICAvKiAgKi8KCgoKICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqLwogIGZ1bmN0aW9uIGJhc2VXYXJuIChtc2csIHJhbmdlKSB7CiAgICBjb25zb2xlLmVycm9yKCgiW1Z1ZSBjb21waWxlcl06ICIgKyBtc2cpKTsKICB9CiAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqLwoKICBmdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uICgKICAgIG1vZHVsZXMsCiAgICBrZXkKICApIHsKICAgIHJldHVybiBtb2R1bGVzCiAgICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KQogICAgICA6IFtdCiAgfQoKICBmdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlLCBkeW5hbWljKSB7CiAgICAoZWwucHJvcHMgfHwgKGVsLnByb3BzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSkpOwogICAgZWwucGxhaW4gPSBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHsKICAgIHZhciBhdHRycyA9IGR5bmFtaWMKICAgICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpCiAgICAgIDogKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSk7CiAgICBhdHRycy5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSkpOwogICAgZWwucGxhaW4gPSBmYWxzZTsKICB9CgogIC8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKQogIGZ1bmN0aW9uIGFkZFJhd0F0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UpIHsKICAgIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7CiAgICBlbC5hdHRyc0xpc3QucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSwgcmFuZ2UpKTsKICB9CgogIGZ1bmN0aW9uIGFkZERpcmVjdGl2ZSAoCiAgICBlbCwKICAgIG5hbWUsCiAgICByYXdOYW1lLAogICAgdmFsdWUsCiAgICBhcmcsCiAgICBpc0R5bmFtaWNBcmcsCiAgICBtb2RpZmllcnMsCiAgICByYW5nZQogICkgewogICAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHsKICAgICAgbmFtZTogbmFtZSwKICAgICAgcmF3TmFtZTogcmF3TmFtZSwKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBhcmc6IGFyZywKICAgICAgaXNEeW5hbWljQXJnOiBpc0R5bmFtaWNBcmcsCiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzCiAgICB9LCByYW5nZSkpOwogICAgZWwucGxhaW4gPSBmYWxzZTsKICB9CgogIGZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7CiAgICByZXR1cm4gZHluYW1pYwogICAgICA/ICgiX3AoIiArIG5hbWUgKyAiLFwiIiArIHN5bWJvbCArICJcIikiKQogICAgICA6IHN5bWJvbCArIG5hbWUgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWQKICB9CgogIGZ1bmN0aW9uIGFkZEhhbmRsZXIgKAogICAgZWwsCiAgICBuYW1lLAogICAgdmFsdWUsCiAgICBtb2RpZmllcnMsCiAgICBpbXBvcnRhbnQsCiAgICB3YXJuLAogICAgcmFuZ2UsCiAgICBkeW5hbWljCiAgKSB7CiAgICBtb2RpZmllcnMgPSBtb2RpZmllcnMgfHwgZW1wdHlPYmplY3Q7CiAgICAvLyB3YXJuIHByZXZlbnQgYW5kIHBhc3NpdmUgbW9kaWZpZXIKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgaWYgKAogICAgICB3YXJuICYmCiAgICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlCiAgICApIHsKICAgICAgd2FybigKICAgICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArCiAgICAgICAgJ1Bhc3NpdmUgaGFuZGxlciBjYW5cJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsCiAgICAgICAgcmFuZ2UKICAgICAgKTsKICAgIH0KCiAgICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmUKICAgIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlCiAgICAvLyB0aGUgb25seSB0YXJnZXQgZW52cyB0aGF0IGhhdmUgcmlnaHQvbWlkZGxlIGNsaWNrcy4KICAgIGlmIChtb2RpZmllcnMucmlnaHQpIHsKICAgICAgaWYgKGR5bmFtaWMpIHsKICAgICAgICBuYW1lID0gIigiICsgbmFtZSArICIpPT09J2NsaWNrJz8nY29udGV4dG1lbnUnOigiICsgbmFtZSArICIpIjsKICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7CiAgICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7CiAgICAgICAgZGVsZXRlIG1vZGlmaWVycy5yaWdodDsKICAgICAgfQogICAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7CiAgICAgIGlmIChkeW5hbWljKSB7CiAgICAgICAgbmFtZSA9ICIoIiArIG5hbWUgKyAiKT09PSdjbGljayc/J21vdXNldXAnOigiICsgbmFtZSArICIpIjsKICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7CiAgICAgICAgbmFtZSA9ICdtb3VzZXVwJzsKICAgICAgfQogICAgfQoKICAgIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXIKICAgIGlmIChtb2RpZmllcnMuY2FwdHVyZSkgewogICAgICBkZWxldGUgbW9kaWZpZXJzLmNhcHR1cmU7CiAgICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyEnLCBuYW1lLCBkeW5hbWljKTsKICAgIH0KICAgIGlmIChtb2RpZmllcnMub25jZSkgewogICAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7CiAgICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJ34nLCBuYW1lLCBkeW5hbWljKTsKICAgIH0KICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgaWYgKG1vZGlmaWVycy5wYXNzaXZlKSB7CiAgICAgIGRlbGV0ZSBtb2RpZmllcnMucGFzc2l2ZTsKICAgICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignJicsIG5hbWUsIGR5bmFtaWMpOwogICAgfQoKICAgIHZhciBldmVudHM7CiAgICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkgewogICAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTsKICAgICAgZXZlbnRzID0gZWwubmF0aXZlRXZlbnRzIHx8IChlbC5uYXRpdmVFdmVudHMgPSB7fSk7CiAgICB9IGVsc2UgewogICAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTsKICAgIH0KCiAgICB2YXIgbmV3SGFuZGxlciA9IHJhbmdlU2V0SXRlbSh7IHZhbHVlOiB2YWx1ZS50cmltKCksIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpOwogICAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHsKICAgICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7CiAgICB9CgogICAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdOwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHsKICAgICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7CiAgICB9IGVsc2UgaWYgKGhhbmRsZXJzKSB7CiAgICAgIGV2ZW50c1tuYW1lXSA9IGltcG9ydGFudCA/IFtuZXdIYW5kbGVyLCBoYW5kbGVyc10gOiBbaGFuZGxlcnMsIG5ld0hhbmRsZXJdOwogICAgfSBlbHNlIHsKICAgICAgZXZlbnRzW25hbWVdID0gbmV3SGFuZGxlcjsKICAgIH0KCiAgICBlbC5wbGFpbiA9IGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gZ2V0UmF3QmluZGluZ0F0dHIgKAogICAgZWwsCiAgICBuYW1lCiAgKSB7CiAgICByZXR1cm4gZWwucmF3QXR0cnNNYXBbJzonICsgbmFtZV0gfHwKICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHwKICAgICAgZWwucmF3QXR0cnNNYXBbbmFtZV0KICB9CgogIGZ1bmN0aW9uIGdldEJpbmRpbmdBdHRyICgKICAgIGVsLAogICAgbmFtZSwKICAgIGdldFN0YXRpYwogICkgewogICAgdmFyIGR5bmFtaWNWYWx1ZSA9CiAgICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICc6JyArIG5hbWUpIHx8CiAgICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpOwogICAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7CiAgICAgIHJldHVybiBwYXJzZUZpbHRlcnMoZHluYW1pY1ZhbHVlKQogICAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7CiAgICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpOwogICAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSkKICAgICAgfQogICAgfQogIH0KCiAgLy8gbm90ZTogdGhpcyBvbmx5IHJlbW92ZXMgdGhlIGF0dHIgZnJvbSB0aGUgQXJyYXkgKGF0dHJzTGlzdCkgc28gdGhhdCBpdAogIC8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuCiAgLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzCiAgLy8gbmVlZGVkIGR1cmluZyBjb2RlZ2VuLgogIGZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHIgKAogICAgZWwsCiAgICBuYW1lLAogICAgcmVtb3ZlRnJvbU1hcAogICkgewogICAgdmFyIHZhbDsKICAgIGlmICgodmFsID0gZWwuYXR0cnNNYXBbbmFtZV0pICE9IG51bGwpIHsKICAgICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBpZiAobGlzdFtpXS5uYW1lID09PSBuYW1lKSB7CiAgICAgICAgICBsaXN0LnNwbGljZShpLCAxKTsKICAgICAgICAgIGJyZWFrCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAocmVtb3ZlRnJvbU1hcCkgewogICAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07CiAgICB9CiAgICByZXR1cm4gdmFsCiAgfQoKICBmdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCAoCiAgICBlbCwKICAgIG5hbWUKICApIHsKICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0OwogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICB2YXIgYXR0ciA9IGxpc3RbaV07CiAgICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkgewogICAgICAgIGxpc3Quc3BsaWNlKGksIDEpOwogICAgICAgIHJldHVybiBhdHRyCiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoCiAgICBpdGVtLAogICAgcmFuZ2UKICApIHsKICAgIGlmIChyYW5nZSkgewogICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkgewogICAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDsKICAgICAgfQogICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHsKICAgICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGl0ZW0KICB9CgogIC8qICAqLwoKICAvKioKICAgKiBDcm9zcy1wbGF0Zm9ybSBjb2RlIGdlbmVyYXRpb24gZm9yIGNvbXBvbmVudCB2LW1vZGVsCiAgICovCiAgZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKAogICAgZWwsCiAgICB2YWx1ZSwKICAgIG1vZGlmaWVycwogICkgewogICAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTsKICAgIHZhciBudW1iZXIgPSByZWYubnVtYmVyOwogICAgdmFyIHRyaW0gPSByZWYudHJpbTsKCiAgICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnOwogICAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9IGJhc2VWYWx1ZUV4cHJlc3Npb247CiAgICBpZiAodHJpbSkgewogICAgICB2YWx1ZUV4cHJlc3Npb24gPQogICAgICAgICIodHlwZW9mICIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgIiA9PT0gJ3N0cmluZyciICsKICAgICAgICAiPyAiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArICIudHJpbSgpIiArCiAgICAgICAgIjogIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyAiKSI7CiAgICB9CiAgICBpZiAobnVtYmVyKSB7CiAgICAgIHZhbHVlRXhwcmVzc2lvbiA9ICJfbigiICsgdmFsdWVFeHByZXNzaW9uICsgIikiOwogICAgfQogICAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTsKCiAgICBlbC5tb2RlbCA9IHsKICAgICAgdmFsdWU6ICgiKCIgKyB2YWx1ZSArICIpIiksCiAgICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSwKICAgICAgY2FsbGJhY2s6ICgiZnVuY3Rpb24gKCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgIikgeyIgKyBhc3NpZ25tZW50ICsgIn0iKQogICAgfTsKICB9CgogIC8qKgogICAqIENyb3NzLXBsYXRmb3JtIGNvZGVnZW4gaGVscGVyIGZvciBnZW5lcmF0aW5nIHYtbW9kZWwgdmFsdWUgYXNzaWdubWVudCBjb2RlLgogICAqLwogIGZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlICgKICAgIHZhbHVlLAogICAgYXNzaWdubWVudAogICkgewogICAgdmFyIHJlcyA9IHBhcnNlTW9kZWwodmFsdWUpOwogICAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHsKICAgICAgcmV0dXJuICh2YWx1ZSArICI9IiArIGFzc2lnbm1lbnQpCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gKCIkc2V0KCIgKyAocmVzLmV4cCkgKyAiLCAiICsgKHJlcy5rZXkpICsgIiwgIiArIGFzc2lnbm1lbnQgKyAiKSIpCiAgICB9CiAgfQoKICAvKioKICAgKiBQYXJzZSBhIHYtbW9kZWwgZXhwcmVzc2lvbiBpbnRvIGEgYmFzZSBwYXRoIGFuZCBhIGZpbmFsIGtleSBzZWdtZW50LgogICAqIEhhbmRsZXMgYm90aCBkb3QtcGF0aCBhbmQgcG9zc2libGUgc3F1YXJlIGJyYWNrZXRzLgogICAqCiAgICogUG9zc2libGUgY2FzZXM6CiAgICoKICAgKiAtIHRlc3QKICAgKiAtIHRlc3Rba2V5XQogICAqIC0gdGVzdFt0ZXN0MVtrZXldXQogICAqIC0gdGVzdFsiYSJdW2tleV0KICAgKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFba2V5XV0KICAgKiAtIHRlc3QueHh4LmFbImFzYSJdW3Rlc3QxW2tleV1dCiAgICoKICAgKi8KCiAgdmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7CgoKCiAgZnVuY3Rpb24gcGFyc2VNb2RlbCAodmFsKSB7CiAgICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9wdWxsLzc3MzAKICAgIC8vIGFsbG93IHYtbW9kZWw9Im9iai52YWwgIiAodHJhaWxpbmcgd2hpdGVzcGFjZSkKICAgIHZhbCA9IHZhbC50cmltKCk7CiAgICBsZW4gPSB2YWwubGVuZ3RoOwoKICAgIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHsKICAgICAgaW5kZXgkMSA9IHZhbC5sYXN0SW5kZXhPZignLicpOwogICAgICBpZiAoaW5kZXgkMSA+IC0xKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGV4cDogdmFsLnNsaWNlKDAsIGluZGV4JDEpLAogICAgICAgICAga2V5OiAnIicgKyB2YWwuc2xpY2UoaW5kZXgkMSArIDEpICsgJyInCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBleHA6IHZhbCwKICAgICAgICAgIGtleTogbnVsbAogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHN0ciA9IHZhbDsKICAgIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7CgogICAgd2hpbGUgKCFlb2YoKSkgewogICAgICBjaHIgPSBuZXh0KCk7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7CiAgICAgICAgcGFyc2VTdHJpbmcoY2hyKTsKICAgICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHsKICAgICAgICBwYXJzZUJyYWNrZXQoY2hyKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB7CiAgICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLAogICAgICBrZXk6IHZhbC5zbGljZShleHByZXNzaW9uUG9zICsgMSwgZXhwcmVzc2lvbkVuZFBvcykKICAgIH0KICB9CgogIGZ1bmN0aW9uIG5leHQgKCkgewogICAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgkMSkKICB9CgogIGZ1bmN0aW9uIGVvZiAoKSB7CiAgICByZXR1cm4gaW5kZXgkMSA+PSBsZW4KICB9CgogIGZ1bmN0aW9uIGlzU3RyaW5nU3RhcnQgKGNocikgewogICAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4MjcKICB9CgogIGZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7CiAgICB2YXIgaW5CcmFja2V0ID0gMTsKICAgIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxOwogICAgd2hpbGUgKCFlb2YoKSkgewogICAgICBjaHIgPSBuZXh0KCk7CiAgICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHsKICAgICAgICBwYXJzZVN0cmluZyhjaHIpOwogICAgICAgIGNvbnRpbnVlCiAgICAgIH0KICAgICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfQogICAgICBpZiAoY2hyID09PSAweDVEKSB7IGluQnJhY2tldC0tOyB9CiAgICAgIGlmIChpbkJyYWNrZXQgPT09IDApIHsKICAgICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTsKICAgICAgICBicmVhawogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7CiAgICB2YXIgc3RyaW5nUXVvdGUgPSBjaHI7CiAgICB3aGlsZSAoIWVvZigpKSB7CiAgICAgIGNociA9IG5leHQoKTsKICAgICAgaWYgKGNociA9PT0gc3RyaW5nUXVvdGUpIHsKICAgICAgICBicmVhawogICAgICB9CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgdmFyIHdhcm4kMTsKCiAgLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZQogIC8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuCiAgdmFyIFJBTkdFX1RPS0VOID0gJ19fcic7CiAgdmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7CgogIGZ1bmN0aW9uIG1vZGVsICgKICAgIGVsLAogICAgZGlyLAogICAgX3dhcm4KICApIHsKICAgIHdhcm4kMSA9IF93YXJuOwogICAgdmFyIHZhbHVlID0gZGlyLnZhbHVlOwogICAgdmFyIG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7CiAgICB2YXIgdGFnID0gZWwudGFnOwogICAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlOwoKICAgIHsKICAgICAgLy8gaW5wdXRzIHdpdGggdHlwZT0iZmlsZSIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQncwogICAgICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLgogICAgICBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdmaWxlJykgewogICAgICAgIHdhcm4kMSgKICAgICAgICAgICI8IiArIChlbC50YWcpICsgIiB2LW1vZGVsPVwiIiArIHZhbHVlICsgIlwiIHR5cGU9XCJmaWxlXCI+OlxuIiArCiAgICAgICAgICAiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC4iLAogICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXQogICAgICAgICk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoZWwuY29tcG9uZW50KSB7CiAgICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTsKICAgICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWUKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHsKICAgICAgZ2VuU2VsZWN0KGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTsKICAgIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHsKICAgICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7CiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAncmFkaW8nKSB7CiAgICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpOwogICAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAndGV4dGFyZWEnKSB7CiAgICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7CiAgICB9IGVsc2UgaWYgKCFjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7CiAgICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTsKICAgICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWUKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9IGVsc2UgewogICAgICB3YXJuJDEoCiAgICAgICAgIjwiICsgKGVsLnRhZykgKyAiIHYtbW9kZWw9XCIiICsgdmFsdWUgKyAiXCI+OiAiICsKICAgICAgICAidi1tb2RlbCBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZWxlbWVudCB0eXBlLiAiICsKICAgICAgICAnSWYgeW91IGFyZSB3b3JraW5nIHdpdGggY29udGVudGVkaXRhYmxlLCBpdFwncyByZWNvbW1lbmRlZCB0byAnICsKICAgICAgICAnd3JhcCBhIGxpYnJhcnkgZGVkaWNhdGVkIGZvciB0aGF0IHB1cnBvc2UgaW5zaWRlIGEgY3VzdG9tIGNvbXBvbmVudC4nLAogICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ10KICAgICAgKTsKICAgIH0KCiAgICAvLyBlbnN1cmUgcnVudGltZSBkaXJlY3RpdmUgbWV0YWRhdGEKICAgIHJldHVybiB0cnVlCiAgfQoKICBmdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsICgKICAgIGVsLAogICAgdmFsdWUsCiAgICBtb2RpZmllcnMKICApIHsKICAgIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjsKICAgIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnOwogICAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7CiAgICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJzsKICAgIGFkZFByb3AoZWwsICdjaGVja2VkJywKICAgICAgIkFycmF5LmlzQXJyYXkoIiArIHZhbHVlICsgIikiICsKICAgICAgIj9faSgiICsgdmFsdWUgKyAiLCIgKyB2YWx1ZUJpbmRpbmcgKyAiKT4tMSIgKyAoCiAgICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnCiAgICAgICAgICA/ICgiOigiICsgdmFsdWUgKyAiKSIpCiAgICAgICAgICA6ICgiOl9xKCIgKyB2YWx1ZSArICIsIiArIHRydWVWYWx1ZUJpbmRpbmcgKyAiKSIpCiAgICAgICkKICAgICk7CiAgICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywKICAgICAgInZhciAkJGE9IiArIHZhbHVlICsgIiwiICsKICAgICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArCiAgICAgICAgICAiJCRjPSQkZWwuY2hlY2tlZD8oIiArIHRydWVWYWx1ZUJpbmRpbmcgKyAiKTooIiArIGZhbHNlVmFsdWVCaW5kaW5nICsgIik7IiArCiAgICAgICdpZihBcnJheS5pc0FycmF5KCQkYSkpeycgKwogICAgICAgICJ2YXIgJCR2PSIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgIiwiICsKICAgICAgICAgICAgJyQkaT1faSgkJGEsJCR2KTsnICsKICAgICAgICAiaWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuY29uY2F0KFskJHZdKScpKSArICIpfSIgKwogICAgICAgICJlbHNleyQkaT4tMSYmKCIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKScpKSArICIpfSIgKwogICAgICAifWVsc2V7IiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYycpKSArICJ9IiwKICAgICAgbnVsbCwgdHJ1ZQogICAgKTsKICB9CgogIGZ1bmN0aW9uIGdlblJhZGlvTW9kZWwgKAogICAgZWwsCiAgICB2YWx1ZSwKICAgIG1vZGlmaWVycwogICkgewogICAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyOwogICAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7CiAgICB2YWx1ZUJpbmRpbmcgPSBudW1iZXIgPyAoIl9uKCIgKyB2YWx1ZUJpbmRpbmcgKyAiKSIpIDogdmFsdWVCaW5kaW5nOwogICAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCAoIl9xKCIgKyB2YWx1ZSArICIsIiArIHZhbHVlQmluZGluZyArICIpIikpOwogICAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUJpbmRpbmcpLCBudWxsLCB0cnVlKTsKICB9CgogIGZ1bmN0aW9uIGdlblNlbGVjdCAoCiAgICBlbCwKICAgIHZhbHVlLAogICAgbW9kaWZpZXJzCiAgKSB7CiAgICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7CiAgICB2YXIgc2VsZWN0ZWRWYWwgPSAiQXJyYXkucHJvdG90eXBlLmZpbHRlciIgKwogICAgICAiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSkiICsKICAgICAgIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTsiICsKICAgICAgInJldHVybiAiICsgKG51bWJlciA/ICdfbih2YWwpJyA6ICd2YWwnKSArICJ9KSI7CgogICAgdmFyIGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJzsKICAgIHZhciBjb2RlID0gInZhciAkJHNlbGVjdGVkVmFsID0gIiArIHNlbGVjdGVkVmFsICsgIjsiOwogICAgY29kZSA9IGNvZGUgKyAiICIgKyAoZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIGFzc2lnbm1lbnQpKTsKICAgIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTsKICB9CgogIGZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoCiAgICBlbCwKICAgIHZhbHVlLAogICAgbW9kaWZpZXJzCiAgKSB7CiAgICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7CgogICAgLy8gd2FybiBpZiB2LWJpbmQ6dmFsdWUgY29uZmxpY3RzIHdpdGggdi1tb2RlbAogICAgLy8gZXhjZXB0IGZvciBpbnB1dHMgd2l0aCB2LWJpbmQ6dHlwZQogICAgewogICAgICB2YXIgdmFsdWUkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSB8fCBlbC5hdHRyc01hcFsnOnZhbHVlJ107CiAgICAgIHZhciB0eXBlQmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dHlwZSddIHx8IGVsLmF0dHJzTWFwWyc6dHlwZSddOwogICAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHsKICAgICAgICB2YXIgYmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSA/ICd2LWJpbmQ6dmFsdWUnIDogJzp2YWx1ZSc7CiAgICAgICAgd2FybiQxKAogICAgICAgICAgYmluZGluZyArICI9XCIiICsgdmFsdWUkMSArICJcIiBjb25mbGljdHMgd2l0aCB2LW1vZGVsIG9uIHRoZSBzYW1lIGVsZW1lbnQgIiArCiAgICAgICAgICAnYmVjYXVzZSB0aGUgbGF0dGVyIGFscmVhZHkgZXhwYW5kcyB0byBhIHZhbHVlIGJpbmRpbmcgaW50ZXJuYWxseScsCiAgICAgICAgICBlbC5yYXdBdHRyc01hcFtiaW5kaW5nXQogICAgICAgICk7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9OwogICAgdmFyIGxhenkgPSByZWYubGF6eTsKICAgIHZhciBudW1iZXIgPSByZWYubnVtYmVyOwogICAgdmFyIHRyaW0gPSByZWYudHJpbTsKICAgIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7CiAgICB2YXIgZXZlbnQgPSBsYXp5CiAgICAgID8gJ2NoYW5nZScKICAgICAgOiB0eXBlID09PSAncmFuZ2UnCiAgICAgICAgPyBSQU5HRV9UT0tFTgogICAgICAgIDogJ2lucHV0JzsKCiAgICB2YXIgdmFsdWVFeHByZXNzaW9uID0gJyRldmVudC50YXJnZXQudmFsdWUnOwogICAgaWYgKHRyaW0pIHsKICAgICAgdmFsdWVFeHByZXNzaW9uID0gIiRldmVudC50YXJnZXQudmFsdWUudHJpbSgpIjsKICAgIH0KICAgIGlmIChudW1iZXIpIHsKICAgICAgdmFsdWVFeHByZXNzaW9uID0gIl9uKCIgKyB2YWx1ZUV4cHJlc3Npb24gKyAiKSI7CiAgICB9CgogICAgdmFyIGNvZGUgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTsKICAgIGlmIChuZWVkQ29tcG9zaXRpb25HdWFyZCkgewogICAgICBjb2RlID0gImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjsiICsgY29kZTsKICAgIH0KCiAgICBhZGRQcm9wKGVsLCAndmFsdWUnLCAoIigiICsgdmFsdWUgKyAiKSIpKTsKICAgIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTsKICAgIGlmICh0cmltIHx8IG51bWJlcikgewogICAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpOwogICAgfQogIH0KCiAgLyogICovCgogIC8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS4KICAvLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlCiAgLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZQogIC8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuCiAgZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikgewogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkgewogICAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50CiAgICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7CiAgICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7CiAgICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07CiAgICB9CiAgICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeQogICAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNAogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkgewogICAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pOwogICAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dOwogICAgfQogIH0KCiAgdmFyIHRhcmdldCQxOwoKICBmdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkgewogICAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmUKICAgIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7CiAgICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgIGlmIChyZXMgIT09IG51bGwpIHsKICAgICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpOwogICAgICB9CiAgICB9CiAgfQoKICAvLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcAogIC8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc28KICAvLyBzYWZlIHRvIGV4Y2x1ZGUuCiAgdmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7CgogIGZ1bmN0aW9uIGFkZCQxICgKICAgIG5hbWUsCiAgICBoYW5kbGVyLAogICAgY2FwdHVyZSwKICAgIHBhc3NpdmUKICApIHsKICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXIKICAgIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzCiAgICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi4KICAgIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCwKICAgIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWQKICAgIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC4KICAgIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHsKICAgICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wOwogICAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyOwogICAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIGlmICgKICAgICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuCiAgICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW4KICAgICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uCiAgICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8CiAgICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnQKICAgICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8CiAgICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnMKICAgICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGUKICAgICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZQogICAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fAogICAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZQogICAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudAogICAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlCiAgICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudAogICAgICAgICkgewogICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKAogICAgICBuYW1lLAogICAgICBoYW5kbGVyLAogICAgICBzdXBwb3J0c1Bhc3NpdmUKICAgICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9CiAgICAgICAgOiBjYXB0dXJlCiAgICApOwogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlJDIgKAogICAgbmFtZSwKICAgIGhhbmRsZXIsCiAgICBjYXB0dXJlLAogICAgX3RhcmdldAogICkgewogICAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoCiAgICAgIG5hbWUsCiAgICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlciwKICAgICAgY2FwdHVyZQogICAgKTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7CiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7CiAgICAgIHJldHVybgogICAgfQogICAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTsKICAgIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307CiAgICB0YXJnZXQkMSA9IHZub2RlLmVsbTsKICAgIG5vcm1hbGl6ZUV2ZW50cyhvbik7CiAgICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpOwogICAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7CiAgfQoKICB2YXIgZXZlbnRzID0gewogICAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsCiAgICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVycwogIH07CgogIC8qICAqLwoKICB2YXIgc3ZnQ29udGFpbmVyOwoKICBmdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7CiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7CiAgICAgIHJldHVybgogICAgfQogICAgdmFyIGtleSwgY3VyOwogICAgdmFyIGVsbSA9IHZub2RlLmVsbTsKICAgIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307CiAgICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9OwogICAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0CiAgICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkgewogICAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTsKICAgIH0KCiAgICBmb3IgKGtleSBpbiBvbGRQcm9wcykgewogICAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7CiAgICAgICAgZWxtW2tleV0gPSAnJzsKICAgICAgfQogICAgfQoKICAgIGZvciAoa2V5IGluIHByb3BzKSB7CiAgICAgIGN1ciA9IHByb3BzW2tleV07CiAgICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLAogICAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9ycwogICAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKQogICAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHsKICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfQogICAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfQogICAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGUKICAgICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eQogICAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7CiAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2UKICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkCiAgICAgICAgZWxtLl92YWx1ZSA9IGN1cjsKICAgICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWUKICAgICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTsKICAgICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7CiAgICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHsKICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHMKICAgICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9ICI8c3ZnPiIgKyBjdXIgKyAiPC9zdmc+IjsKICAgICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7CiAgICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7CiAgICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpOwogICAgICAgIH0KICAgICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHsKICAgICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKAogICAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLgogICAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHkKICAgICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLgogICAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2VzYXJyeSBgY2hlY2tlZGAgdXBkYXRlLgogICAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XQogICAgICApIHsKICAgICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93CiAgICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZQogICAgICAgIHRyeSB7CiAgICAgICAgICBlbG1ba2V5XSA9IGN1cjsKICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICB9CiAgICB9CiAgfQoKICAvLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWUKCgogIGZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7CiAgICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmICgKICAgICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8CiAgICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8CiAgICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpCiAgICApKQogIH0KCiAgZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHsKICAgIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXMKICAgIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZQogICAgdmFyIG5vdEluRm9jdXMgPSB0cnVlOwogICAgLy8gIzYxNTcKICAgIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZQogICAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge30KICAgIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWwKICB9CgogIGZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkgewogICAgdmFyIHZhbHVlID0gZWxtLnZhbHVlOwogICAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lCiAgICBpZiAoaXNEZWYobW9kaWZpZXJzKSkgewogICAgICBpZiAobW9kaWZpZXJzLm51bWJlcikgewogICAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbCkKICAgICAgfQogICAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHsKICAgICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpCiAgICAgIH0KICAgIH0KICAgIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsCiAgfQoKICB2YXIgZG9tUHJvcHMgPSB7CiAgICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLAogICAgdXBkYXRlOiB1cGRhdGVET01Qcm9wcwogIH07CgogIC8qICAqLwoKICB2YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHsKICAgIHZhciByZXMgPSB7fTsKICAgIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlwpKS9nOwogICAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLzsKICAgIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICBpZiAoaXRlbSkgewogICAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTsKICAgICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlcwogIH0pOwoKICAvLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZQogIGZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkgewogICAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpOwogICAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uCiAgICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdAogICAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGUKICAgICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpCiAgICAgIDogc3R5bGUKICB9CgogIC8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3QKICBmdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkgewogICAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkgewogICAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKQogICAgfQogICAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpCiAgICB9CiAgICByZXR1cm4gYmluZGluZ1N0eWxlCiAgfQoKICAvKioKICAgKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzCiAgICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXQKICAgKi8KICBmdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHsKICAgIHZhciByZXMgPSB7fTsKICAgIHZhciBzdHlsZURhdGE7CgogICAgaWYgKGNoZWNrQ2hpbGQpIHsKICAgICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlOwogICAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7CiAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTsKICAgICAgICBpZiAoCiAgICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiYKICAgICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKQogICAgICAgICkgewogICAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHsKICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTsKICAgIH0KCiAgICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlOwogICAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7CiAgICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkgewogICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXMKICB9CgogIC8qICAqLwoKICB2YXIgY3NzVmFyUkUgPSAvXi0tLzsKICB2YXIgaW1wb3J0YW50UkUgPSAvXHMqIWltcG9ydGFudCQvOwogIHZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHsKICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTsKICAgIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7CiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpOwogICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7CiAgICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy4KICAgICAgICAvLyB7ZGlzcGxheTogWyItd2Via2l0LWJveCIsICItbXMtZmxleGJveCIsICJmbGV4Il19CiAgICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZQogICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsOwogICAgICB9CiAgICB9CiAgfTsKCiAgdmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107CgogIHZhciBlbXB0eVN0eWxlOwogIHZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHsKICAgIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlOwogICAgcHJvcCA9IGNhbWVsaXplKHByb3ApOwogICAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7CiAgICAgIHJldHVybiBwcm9wCiAgICB9CiAgICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTsKICAgICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkgewogICAgICAgIHJldHVybiBuYW1lCiAgICAgIH0KICAgIH0KICB9KTsKCiAgZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkgewogICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhOwogICAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhOwoKICAgIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiYKICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpCiAgICApIHsKICAgICAgcmV0dXJuCiAgICB9CgogICAgdmFyIGN1ciwgbmFtZTsKICAgIHZhciBlbCA9IHZub2RlLmVsbTsKICAgIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7CiAgICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTsKCiAgICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YQogICAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nOwoKICAgIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTsKCiAgICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmCiAgICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzCiAgICAvLyB0byBtdXRhdGUgaXQuCiAgICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXykKICAgICAgPyBleHRlbmQoe30sIHN0eWxlKQogICAgICA6IHN0eWxlOwoKICAgIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTsKCiAgICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHsKICAgICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7CiAgICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpOwogICAgICB9CiAgICB9CiAgICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHsKICAgICAgY3VyID0gbmV3U3R5bGVbbmFtZV07CiAgICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7CiAgICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmcKICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTsKICAgICAgfQogICAgfQogIH0KCiAgdmFyIHN0eWxlID0gewogICAgY3JlYXRlOiB1cGRhdGVTdHlsZSwKICAgIHVwZGF0ZTogdXBkYXRlU3R5bGUKICB9OwoKICAvKiAgKi8KCiAgdmFyIHdoaXRlc3BhY2VSRSA9IC9ccysvOwoKICAvKioKICAgKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb24KICAgKiBTVkcgZWxlbWVudHMgaW4gSUUKICAgKi8KICBmdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykgewogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7CiAgICAgIHJldHVybgogICAgfQoKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7CiAgICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHsKICAgICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHZhciBjdXIgPSAiICIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICIgIjsKICAgICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7CiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7CiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvbgogICAqIFNWRyBlbGVtZW50cyBpbiBJRQogICAqLwogIGZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHsKICAgICAgcmV0dXJuCiAgICB9CgogICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi8KICAgIGlmIChlbC5jbGFzc0xpc3QpIHsKICAgICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkgewogICAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTsKICAgICAgfQogICAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHsKICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHZhciBjdXIgPSAiICIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICIgIjsKICAgICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJzsKICAgICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkgewogICAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTsKICAgICAgfQogICAgICBjdXIgPSBjdXIudHJpbSgpOwogICAgICBpZiAoY3VyKSB7CiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpOwogICAgICB9CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkgewogICAgaWYgKCFkZWYkJDEpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLwogICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7CiAgICAgIHZhciByZXMgPSB7fTsKICAgICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7CiAgICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7CiAgICAgIH0KICAgICAgZXh0ZW5kKHJlcywgZGVmJCQxKTsKICAgICAgcmV0dXJuIHJlcwogICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKQogICAgfQogIH0KCiAgdmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7CiAgICByZXR1cm4gewogICAgICBlbnRlckNsYXNzOiAobmFtZSArICItZW50ZXIiKSwKICAgICAgZW50ZXJUb0NsYXNzOiAobmFtZSArICItZW50ZXItdG8iKSwKICAgICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyAiLWVudGVyLWFjdGl2ZSIpLAogICAgICBsZWF2ZUNsYXNzOiAobmFtZSArICItbGVhdmUiKSwKICAgICAgbGVhdmVUb0NsYXNzOiAobmFtZSArICItbGVhdmUtdG8iKSwKICAgICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyAiLWxlYXZlLWFjdGl2ZSIpCiAgICB9CiAgfSk7CgogIHZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTsKICB2YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJzsKICB2YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7CgogIC8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmcKICB2YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7CiAgdmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJzsKICB2YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nOwogIHZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnOwogIGlmIChoYXNUcmFuc2l0aW9uKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiYKICAgICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkCiAgICApIHsKICAgICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7CiAgICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJzsKICAgIH0KICAgIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJgogICAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZAogICAgKSB7CiAgICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJzsKICAgICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJzsKICAgIH0KICB9CgogIC8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZQogIHZhciByYWYgPSBpbkJyb3dzZXIKICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZQogICAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpCiAgICAgIDogc2V0VGltZW91dAogICAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07CgogIGZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHsKICAgIHJhZihmdW5jdGlvbiAoKSB7CiAgICAgIHJhZihmbik7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykgewogICAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7CiAgICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkgewogICAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7CiAgICAgIGFkZENsYXNzKGVsLCBjbHMpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7CiAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7CiAgICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7CiAgICB9CiAgICByZW1vdmVDbGFzcyhlbCwgY2xzKTsKICB9CgogIGZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoCiAgICBlbCwKICAgIGV4cGVjdGVkVHlwZSwKICAgIGNiCiAgKSB7CiAgICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7CiAgICB2YXIgdHlwZSA9IHJlZi50eXBlOwogICAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDsKICAgIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50OwogICAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH0KICAgIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDsKICAgIHZhciBlbmRlZCA9IDA7CiAgICB2YXIgZW5kID0gZnVuY3Rpb24gKCkgewogICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7CiAgICAgIGNiKCk7CiAgICB9OwogICAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCkgewogICAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkgewogICAgICAgICAgZW5kKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkgewogICAgICAgIGVuZCgpOwogICAgICB9CiAgICB9LCB0aW1lb3V0ICsgMSk7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7CiAgfQoKICB2YXIgdHJhbnNmb3JtUkUgPSAvXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87CgogIGZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7CiAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpOwogICAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllcwogICAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpOwogICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpOwogICAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTsKICAgIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7CiAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpOwogICAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTsKCiAgICB2YXIgdHlwZTsKICAgIHZhciB0aW1lb3V0ID0gMDsKICAgIHZhciBwcm9wQ291bnQgPSAwOwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7CiAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHsKICAgICAgICB0eXBlID0gVFJBTlNJVElPTjsKICAgICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7CiAgICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHsKICAgICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7CiAgICAgICAgdHlwZSA9IEFOSU1BVElPTjsKICAgICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDsKICAgICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpOwogICAgICB0eXBlID0gdGltZW91dCA+IDAKICAgICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dAogICAgICAgICAgPyBUUkFOU0lUSU9OCiAgICAgICAgICA6IEFOSU1BVElPTgogICAgICAgIDogbnVsbDsKICAgICAgcHJvcENvdW50ID0gdHlwZQogICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTgogICAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aAogICAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoCiAgICAgICAgOiAwOwogICAgfQogICAgdmFyIGhhc1RyYW5zZm9ybSA9CiAgICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiYKICAgICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7CiAgICByZXR1cm4gewogICAgICB0eXBlOiB0eXBlLAogICAgICB0aW1lb3V0OiB0aW1lb3V0LAogICAgICBwcm9wQ291bnQ6IHByb3BDb3VudCwKICAgICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7CiAgICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTsKICAgIH0KCiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkgewogICAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKQogICAgfSkpCiAgfQoKICAvLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzCiAgLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LgogIC8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nCiAgLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9ycwogIGZ1bmN0aW9uIHRvTXMgKHMpIHsKICAgIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMAogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkgewogICAgdmFyIGVsID0gdm5vZGUuZWxtOwoKICAgIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93CiAgICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7CiAgICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7CiAgICAgIGVsLl9sZWF2ZUNiKCk7CiAgICB9CgogICAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pOwogICAgaWYgKGlzVW5kZWYoZGF0YSkpIHsKICAgICAgcmV0dXJuCiAgICB9CgogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgIHJldHVybgogICAgfQoKICAgIHZhciBjc3MgPSBkYXRhLmNzczsKICAgIHZhciB0eXBlID0gZGF0YS50eXBlOwogICAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7CiAgICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7CiAgICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzczsKICAgIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7CiAgICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzczsKICAgIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7CiAgICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyOwogICAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjsKICAgIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyOwogICAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDsKICAgIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjsKICAgIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjsKICAgIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7CiAgICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7CiAgICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uOwoKICAgIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXMKICAgIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZAogICAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2sKICAgIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLgogICAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTsKICAgIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTsKICAgIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHsKICAgICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7CiAgICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50OwogICAgfQoKICAgIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDsKCiAgICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7CiAgICAgIHJldHVybgogICAgfQoKICAgIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3MKICAgICAgPyBhcHBlYXJDbGFzcwogICAgICA6IGVudGVyQ2xhc3M7CiAgICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzcwogICAgICA/IGFwcGVhckFjdGl2ZUNsYXNzCiAgICAgIDogZW50ZXJBY3RpdmVDbGFzczsKICAgIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzcwogICAgICA/IGFwcGVhclRvQ2xhc3MKICAgICAgOiBlbnRlclRvQ2xhc3M7CgogICAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyCiAgICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcikKICAgICAgOiBiZWZvcmVFbnRlcjsKICAgIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhcgogICAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpCiAgICAgIDogZW50ZXI7CiAgICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhcgogICAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKQogICAgICA6IGFmdGVyRW50ZXI7CiAgICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXIKICAgICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKQogICAgICA6IGVudGVyQ2FuY2VsbGVkOwoKICAgIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcigKICAgICAgaXNPYmplY3QoZHVyYXRpb24pCiAgICAgICAgPyBkdXJhdGlvbi5lbnRlcgogICAgICAgIDogZHVyYXRpb24KICAgICk7CgogICAgaWYgKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7CiAgICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7CiAgICB9CgogICAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTsKICAgIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spOwoKICAgIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChleHBlY3RzQ1NTKSB7CiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTsKICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTsKICAgICAgfQogICAgICBpZiAoY2IuY2FuY2VsbGVkKSB7CiAgICAgICAgaWYgKGV4cGVjdHNDU1MpIHsKICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7CiAgICAgICAgfQogICAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpOwogICAgICB9IGVsc2UgewogICAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTsKICAgICAgfQogICAgICBlbC5fZW50ZXJDYiA9IG51bGw7CiAgICB9KTsKCiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykgewogICAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9vawogICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTsKICAgICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldOwogICAgICAgIGlmIChwZW5kaW5nTm9kZSAmJgogICAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiYKICAgICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYgogICAgICAgICkgewogICAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7CiAgICAgICAgfQogICAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTsKICAgICAgfSk7CiAgICB9CgogICAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvbgogICAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7CiAgICBpZiAoZXhwZWN0c0NTUykgewogICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpOwogICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTsKICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHsKICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpOwogICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7CiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpOwogICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7CiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkgewogICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmICh2bm9kZS5kYXRhLnNob3cpIHsKICAgICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7CiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTsKICAgIH0KCiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHsKICAgICAgY2IoKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHsKICAgIHZhciBlbCA9IHZub2RlLmVsbTsKCiAgICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vdwogICAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkgewogICAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlOwogICAgICBlbC5fZW50ZXJDYigpOwogICAgfQoKICAgIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTsKICAgIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgIHJldHVybiBybSgpCiAgICB9CgogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7CiAgICAgIHJldHVybgogICAgfQoKICAgIHZhciBjc3MgPSBkYXRhLmNzczsKICAgIHZhciB0eXBlID0gZGF0YS50eXBlOwogICAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7CiAgICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7CiAgICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzczsKICAgIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7CiAgICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlOwogICAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7CiAgICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkOwogICAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7CiAgICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uOwoKICAgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7CiAgICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpOwoKICAgIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcigKICAgICAgaXNPYmplY3QoZHVyYXRpb24pCiAgICAgICAgPyBkdXJhdGlvbi5sZWF2ZQogICAgICAgIDogZHVyYXRpb24KICAgICk7CgogICAgaWYgKGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHsKICAgICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTsKICAgIH0KCiAgICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkgewogICAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7CiAgICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDsKICAgICAgfQogICAgICBpZiAoZXhwZWN0c0NTUykgewogICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTsKICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpOwogICAgICB9CiAgICAgIGlmIChjYi5jYW5jZWxsZWQpIHsKICAgICAgICBpZiAoZXhwZWN0c0NTUykgewogICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTsKICAgICAgICB9CiAgICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpOwogICAgICB9IGVsc2UgewogICAgICAgIHJtKCk7CiAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTsKICAgICAgfQogICAgICBlbC5fbGVhdmVDYiA9IG51bGw7CiAgICB9KTsKCiAgICBpZiAoZGVsYXlMZWF2ZSkgewogICAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7CiAgICB9IGVsc2UgewogICAgICBwZXJmb3JtTGVhdmUoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkgewogICAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkCiAgICAgIGlmIChjYi5jYW5jZWxsZWQpIHsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50CiAgICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHsKICAgICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7CiAgICAgIH0KICAgICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpOwogICAgICBpZiAoZXhwZWN0c0NTUykgewogICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7CiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTsKICAgICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTsKICAgICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7CiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTsKICAgICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7CiAgICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpOwogICAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHsKICAgICAgICBjYigpOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGUKICBmdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7CiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHsKICAgICAgd2FybigKICAgICAgICAiPHRyYW5zaXRpb24+IGV4cGxpY2l0ICIgKyBuYW1lICsgIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSAiICsKICAgICAgICAiZ290ICIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyAiLiIsCiAgICAgICAgdm5vZGUuY29udGV4dAogICAgICApOwogICAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7CiAgICAgIHdhcm4oCiAgICAgICAgIjx0cmFuc2l0aW9uPiBleHBsaWNpdCAiICsgbmFtZSArICIgZHVyYXRpb24gaXMgTmFOIC0gIiArCiAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLAogICAgICAgIHZub2RlLmNvbnRleHQKICAgICAgKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7CiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbCkKICB9CgogIC8qKgogICAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOgogICAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZucwogICAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKQogICAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aCkKICAgKi8KICBmdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikgewogICAgaWYgKGlzVW5kZWYoZm4pKSB7CiAgICAgIHJldHVybiBmYWxzZQogICAgfQogICAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7CiAgICBpZiAoaXNEZWYoaW52b2tlckZucykpIHsKICAgICAgLy8gaW52b2tlcgogICAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCgKICAgICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpCiAgICAgICAgICA/IGludm9rZXJGbnNbMF0KICAgICAgICAgIDogaW52b2tlckZucwogICAgICApCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDEKICAgIH0KICB9CgogIGZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHsKICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHsKICAgICAgZW50ZXIodm5vZGUpOwogICAgfQogIH0KCiAgdmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7CiAgICBjcmVhdGU6IF9lbnRlciwKICAgIGFjdGl2YXRlOiBfZW50ZXIsCiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovCiAgICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHsKICAgICAgICBsZWF2ZSh2bm9kZSwgcm0pOwogICAgICB9IGVsc2UgewogICAgICAgIHJtKCk7CiAgICAgIH0KICAgIH0KICB9IDoge307CgogIHZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbCiAgICBhdHRycywKICAgIGtsYXNzLAogICAgZXZlbnRzLAogICAgZG9tUHJvcHMsCiAgICBzdHlsZSwKICAgIHRyYW5zaXRpb24KICBdOwoKICAvKiAgKi8KCiAgLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsCiAgLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC4KICB2YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpOwoKICB2YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTsKCiAgLyoqCiAgICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nCiAgICogcHJvcGVydGllcyB0byBFbGVtZW50cy4KICAgKi8KCiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgaWYgKGlzSUU5KSB7CiAgICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC8KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKICAgICAgaWYgKGVsICYmIGVsLnZtb2RlbCkgewogICAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpOwogICAgICB9CiAgICB9KTsKICB9CgogIHZhciBkaXJlY3RpdmUgPSB7CiAgICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHsKICAgICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHsKICAgICAgICAvLyAjNjkwMwogICAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHsKICAgICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTsKICAgICAgICB9CiAgICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpOwogICAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHsKICAgICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzOwogICAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkgewogICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7CiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpOwogICAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlbgogICAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZQogICAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZQogICAgICAgICAgLy8gZmlyZXMgImNoYW5nZSIgaW5zdGVhZCBvZiAiaW5wdXQiIG9uIGF1dG9jb21wbGV0ZS4KICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpOwogICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgICAgICBpZiAoaXNJRTkpIHsKICAgICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7CiAgICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7CiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpOwogICAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLAogICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy4KICAgICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmcKICAgICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS4KICAgICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7CiAgICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7CiAgICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkgewogICAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWYKICAgICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlCiAgICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGUKICAgICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pCiAgICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpOwogICAgICAgICAgaWYgKG5lZWRSZXNldCkgewogICAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkgewogICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pOwogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pOwogICAgICB9LCAwKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkgewogICAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTsKICAgIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7CiAgICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgd2FybigKICAgICAgICAiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVwiIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgIlwiPiAiICsKICAgICAgICAiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksCiAgICAgICAgdm0KICAgICAgKTsKICAgICAgcmV0dXJuCiAgICB9CiAgICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjsKICAgIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTsKICAgICAgaWYgKGlzTXVsdGlwbGUpIHsKICAgICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTsKICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkgewogICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkgewogICAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHsKICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmICghaXNNdWx0aXBsZSkgewogICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykgewogICAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSkKICB9CgogIGZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHsKICAgIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb24KICAgICAgPyBvcHRpb24uX3ZhbHVlCiAgICAgIDogb3B0aW9uLnZhbHVlCiAgfQoKICBmdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHsKICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7CiAgfQoKICBmdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7CiAgICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvbgogICAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH0KICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlOwogICAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7CiAgfQoKICBmdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkgewogICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpOwogICAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7CiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpOwogIH0KCiAgLyogICovCgogIC8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3QKICBmdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkgewogICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKQogICAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKQogICAgICA6IHZub2RlCiAgfQoKICB2YXIgc2hvdyA9IHsKICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7CiAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTsKCiAgICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7CiAgICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247CiAgICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPQogICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTsKICAgICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHsKICAgICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlOwogICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5OwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJzsKICAgICAgfQogICAgfSwKCiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHsKICAgICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlOwogICAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7CgogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9CiAgICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7CiAgICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247CiAgICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7CiAgICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTsKICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7CiAgICAgIH0KICAgIH0sCgogICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKAogICAgICBlbCwKICAgICAgYmluZGluZywKICAgICAgdm5vZGUsCiAgICAgIG9sZFZub2RlLAogICAgICBpc0Rlc3Ryb3kKICAgICkgewogICAgICBpZiAoIWlzRGVzdHJveSkgewogICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7CiAgICAgIH0KICAgIH0KICB9OwoKICB2YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0gewogICAgbW9kZWw6IGRpcmVjdGl2ZSwKICAgIHNob3c6IHNob3cKICB9OwoKICAvKiAgKi8KCiAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IHsKICAgIG5hbWU6IFN0cmluZywKICAgIGFwcGVhcjogQm9vbGVhbiwKICAgIGNzczogQm9vbGVhbiwKICAgIG1vZGU6IFN0cmluZywKICAgIHR5cGU6IFN0cmluZywKICAgIGVudGVyQ2xhc3M6IFN0cmluZywKICAgIGxlYXZlQ2xhc3M6IFN0cmluZywKICAgIGVudGVyVG9DbGFzczogU3RyaW5nLAogICAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsCiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsCiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsCiAgICBhcHBlYXJDbGFzczogU3RyaW5nLAogICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZywKICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZywKICAgIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF0KICB9OwoKICAvLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT4KICAvLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZAogIGZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHsKICAgIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7CiAgICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7CiAgICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdm5vZGUKICAgIH0KICB9CgogIGZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkgewogICAgdmFyIGRhdGEgPSB7fTsKICAgIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9uczsKICAgIC8vIHByb3BzCiAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHsKICAgICAgZGF0YVtrZXldID0gY29tcFtrZXldOwogICAgfQogICAgLy8gZXZlbnRzLgogICAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzCiAgICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzOwogICAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7CiAgICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07CiAgICB9CiAgICByZXR1cm4gZGF0YQogIH0KCiAgZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7CiAgICBpZiAoL1xkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHsKICAgICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7CiAgICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhCiAgICAgIH0pCiAgICB9CiAgfQoKICBmdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkgewogICAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHsKICAgICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikgewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHsKICAgIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZwogIH0KCiAgdmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9OwoKICB2YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTsKCiAgdmFyIFRyYW5zaXRpb24gPSB7CiAgICBuYW1lOiAndHJhbnNpdGlvbicsCiAgICBwcm9wczogdHJhbnNpdGlvblByb3BzLAogICAgYWJzdHJhY3Q6IHRydWUsCgogICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHsKICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7CgogICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0OwogICAgICBpZiAoIWNoaWxkcmVuKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpCiAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpOwogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHsKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50cwogICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkgewogICAgICAgIHdhcm4oCiAgICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgKwogICAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJywKICAgICAgICAgIHRoaXMuJHBhcmVudAogICAgICAgICk7CiAgICAgIH0KCiAgICAgIHZhciBtb2RlID0gdGhpcy5tb2RlOwoKICAgICAgLy8gd2FybiBpbnZhbGlkIG1vZGUKICAgICAgaWYgKG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbicKICAgICAgKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSwKICAgICAgICAgIHRoaXMuJHBhcmVudAogICAgICAgICk7CiAgICAgIH0KCiAgICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdOwoKICAgICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQncwogICAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC4KICAgICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7CiAgICAgICAgcmV0dXJuIHJhd0NoaWxkCiAgICAgIH0KCiAgICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZAogICAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlCiAgICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICBpZiAoIWNoaWxkKSB7CiAgICAgICAgcmV0dXJuIHJhd0NoaWxkCiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7CiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKQogICAgICB9CgogICAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvbgogICAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzCiAgICAgIC8vIGR1cmluZyBlbnRlcmluZy4KICAgICAgdmFyIGlkID0gIl9fdHJhbnNpdGlvbi0iICsgKHRoaXMuX3VpZCkgKyAiLSI7CiAgICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsCiAgICAgICAgPyBjaGlsZC5pc0NvbW1lbnQKICAgICAgICAgID8gaWQgKyAnY29tbWVudCcKICAgICAgICAgIDogaWQgKyBjaGlsZC50YWcKICAgICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSkKICAgICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpCiAgICAgICAgICA6IGNoaWxkLmtleTsKCiAgICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7CiAgICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlOwogICAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpOwoKICAgICAgLy8gbWFyayB2LXNob3cKICAgICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlCiAgICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHsKICAgICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlOwogICAgICB9CgogICAgICBpZiAoCiAgICAgICAgb2xkQ2hpbGQgJiYKICAgICAgICBvbGRDaGlsZC5kYXRhICYmCiAgICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiYKICAgICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJgogICAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlCiAgICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KQogICAgICApIHsKICAgICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmUKICAgICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhCiAgICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpOwogICAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGUKICAgICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHsKICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlcwogICAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7CiAgICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKQogICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHsKICAgICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7CiAgICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZAogICAgICAgICAgfQogICAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTsKICAgICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9OwogICAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpOwogICAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTsKICAgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiByYXdDaGlsZAogICAgfQogIH07CgogIC8qICAqLwoKICB2YXIgcHJvcHMgPSBleHRlbmQoewogICAgdGFnOiBTdHJpbmcsCiAgICBtb3ZlQ2xhc3M6IFN0cmluZwogIH0sIHRyYW5zaXRpb25Qcm9wcyk7CgogIGRlbGV0ZSBwcm9wcy5tb2RlOwoKICB2YXIgVHJhbnNpdGlvbkdyb3VwID0gewogICAgcHJvcHM6IHByb3BzLAoKICAgIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7CiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOwoKICAgICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTsKICAgICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHsKICAgICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTsKICAgICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzCiAgICAgICAgdGhpcyQxLl9fcGF0Y2hfXygKICAgICAgICAgIHRoaXMkMS5fdm5vZGUsCiAgICAgICAgICB0aGlzJDEua2VwdCwKICAgICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmcKICAgICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKQogICAgICAgICk7CiAgICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0OwogICAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpOwogICAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7CiAgICAgIH07CiAgICB9LAoKICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7CiAgICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7CiAgICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwogICAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdOwogICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107CiAgICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldOwogICAgICAgIGlmIChjLnRhZykgewogICAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHsKICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTsKICAgICAgICAgICAgbWFwW2Mua2V5XSA9IGMKICAgICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7CiAgICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnOwogICAgICAgICAgICB3YXJuKCgiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDwiICsgbmFtZSArICI+IikpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHByZXZDaGlsZHJlbikgewogICAgICAgIHZhciBrZXB0ID0gW107CiAgICAgICAgdmFyIHJlbW92ZWQgPSBbXTsKICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykgewogICAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdOwogICAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhOwogICAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHsKICAgICAgICAgICAga2VwdC5wdXNoKGMkMSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpOwogICAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pCiAgICB9LAoKICAgIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkgewogICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjsKICAgICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTsKICAgICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHsKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzCiAgICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLgogICAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTsKICAgICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7CiAgICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7CgogICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb24KICAgICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmcKICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0OwoKICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgICAgIGlmIChjLmRhdGEubW92ZWQpIHsKICAgICAgICAgIHZhciBlbCA9IGMuZWxtOwogICAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTsKICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTsKICAgICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnOwogICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkgewogICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHsKICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7CiAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTsKICAgICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDsKICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIG1ldGhvZHM6IHsKICAgICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgIGlmICghaGFzVHJhbnNpdGlvbikgewogICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgfQogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZQogICAgICAgIH0KICAgICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXMKICAgICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmcKICAgICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlCiAgICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzCiAgICAgICAgLy8gaXMgYXBwbGllZC4KICAgICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTsKICAgICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7CiAgICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTsKICAgICAgICB9CiAgICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7CiAgICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7CiAgICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7CiAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpOwogICAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKQogICAgICB9CiAgICB9CiAgfTsKCiAgZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHsKICAgICAgYy5lbG0uX21vdmVDYigpOwogICAgfQogICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICBpZiAoYy5lbG0uX2VudGVyQ2IpIHsKICAgICAgYy5lbG0uX2VudGVyQ2IoKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7CiAgICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgfQoKICBmdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7CiAgICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvczsKICAgIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zOwogICAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDsKICAgIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wOwogICAgaWYgKGR4IHx8IGR5KSB7CiAgICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7CiAgICAgIHZhciBzID0gYy5lbG0uc3R5bGU7CiAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSAidHJhbnNsYXRlKCIgKyBkeCArICJweCwiICsgZHkgKyAicHgpIjsKICAgICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnOwogICAgfQogIH0KCiAgdmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHsKICAgIFRyYW5zaXRpb246IFRyYW5zaXRpb24sCiAgICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cAogIH07CgogIC8qICAqLwoKICAvLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzCiAgVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wOwogIFZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7CiAgVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyOwogIFZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlOwogIFZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7CgogIC8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50cwogIGV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpOwogIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpOwoKICAvLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uCiAgVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7CgogIC8vIHB1YmxpYyBtb3VudCBtZXRob2QKICBWdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uICgKICAgIGVsLAogICAgaHlkcmF0aW5nCiAgKSB7CiAgICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDsKICAgIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKQogIH07CgogIC8vIGRldnRvb2xzIGdsb2JhbCBob29rCiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICBpZiAoaW5Ccm93c2VyKSB7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKGNvbmZpZy5kZXZ0b29scykgewogICAgICAgIGlmIChkZXZ0b29scykgewogICAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKAogICAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XG4nICsKICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmCiAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnCiAgICAgICkgewogICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKAogICAgICAgICAgIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cbiIgKwogICAgICAgICAgIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cbiIgKwogICAgICAgICAgIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sIgogICAgICAgICk7CiAgICAgIH0KICAgIH0sIDApOwogIH0KCiAgLyogICovCgogIHZhciBkZWZhdWx0VGFnUkUgPSAvXHtceygoPzoufFxyP1xuKSs/KVx9XH0vZzsKICB2YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xdXC9cXF0vZzsKCiAgdmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHsKICAgIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXCQmJyk7CiAgICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcJCYnKTsKICAgIHJldHVybiBuZXcgUmVnRXhwKG9wZW4gKyAnKCg/Oi58XFxuKSs/KScgKyBjbG9zZSwgJ2cnKQogIH0pOwoKCgogIGZ1bmN0aW9uIHBhcnNlVGV4dCAoCiAgICB0ZXh0LAogICAgZGVsaW1pdGVycwogICkgewogICAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7CiAgICBpZiAoIXRhZ1JFLnRlc3QodGV4dCkpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICB2YXIgdG9rZW5zID0gW107CiAgICB2YXIgcmF3VG9rZW5zID0gW107CiAgICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDsKICAgIHZhciBtYXRjaCwgaW5kZXgsIHRva2VuVmFsdWU7CiAgICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHsKICAgICAgaW5kZXggPSBtYXRjaC5pbmRleDsKICAgICAgLy8gcHVzaCB0ZXh0IHRva2VuCiAgICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkgewogICAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTsKICAgICAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7CiAgICAgIH0KICAgICAgLy8gdGFnIHRva2VuCiAgICAgIHZhciBleHAgPSBwYXJzZUZpbHRlcnMobWF0Y2hbMV0udHJpbSgpKTsKICAgICAgdG9rZW5zLnB1c2goKCJfcygiICsgZXhwICsgIikiKSk7CiAgICAgIHJhd1Rva2Vucy5wdXNoKHsgJ0BiaW5kaW5nJzogZXhwIH0pOwogICAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDsKICAgIH0KICAgIGlmIChsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkgewogICAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgpKTsKICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSwKICAgICAgdG9rZW5zOiByYXdUb2tlbnMKICAgIH0KICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykgewogICAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47CiAgICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTsKICAgIGlmIChzdGF0aWNDbGFzcykgewogICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY0NsYXNzLCBvcHRpb25zLmRlbGltaXRlcnMpOwogICAgICBpZiAocmVzKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICJjbGFzcz1cIiIgKyBzdGF0aWNDbGFzcyArICJcIjogIiArCiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICsKICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgKwogICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz0ie3sgdmFsIH19Ij4sIHVzZSA8ZGl2IDpjbGFzcz0idmFsIj4uJywKICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydjbGFzcyddCiAgICAgICAgKTsKICAgICAgfQogICAgfQogICAgaWYgKHN0YXRpY0NsYXNzKSB7CiAgICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpOwogICAgfQogICAgdmFyIGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pOwogICAgaWYgKGNsYXNzQmluZGluZykgewogICAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZW5EYXRhIChlbCkgewogICAgdmFyIGRhdGEgPSAnJzsKICAgIGlmIChlbC5zdGF0aWNDbGFzcykgewogICAgICBkYXRhICs9ICJzdGF0aWNDbGFzczoiICsgKGVsLnN0YXRpY0NsYXNzKSArICIsIjsKICAgIH0KICAgIGlmIChlbC5jbGFzc0JpbmRpbmcpIHsKICAgICAgZGF0YSArPSAiY2xhc3M6IiArIChlbC5jbGFzc0JpbmRpbmcpICsgIiwiOwogICAgfQogICAgcmV0dXJuIGRhdGEKICB9CgogIHZhciBrbGFzcyQxID0gewogICAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLAogICAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSwKICAgIGdlbkRhdGE6IGdlbkRhdGEKICB9OwoKICAvKiAgKi8KCiAgZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSQxIChlbCwgb3B0aW9ucykgewogICAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47CiAgICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTsKICAgIGlmIChzdGF0aWNTdHlsZSkgewogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgewogICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljU3R5bGUsIG9wdGlvbnMuZGVsaW1pdGVycyk7CiAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgd2FybigKICAgICAgICAgICAgInN0eWxlPVwiIiArIHN0YXRpY1N0eWxlICsgIlwiOiAiICsKICAgICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArCiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgKwogICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPSJ7eyB2YWwgfX0iPiwgdXNlIDxkaXYgOnN0eWxlPSJ2YWwiPi4nLAogICAgICAgICAgICBlbC5yYXdBdHRyc01hcFsnc3R5bGUnXQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZWwuc3RhdGljU3R5bGUgPSBKU09OLnN0cmluZ2lmeShwYXJzZVN0eWxlVGV4dChzdGF0aWNTdHlsZSkpOwogICAgfQoKICAgIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTsKICAgIGlmIChzdHlsZUJpbmRpbmcpIHsKICAgICAgZWwuc3R5bGVCaW5kaW5nID0gc3R5bGVCaW5kaW5nOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkgewogICAgdmFyIGRhdGEgPSAnJzsKICAgIGlmIChlbC5zdGF0aWNTdHlsZSkgewogICAgICBkYXRhICs9ICJzdGF0aWNTdHlsZToiICsgKGVsLnN0YXRpY1N0eWxlKSArICIsIjsKICAgIH0KICAgIGlmIChlbC5zdHlsZUJpbmRpbmcpIHsKICAgICAgZGF0YSArPSAic3R5bGU6KCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArICIpLCI7CiAgICB9CiAgICByZXR1cm4gZGF0YQogIH0KCiAgdmFyIHN0eWxlJDEgPSB7CiAgICBzdGF0aWNLZXlzOiBbJ3N0YXRpY1N0eWxlJ10sCiAgICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsCiAgICBnZW5EYXRhOiBnZW5EYXRhJDEKICB9OwoKICAvKiAgKi8KCiAgdmFyIGRlY29kZXI7CgogIHZhciBoZSA9IHsKICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7CiAgICAgIGRlY29kZXIgPSBkZWNvZGVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7CiAgICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50CiAgICB9CiAgfTsKCiAgLyogICovCgogIHZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcCgKICAgICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnICsKICAgICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicicKICApOwoKICAvLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW4KICAvLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpCiAgdmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBtYWtlTWFwKAogICAgJ2NvbGdyb3VwLGRkLGR0LGxpLG9wdGlvbnMscCx0ZCx0Zm9vdCx0aCx0aGVhZCx0cixzb3VyY2UnCiAgKTsKCiAgLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtMwogIC8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudAogIHZhciBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcCgKICAgICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArCiAgICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgKwogICAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgKwogICAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICsKICAgICd0aXRsZSx0cix0cmFjaycKICApOwoKICAvKioKICAgKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS4KICAgKi8KCiAgLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzCiAgdmFyIGF0dHJpYnV0ZSA9IC9eXHMqKFteXHMiJzw+XC89XSspKD86XHMqKD0pXHMqKD86IihbXiJdKikiK3wnKFteJ10qKScrfChbXlxzIic9PD5gXSspKSk/LzsKICB2YXIgZHluYW1pY0FyZ0F0dHJpYnV0ZSA9IC9eXHMqKCg/OnYtW1x3LV0rOnxAfDp8IylcW1tePV0rXF1bXlxzIic8PlwvPV0qKSg/OlxzKig9KVxzKig/OiIoW14iXSopIit8JyhbXiddKiknK3woW15ccyInPTw+YF0rKSkpPy87CiAgdmFyIG5jbmFtZSA9ICJbYS16QS1aX11bXFwtXFwuMC05X2EtekEtWiIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgIl0qIjsKICB2YXIgcW5hbWVDYXB0dXJlID0gIigoPzoiICsgbmNuYW1lICsgIlxcOik/IiArIG5jbmFtZSArICIpIjsKICB2YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoIl48IiArIHFuYW1lQ2FwdHVyZSkpOwogIHZhciBzdGFydFRhZ0Nsb3NlID0gL15ccyooXC8/KT4vOwogIHZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKCgiXjxcXC8iICsgcW5hbWVDYXB0dXJlICsgIltePl0qPiIpKTsKICB2YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pOwogIC8vICM3Mjk4OiBlc2NhcGUgLSB0byBhdm9pZCBiZWluZyBwYXNzZWQgYXMgSFRNTCBjb21tZW50IHdoZW4gaW5saW5lZCBpbiBwYWdlCiAgdmFyIGNvbW1lbnQgPSAvXjwhXC0tLzsKICB2YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxbLzsKCiAgLy8gU3BlY2lhbCBFbGVtZW50cyAoY2FuIGNvbnRhaW4gYW55dGhpbmcpCiAgdmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpOwogIHZhciByZUNhY2hlID0ge307CgogIHZhciBkZWNvZGluZ01hcCA9IHsKICAgICcmbHQ7JzogJzwnLAogICAgJyZndDsnOiAnPicsCiAgICAnJnF1b3Q7JzogJyInLAogICAgJyZhbXA7JzogJyYnLAogICAgJyYjMTA7JzogJ1xuJywKICAgICcmIzk7JzogJ1x0JywKICAgICcmIzM5Oyc6ICInIgogIH07CiAgdmFyIGVuY29kZWRBdHRyID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMzkpOy9nOwogIHZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7CgogIC8vICM1OTkyCiAgdmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpOwogIHZhciBzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUgPSBmdW5jdGlvbiAodGFnLCBodG1sKSB7IHJldHVybiB0YWcgJiYgaXNJZ25vcmVOZXdsaW5lVGFnKHRhZykgJiYgaHRtbFswXSA9PT0gJ1xuJzsgfTsKCiAgZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7CiAgICB2YXIgcmUgPSBzaG91bGREZWNvZGVOZXdsaW5lcyA/IGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzIDogZW5jb2RlZEF0dHI7CiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pCiAgfQoKICBmdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHsKICAgIHZhciBzdGFjayA9IFtdOwogICAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7CiAgICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubzsKICAgIHZhciBjYW5CZUxlZnRPcGVuVGFnJCQxID0gb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnIHx8IG5vOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciBsYXN0LCBsYXN0VGFnOwogICAgd2hpbGUgKGh0bWwpIHsKICAgICAgbGFzdCA9IGh0bWw7CiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlCiAgICAgIGlmICghbGFzdFRhZyB8fCAhaXNQbGFpblRleHRFbGVtZW50KGxhc3RUYWcpKSB7CiAgICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTsKICAgICAgICBpZiAodGV4dEVuZCA9PT0gMCkgewogICAgICAgICAgLy8gQ29tbWVudDoKICAgICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHsKICAgICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpOwoKICAgICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkgewogICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3VsZEtlZXBDb21tZW50KSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYWR2YW5jZShjb21tZW50RW5kICsgMyk7CiAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29uZGl0aW9uYWxfY29tbWVudCNEb3dubGV2ZWwtcmV2ZWFsZWRfY29uZGl0aW9uYWxfY29tbWVudAogICAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7CiAgICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTsKCiAgICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7CiAgICAgICAgICAgICAgYWR2YW5jZShjb25kaXRpb25hbEVuZCArIDIpOwogICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBEb2N0eXBlOgogICAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7CiAgICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7CiAgICAgICAgICAgIGFkdmFuY2UoZG9jdHlwZU1hdGNoWzBdLmxlbmd0aCk7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CgogICAgICAgICAgLy8gRW5kIHRhZzoKICAgICAgICAgIHZhciBlbmRUYWdNYXRjaCA9IGh0bWwubWF0Y2goZW5kVGFnKTsKICAgICAgICAgIGlmIChlbmRUYWdNYXRjaCkgewogICAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDsKICAgICAgICAgICAgYWR2YW5jZShlbmRUYWdNYXRjaFswXS5sZW5ndGgpOwogICAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBTdGFydCB0YWc6CiAgICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTsKICAgICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7CiAgICAgICAgICAgIGhhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpOwogICAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHsKICAgICAgICAgICAgICBhZHZhbmNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgdGV4dCA9ICh2b2lkIDApLCByZXN0ID0gKHZvaWQgMCksIG5leHQgPSAodm9pZCAwKTsKICAgICAgICBpZiAodGV4dEVuZCA+PSAwKSB7CiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTsKICAgICAgICAgIHdoaWxlICgKICAgICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmCiAgICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJgogICAgICAgICAgICAhY29tbWVudC50ZXN0KHJlc3QpICYmCiAgICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KQogICAgICAgICAgKSB7CiAgICAgICAgICAgIC8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0CiAgICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTsKICAgICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH0KICAgICAgICAgICAgdGV4dEVuZCArPSBuZXh0OwogICAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTsKICAgICAgICAgIH0KICAgICAgICAgIHRleHQgPSBodG1sLnN1YnN0cmluZygwLCB0ZXh0RW5kKTsKICAgICAgICB9CgogICAgICAgIGlmICh0ZXh0RW5kIDwgMCkgewogICAgICAgICAgdGV4dCA9IGh0bWw7CiAgICAgICAgfQoKICAgICAgICBpZiAodGV4dCkgewogICAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7CiAgICAgICAgfQoKICAgICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7CiAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQsIGluZGV4IC0gdGV4dC5sZW5ndGgsIGluZGV4KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGVuZFRhZ0xlbmd0aCA9IDA7CiAgICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcc1xcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7CiAgICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykgewogICAgICAgICAgZW5kVGFnTGVuZ3RoID0gZW5kVGFnLmxlbmd0aDsKICAgICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHsKICAgICAgICAgICAgdGV4dCA9IHRleHQKICAgICAgICAgICAgICAucmVwbGFjZSgvPCFcLS0oW1xzXFNdKj8pLS0+L2csICckMScpIC8vICM3Mjk4CiAgICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFtDREFUQVxbKFtcc1xTXSo/KV1dPi9nLCAnJDEnKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHsKICAgICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob3B0aW9ucy5jaGFycykgewogICAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuICcnCiAgICAgICAgfSk7CiAgICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoOwogICAgICAgIGh0bWwgPSByZXN0JDE7CiAgICAgICAgcGFyc2VFbmRUYWcoc3RhY2tlZFRhZywgaW5kZXggLSBlbmRUYWdMZW5ndGgsIGluZGV4KTsKICAgICAgfQoKICAgICAgaWYgKGh0bWwgPT09IGxhc3QpIHsKICAgICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7CiAgICAgICAgaWYgKCFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7CiAgICAgICAgICBvcHRpb25zLndhcm4oKCJNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFwiIiArIGh0bWwgKyAiXCIiKSwgeyBzdGFydDogaW5kZXggKyBodG1sLmxlbmd0aCB9KTsKICAgICAgICB9CiAgICAgICAgYnJlYWsKICAgICAgfQogICAgfQoKICAgIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFncwogICAgcGFyc2VFbmRUYWcoKTsKCiAgICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7CiAgICAgIGluZGV4ICs9IG47CiAgICAgIGh0bWwgPSBodG1sLnN1YnN0cmluZyhuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHsKICAgICAgdmFyIHN0YXJ0ID0gaHRtbC5tYXRjaChzdGFydFRhZ09wZW4pOwogICAgICBpZiAoc3RhcnQpIHsKICAgICAgICB2YXIgbWF0Y2ggPSB7CiAgICAgICAgICB0YWdOYW1lOiBzdGFydFsxXSwKICAgICAgICAgIGF0dHJzOiBbXSwKICAgICAgICAgIHN0YXJ0OiBpbmRleAogICAgICAgIH07CiAgICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpOwogICAgICAgIHZhciBlbmQsIGF0dHI7CiAgICAgICAgd2hpbGUgKCEoZW5kID0gaHRtbC5tYXRjaChzdGFydFRhZ0Nsb3NlKSkgJiYgKGF0dHIgPSBodG1sLm1hdGNoKGR5bmFtaWNBcmdBdHRyaWJ1dGUpIHx8IGh0bWwubWF0Y2goYXR0cmlidXRlKSkpIHsKICAgICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDsKICAgICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpOwogICAgICAgICAgYXR0ci5lbmQgPSBpbmRleDsKICAgICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7CiAgICAgICAgfQogICAgICAgIGlmIChlbmQpIHsKICAgICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07CiAgICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpOwogICAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7CiAgICAgICAgICByZXR1cm4gbWF0Y2gKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHsKICAgICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lOwogICAgICB2YXIgdW5hcnlTbGFzaCA9IG1hdGNoLnVuYXJ5U2xhc2g7CgogICAgICBpZiAoZXhwZWN0SFRNTCkgewogICAgICAgIGlmIChsYXN0VGFnID09PSAncCcgJiYgaXNOb25QaHJhc2luZ1RhZyh0YWdOYW1lKSkgewogICAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7CiAgICAgICAgfQogICAgICAgIGlmIChjYW5CZUxlZnRPcGVuVGFnJCQxKHRhZ05hbWUpICYmIGxhc3RUYWcgPT09IHRhZ05hbWUpIHsKICAgICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7CgogICAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDsKICAgICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07CiAgICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7CiAgICAgICAgdmFyIHNob3VsZERlY29kZU5ld2xpbmVzID0gdGFnTmFtZSA9PT0gJ2EnICYmIGFyZ3NbMV0gPT09ICdocmVmJwogICAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZgogICAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzOwogICAgICAgIGF0dHJzW2ldID0gewogICAgICAgICAgbmFtZTogYXJnc1sxXSwKICAgICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcykKICAgICAgICB9OwogICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7CiAgICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGFyZ3Muc3RhcnQgKyBhcmdzWzBdLm1hdGNoKC9eXHMqLykubGVuZ3RoOwogICAgICAgICAgYXR0cnNbaV0uZW5kID0gYXJncy5lbmQ7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoIXVuYXJ5KSB7CiAgICAgICAgc3RhY2sucHVzaCh7IHRhZzogdGFnTmFtZSwgbG93ZXJDYXNlZFRhZzogdGFnTmFtZS50b0xvd2VyQ2FzZSgpLCBhdHRyczogYXR0cnMsIHN0YXJ0OiBtYXRjaC5zdGFydCwgZW5kOiBtYXRjaC5lbmQgfSk7CiAgICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7CiAgICAgIH0KCiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7CiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBhdHRycywgdW5hcnksIG1hdGNoLnN0YXJ0LCBtYXRjaC5lbmQpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHsKICAgICAgdmFyIHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7CiAgICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH0KICAgICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9CgogICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZQogICAgICBpZiAodGFnTmFtZSkgewogICAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7CiAgICAgICAgICBpZiAoc3RhY2tbcG9zXS5sb3dlckNhc2VkVGFnID09PSBsb3dlckNhc2VkVGFnTmFtZSkgewogICAgICAgICAgICBicmVhawogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcAogICAgICAgIHBvcyA9IDA7CiAgICAgIH0KCiAgICAgIGlmIChwb3MgPj0gMCkgewogICAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrCiAgICAgICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gcG9zOyBpLS0pIHsKICAgICAgICAgIGlmIChpID4gcG9zIHx8ICF0YWdOYW1lICYmCiAgICAgICAgICAgIG9wdGlvbnMud2FybgogICAgICAgICAgKSB7CiAgICAgICAgICAgIG9wdGlvbnMud2FybigKICAgICAgICAgICAgICAoInRhZyA8IiArIChzdGFja1tpXS50YWcpICsgIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuIiksCiAgICAgICAgICAgICAgeyBzdGFydDogc3RhY2tbaV0uc3RhcnQsIGVuZDogc3RhY2tbaV0uZW5kIH0KICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChvcHRpb25zLmVuZCkgewogICAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrCiAgICAgICAgc3RhY2subGVuZ3RoID0gcG9zOwogICAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnOwogICAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7CiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHsKICAgICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ3AnKSB7CiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHsKICAgICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTsKICAgICAgICB9CiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7CiAgICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8qICAqLwoKICB2YXIgb25SRSA9IC9eQHxedi1vbjovOwogIHZhciBkaXJSRSA9IC9edi18XkB8Xjp8XiMvOwogIHZhciBmb3JBbGlhc1JFID0gLyhbXHNcU10qPylccysoPzppbnxvZilccysoW1xzXFNdKikvOwogIHZhciBmb3JJdGVyYXRvclJFID0gLywoW14sXH1cXV0qKSg/OiwoW14sXH1cXV0qKSk/JC87CiAgdmFyIHN0cmlwUGFyZW5zUkUgPSAvXlwofFwpJC9nOwogIHZhciBkeW5hbWljQXJnUkUgPSAvXlxbLipcXSQvOwoKICB2YXIgYXJnUkUgPSAvOiguKikkLzsKICB2YXIgYmluZFJFID0gL146fF5cLnxedi1iaW5kOi87CiAgdmFyIG1vZGlmaWVyUkUgPSAvXC5bXi5cXV0rKD89W15cXV0qJCkvZzsKCiAgdmFyIHNsb3RSRSA9IC9edi1zbG90KDp8JCl8XiMvOwoKICB2YXIgbGluZUJyZWFrUkUgPSAvW1xyXG5dLzsKICB2YXIgd2hpdGVzcGFjZVJFJDEgPSAvXHMrL2c7CgogIHZhciBpbnZhbGlkQXR0cmlidXRlUkUgPSAvW1xzIic8PlwvPV0vOwoKICB2YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpOwoKICB2YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9ICJfZW1wdHlfIjsKCiAgLy8gY29uZmlndXJhYmxlIHN0YXRlCiAgdmFyIHdhcm4kMjsKICB2YXIgZGVsaW1pdGVyczsKICB2YXIgdHJhbnNmb3JtczsKICB2YXIgcHJlVHJhbnNmb3JtczsKICB2YXIgcG9zdFRyYW5zZm9ybXM7CiAgdmFyIHBsYXRmb3JtSXNQcmVUYWc7CiAgdmFyIHBsYXRmb3JtTXVzdFVzZVByb3A7CiAgdmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlOwogIHZhciBtYXliZUNvbXBvbmVudDsKCiAgZnVuY3Rpb24gY3JlYXRlQVNURWxlbWVudCAoCiAgICB0YWcsCiAgICBhdHRycywKICAgIHBhcmVudAogICkgewogICAgcmV0dXJuIHsKICAgICAgdHlwZTogMSwKICAgICAgdGFnOiB0YWcsCiAgICAgIGF0dHJzTGlzdDogYXR0cnMsCiAgICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLAogICAgICByYXdBdHRyc01hcDoge30sCiAgICAgIHBhcmVudDogcGFyZW50LAogICAgICBjaGlsZHJlbjogW10KICAgIH0KICB9CgogIC8qKgogICAqIENvbnZlcnQgSFRNTCBzdHJpbmcgdG8gQVNULgogICAqLwogIGZ1bmN0aW9uIHBhcnNlICgKICAgIHRlbXBsYXRlLAogICAgb3B0aW9ucwogICkgewogICAgd2FybiQyID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuOwoKICAgIHBsYXRmb3JtSXNQcmVUYWcgPSBvcHRpb25zLmlzUHJlVGFnIHx8IG5vOwogICAgcGxhdGZvcm1NdXN0VXNlUHJvcCA9IG9wdGlvbnMubXVzdFVzZVByb3AgfHwgbm87CiAgICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vOwogICAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87CiAgICBtYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTsKCiAgICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7CiAgICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7CiAgICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTsKCiAgICBkZWxpbWl0ZXJzID0gb3B0aW9ucy5kZWxpbWl0ZXJzOwoKICAgIHZhciBzdGFjayA9IFtdOwogICAgdmFyIHByZXNlcnZlV2hpdGVzcGFjZSA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlICE9PSBmYWxzZTsKICAgIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlOwogICAgdmFyIHJvb3Q7CiAgICB2YXIgY3VycmVudFBhcmVudDsKICAgIHZhciBpblZQcmUgPSBmYWxzZTsKICAgIHZhciBpblByZSA9IGZhbHNlOwogICAgdmFyIHdhcm5lZCA9IGZhbHNlOwoKICAgIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2csIHJhbmdlKSB7CiAgICAgIGlmICghd2FybmVkKSB7CiAgICAgICAgd2FybmVkID0gdHJ1ZTsKICAgICAgICB3YXJuJDIobXNnLCByYW5nZSk7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjbG9zZUVsZW1lbnQgKGVsZW1lbnQpIHsKICAgICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7CiAgICAgIGlmICghaW5WUHJlICYmICFlbGVtZW50LnByb2Nlc3NlZCkgewogICAgICAgIGVsZW1lbnQgPSBwcm9jZXNzRWxlbWVudChlbGVtZW50LCBvcHRpb25zKTsKICAgICAgfQogICAgICAvLyB0cmVlIG1hbmFnZW1lbnQKICAgICAgaWYgKCFzdGFjay5sZW5ndGggJiYgZWxlbWVudCAhPT0gcm9vdCkgewogICAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZQogICAgICAgIGlmIChyb290LmlmICYmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpKSB7CiAgICAgICAgICB7CiAgICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpOwogICAgICAgICAgfQogICAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwgewogICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLAogICAgICAgICAgICBibG9jazogZWxlbWVudAogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHdhcm5PbmNlKAogICAgICAgICAgICAiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gIiArCiAgICAgICAgICAgICJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsICIgKwogICAgICAgICAgICAidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuIiwKICAgICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9CiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHsKICAgICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7CiAgICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoZWxlbWVudC5zbG90U2NvcGUpIHsKICAgICAgICAgICAgLy8gc2NvcGVkIHNsb3QKICAgICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuCiAgICAgICAgICAgIC8vIGZpbmQgaXQgYXMgdGhlIHByZXYgbm9kZS4KICAgICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJyJkZWZhdWx0IicKICAgICAgICAgICAgOyhjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzIHx8IChjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzID0ge30pKVtuYW1lXSA9IGVsZW1lbnQ7CiAgICAgICAgICB9CiAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7CiAgICAgICAgICBlbGVtZW50LnBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwCiAgICAgIC8vIGZpbHRlciBvdXQgc2NvcGVkIHNsb3RzCiAgICAgIGVsZW1lbnQuY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gIShjKS5zbG90U2NvcGU7IH0pOwogICAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluCiAgICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpOwoKICAgICAgLy8gY2hlY2sgcHJlIHN0YXRlCiAgICAgIGlmIChlbGVtZW50LnByZSkgewogICAgICAgIGluVlByZSA9IGZhbHNlOwogICAgICB9CiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkgewogICAgICAgIGluUHJlID0gZmFsc2U7CiAgICAgIH0KICAgICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBwb3N0VHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkgewogICAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlCiAgICAgIGlmICghaW5QcmUpIHsKICAgICAgICB2YXIgbGFzdE5vZGU7CiAgICAgICAgd2hpbGUgKAogICAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmCiAgICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmCiAgICAgICAgICBsYXN0Tm9kZS50ZXh0ID09PSAnICcKICAgICAgICApIHsKICAgICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkgewogICAgICBpZiAoZWwudGFnID09PSAnc2xvdCcgfHwgZWwudGFnID09PSAndGVtcGxhdGUnKSB7CiAgICAgICAgd2Fybk9uY2UoCiAgICAgICAgICAiQ2Fubm90IHVzZSA8IiArIChlbC50YWcpICsgIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSAiICsKICAgICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLicsCiAgICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9CiAgICAgICAgKTsKICAgICAgfQogICAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHsKICAgICAgICB3YXJuT25jZSgKICAgICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICsKICAgICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzLicsCiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXQogICAgICAgICk7CiAgICAgIH0KICAgIH0KCiAgICBwYXJzZUhUTUwodGVtcGxhdGUsIHsKICAgICAgd2Fybjogd2FybiQyLAogICAgICBleHBlY3RIVE1MOiBvcHRpb25zLmV4cGVjdEhUTUwsCiAgICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZywKICAgICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLAogICAgICBzaG91bGREZWNvZGVOZXdsaW5lczogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcywKICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiwKICAgICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsCiAgICAgIG91dHB1dFNvdXJjZVJhbmdlOiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlLAogICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxLCBlbmQpIHsKICAgICAgICAvLyBjaGVjayBuYW1lc3BhY2UuCiAgICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lCiAgICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTsKCiAgICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWcKICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHsKICAgICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7CiAgICAgICAgaWYgKG5zKSB7CiAgICAgICAgICBlbGVtZW50Lm5zID0gbnM7CiAgICAgICAgfQoKICAgICAgICB7CiAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkgewogICAgICAgICAgICBlbGVtZW50LnN0YXJ0ID0gc3RhcnQkMTsKICAgICAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQ7CiAgICAgICAgICAgIGVsZW1lbnQucmF3QXR0cnNNYXAgPSBlbGVtZW50LmF0dHJzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1bXVsYXRlZCwgYXR0cikgewogICAgICAgICAgICAgIGN1bXVsYXRlZFthdHRyLm5hbWVdID0gYXR0cjsKICAgICAgICAgICAgICByZXR1cm4gY3VtdWxhdGVkCiAgICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgIH0KICAgICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHsKICAgICAgICAgICAgaWYgKGludmFsaWRBdHRyaWJ1dGVSRS50ZXN0KGF0dHIubmFtZSkpIHsKICAgICAgICAgICAgICB3YXJuJDIoCiAgICAgICAgICAgICAgICAiSW52YWxpZCBkeW5hbWljIGFyZ3VtZW50IGV4cHJlc3Npb246IGF0dHJpYnV0ZSBuYW1lcyBjYW5ub3QgY29udGFpbiAiICsKICAgICAgICAgICAgICAgICJzcGFjZXMsIHF1b3RlcywgPCwgPiwgLyBvciA9LiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXJ0OiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmluZGV4T2YoIlsiKSwKICAgICAgICAgICAgICAgICAgZW5kOiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmxlbmd0aAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7CiAgICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7CiAgICAgICAgICB3YXJuJDIoCiAgICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICsKICAgICAgICAgICAgJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJyArCiAgICAgICAgICAgICI8IiArIHRhZyArICI+IiArICcsIGFzIHRoZXkgd2lsbCBub3QgYmUgcGFyc2VkLicsCiAgICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfQogICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIC8vIGFwcGx5IHByZS10cmFuc2Zvcm1zCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50OwogICAgICAgIH0KCiAgICAgICAgaWYgKCFpblZQcmUpIHsKICAgICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7CiAgICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHsKICAgICAgICAgICAgaW5WUHJlID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7CiAgICAgICAgICBpblByZSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChpblZQcmUpIHsKICAgICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTsKICAgICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkgewogICAgICAgICAgLy8gc3RydWN0dXJhbCBkaXJlY3RpdmVzCiAgICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpOwogICAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpOwogICAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJvb3QpIHsKICAgICAgICAgIHJvb3QgPSBlbGVtZW50OwogICAgICAgICAgewogICAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICghdW5hcnkpIHsKICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50OwogICAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkgewogICAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07CiAgICAgICAgLy8gcG9wIHN0YWNrCiAgICAgICAgc3RhY2subGVuZ3RoIC09IDE7CiAgICAgICAgY3VycmVudFBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdOwogICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7CiAgICAgICAgICBlbGVtZW50LmVuZCA9IGVuZCQxOwogICAgICAgIH0KICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7CiAgICAgIH0sCgogICAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQsIHN0YXJ0LCBlbmQpIHsKICAgICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHsKICAgICAgICAgIHsKICAgICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgd2Fybk9uY2UoCiAgICAgICAgICAgICAgICAnQ29tcG9uZW50IHRlbXBsYXRlIHJlcXVpcmVzIGEgcm9vdCBlbGVtZW50LCByYXRoZXIgdGhhbiBqdXN0IHRleHQuJywKICAgICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH0KICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKCh0ZXh0ID0gdGV4dC50cmltKCkpKSB7CiAgICAgICAgICAgICAgd2Fybk9uY2UoCiAgICAgICAgICAgICAgICAoInRleHQgXCIiICsgdGV4dCArICJcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuIiksCiAgICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9CiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1ZwogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgIGlmIChpc0lFICYmCiAgICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJgogICAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dAogICAgICAgICkgewogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47CiAgICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7CiAgICAgICAgICB0ZXh0ID0gaXNUZXh0VGFnKGN1cnJlbnRQYXJlbnQpID8gdGV4dCA6IGRlY29kZUhUTUxDYWNoZWQodGV4dCk7CiAgICAgICAgfSBlbHNlIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7CiAgICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnCiAgICAgICAgICB0ZXh0ID0gJyc7CiAgICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlT3B0aW9uKSB7CiAgICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykgewogICAgICAgICAgICAvLyBpbiBjb25kZW5zZSBtb2RlLCByZW1vdmUgdGhlIHdoaXRlc3BhY2Ugbm9kZSBpZiBpdCBjb250YWlucwogICAgICAgICAgICAvLyBsaW5lIGJyZWFrLCBvdGhlcndpc2UgY29uZGVuc2UgdG8gYSBzaW5nbGUgc3BhY2UKICAgICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRleHQgPSAnICc7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRleHQgPSBwcmVzZXJ2ZVdoaXRlc3BhY2UgPyAnICcgOiAnJzsKICAgICAgICB9CiAgICAgICAgaWYgKHRleHQpIHsKICAgICAgICAgIGlmICghaW5QcmUgJiYgd2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykgewogICAgICAgICAgICAvLyBjb25kZW5zZSBjb25zZWN1dGl2ZSB3aGl0ZXNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZQogICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHdoaXRlc3BhY2VSRSQxLCAnICcpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHJlczsKICAgICAgICAgIHZhciBjaGlsZDsKICAgICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAocmVzID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkgewogICAgICAgICAgICBjaGlsZCA9IHsKICAgICAgICAgICAgICB0eXBlOiAyLAogICAgICAgICAgICAgIGV4cHJlc3Npb246IHJlcy5leHByZXNzaW9uLAogICAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucywKICAgICAgICAgICAgICB0ZXh0OiB0ZXh0CiAgICAgICAgICAgIH07CiAgICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCAhY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykgewogICAgICAgICAgICBjaGlsZCA9IHsKICAgICAgICAgICAgICB0eXBlOiAzLAogICAgICAgICAgICAgIHRleHQ6IHRleHQKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChjaGlsZCkgewogICAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkgewogICAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgICAgICAgY2hpbGQuZW5kID0gZW5kOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgY29tbWVudDogZnVuY3Rpb24gY29tbWVudCAodGV4dCwgc3RhcnQsIGVuZCkgewogICAgICAgIC8vIGFkZGluZyBhbnl0aW5nIGFzIGEgc2libGluZyB0byB0aGUgcm9vdCBub2RlIGlzIGZvcmJpZGRlbgogICAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZAogICAgICAgIGlmIChjdXJyZW50UGFyZW50KSB7CiAgICAgICAgICB2YXIgY2hpbGQgPSB7CiAgICAgICAgICAgIHR5cGU6IDMsCiAgICAgICAgICAgIHRleHQ6IHRleHQsCiAgICAgICAgICAgIGlzQ29tbWVudDogdHJ1ZQogICAgICAgICAgfTsKICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7CiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDsKICAgICAgICAgIH0KICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiByb290CiAgfQoKICBmdW5jdGlvbiBwcm9jZXNzUHJlIChlbCkgewogICAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHsKICAgICAgZWwucHJlID0gdHJ1ZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHsKICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0OwogICAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoOwogICAgaWYgKGxlbikgewogICAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyA9IG5ldyBBcnJheShsZW4pOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgYXR0cnNbaV0gPSB7CiAgICAgICAgICBuYW1lOiBsaXN0W2ldLm5hbWUsCiAgICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkobGlzdFtpXS52YWx1ZSkKICAgICAgICB9OwogICAgICAgIGlmIChsaXN0W2ldLnN0YXJ0ICE9IG51bGwpIHsKICAgICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gbGlzdFtpXS5zdGFydDsKICAgICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmICghZWwucHJlKSB7CiAgICAgIC8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXMKICAgICAgZWwucGxhaW4gPSB0cnVlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnQgKAogICAgZWxlbWVudCwKICAgIG9wdGlvbnMKICApIHsKICAgIHByb2Nlc3NLZXkoZWxlbWVudCk7CgogICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgYWZ0ZXIKICAgIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlcwogICAgZWxlbWVudC5wbGFpbiA9ICgKICAgICAgIWVsZW1lbnQua2V5ICYmCiAgICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmCiAgICAgICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGgKICAgICk7CgogICAgcHJvY2Vzc1JlZihlbGVtZW50KTsKICAgIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTsKICAgIHByb2Nlc3NTbG90T3V0bGV0KGVsZW1lbnQpOwogICAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykgewogICAgICBlbGVtZW50ID0gdHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50OwogICAgfQogICAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpOwogICAgcmV0dXJuIGVsZW1lbnQKICB9CgogIGZ1bmN0aW9uIHByb2Nlc3NLZXkgKGVsKSB7CiAgICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTsKICAgIGlmIChleHApIHsKICAgICAgewogICAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHsKICAgICAgICAgIHdhcm4kMigKICAgICAgICAgICAgIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC4iLAogICAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBpZiAoZWwuZm9yKSB7CiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxOwogICAgICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDsKICAgICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHsKICAgICAgICAgICAgd2FybiQyKAogICAgICAgICAgICAgICJEbyBub3QgdXNlIHYtZm9yIGluZGV4IGFzIGtleSBvbiA8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4sICIgKwogICAgICAgICAgICAgICJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLiIsCiAgICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSwKICAgICAgICAgICAgICB0cnVlIC8qIHRpcCAqLwogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBlbC5rZXkgPSBleHA7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkgewogICAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7CiAgICBpZiAocmVmKSB7CiAgICAgIGVsLnJlZiA9IHJlZjsKICAgICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7CiAgICB2YXIgZXhwOwogICAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHsKICAgICAgdmFyIHJlcyA9IHBhcnNlRm9yKGV4cCk7CiAgICAgIGlmIChyZXMpIHsKICAgICAgICBleHRlbmQoZWwsIHJlcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd2FybiQyKAogICAgICAgICAgKCJJbnZhbGlkIHYtZm9yIGV4cHJlc3Npb246ICIgKyBleHApLAogICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10KICAgICAgICApOwogICAgICB9CiAgICB9CiAgfQoKCgogIGZ1bmN0aW9uIHBhcnNlRm9yIChleHApIHsKICAgIHZhciBpbk1hdGNoID0gZXhwLm1hdGNoKGZvckFsaWFzUkUpOwogICAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9CiAgICB2YXIgcmVzID0ge307CiAgICByZXMuZm9yID0gaW5NYXRjaFsyXS50cmltKCk7CiAgICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTsKICAgIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7CiAgICBpZiAoaXRlcmF0b3JNYXRjaCkgewogICAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7CiAgICAgIHJlcy5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTsKICAgICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHsKICAgICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJlcy5hbGlhcyA9IGFsaWFzOwogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkgewogICAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7CiAgICBpZiAoZXhwKSB7CiAgICAgIGVsLmlmID0gZXhwOwogICAgICBhZGRJZkNvbmRpdGlvbihlbCwgewogICAgICAgIGV4cDogZXhwLAogICAgICAgIGJsb2NrOiBlbAogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkgewogICAgICAgIGVsLmVsc2UgPSB0cnVlOwogICAgICB9CiAgICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7CiAgICAgIGlmIChlbHNlaWYpIHsKICAgICAgICBlbC5lbHNlaWYgPSBlbHNlaWY7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIHByb2Nlc3NJZkNvbmRpdGlvbnMgKGVsLCBwYXJlbnQpIHsKICAgIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7CiAgICBpZiAocHJldiAmJiBwcmV2LmlmKSB7CiAgICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHsKICAgICAgICBleHA6IGVsLmVsc2VpZiwKICAgICAgICBibG9jazogZWwKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICB3YXJuJDIoCiAgICAgICAgInYtIiArIChlbC5lbHNlaWYgPyAoJ2Vsc2UtaWY9IicgKyBlbC5lbHNlaWYgKyAnIicpIDogJ2Vsc2UnKSArICIgIiArCiAgICAgICAgInVzZWQgb24gZWxlbWVudCA8IiArIChlbC50YWcpICsgIj4gd2l0aG91dCBjb3JyZXNwb25kaW5nIHYtaWYuIiwKICAgICAgICBlbC5yYXdBdHRyc01hcFtlbC5lbHNlaWYgPyAndi1lbHNlLWlmJyA6ICd2LWVsc2UnXQogICAgICApOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikgewogICAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7CiAgICB3aGlsZSAoaS0tKSB7CiAgICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7CiAgICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldCiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykgewogICAgICAgICAgd2FybiQyKAogICAgICAgICAgICAidGV4dCBcIiIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgIlwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgIiArCiAgICAgICAgICAgICJ3aWxsIGJlIGlnbm9yZWQuIiwKICAgICAgICAgICAgY2hpbGRyZW5baV0KICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIGNoaWxkcmVuLnBvcCgpOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikgewogICAgaWYgKCFlbC5pZkNvbmRpdGlvbnMpIHsKICAgICAgZWwuaWZDb25kaXRpb25zID0gW107CiAgICB9CiAgICBlbC5pZkNvbmRpdGlvbnMucHVzaChjb25kaXRpb24pOwogIH0KCiAgZnVuY3Rpb24gcHJvY2Vzc09uY2UgKGVsKSB7CiAgICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTsKICAgIGlmIChvbmNlJCQxICE9IG51bGwpIHsKICAgICAgZWwub25jZSA9IHRydWU7CiAgICB9CiAgfQoKICAvLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCwKICAvLyBlLmcuIDx0ZW1wbGF0ZSBzbG90PSJ4eHgiPiwgPGRpdiBzbG90LXNjb3BlPSJ4eHgiPgogIGZ1bmN0aW9uIHByb2Nlc3NTbG90Q29udGVudCAoZWwpIHsKICAgIHZhciBzbG90U2NvcGU7CiAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7CiAgICAgIHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzY29wZScpOwogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgaWYgKHNsb3RTY29wZSkgewogICAgICAgIHdhcm4kMigKICAgICAgICAgICJ0aGUgXCJzY29wZVwiIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIHNsb3RzIGhhdmUgYmVlbiBkZXByZWNhdGVkIGFuZCAiICsKICAgICAgICAgICJyZXBsYWNlZCBieSBcInNsb3Qtc2NvcGVcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXCJzbG90LXNjb3BlXCIgYXR0cmlidXRlICIgKwogICAgICAgICAgImNhbiBhbHNvIGJlIHVzZWQgb24gcGxhaW4gZWxlbWVudHMgaW4gYWRkaXRpb24gdG8gPHRlbXBsYXRlPiB0byAiICsKICAgICAgICAgICJkZW5vdGUgc2NvcGVkIHNsb3RzLiIsCiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSwKICAgICAgICAgIHRydWUKICAgICAgICApOwogICAgICB9CiAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RTY29wZSB8fCBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpOwogICAgfSBlbHNlIGlmICgoc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKSkpIHsKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgIGlmIChlbC5hdHRyc01hcFsndi1mb3InXSkgewogICAgICAgIHdhcm4kMigKICAgICAgICAgICJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPCIgKyAoZWwudGFnKSArICI+ICIgKwogICAgICAgICAgIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSAiICsKICAgICAgICAgICJzY29wZWQgc2xvdCB0byBtYWtlIGl0IGNsZWFyZXIuIiwKICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzbG90LXNjb3BlJ10sCiAgICAgICAgICB0cnVlCiAgICAgICAgKTsKICAgICAgfQogICAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7CiAgICB9CgogICAgLy8gc2xvdD0ieHh4IgogICAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTsKICAgIGlmIChzbG90VGFyZ2V0KSB7CiAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnIiInID8gJyJkZWZhdWx0IicgOiBzbG90VGFyZ2V0OwogICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9ICEhKGVsLmF0dHJzTWFwWyc6c2xvdCddIHx8IGVsLmF0dHJzTWFwWyd2LWJpbmQ6c2xvdCddKTsKICAgICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdAogICAgICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzLgogICAgICBpZiAoZWwudGFnICE9PSAndGVtcGxhdGUnICYmICFlbC5zbG90U2NvcGUpIHsKICAgICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTsKICAgICAgfQogICAgfQoKICAgIC8vIDIuNiB2LXNsb3Qgc3ludGF4CiAgICB7CiAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHsKICAgICAgICAvLyB2LXNsb3Qgb24gPHRlbXBsYXRlPgogICAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpOwogICAgICAgIGlmIChzbG90QmluZGluZykgewogICAgICAgICAgewogICAgICAgICAgICBpZiAoZWwuc2xvdFRhcmdldCB8fCBlbC5zbG90U2NvcGUpIHsKICAgICAgICAgICAgICB3YXJuJDIoCiAgICAgICAgICAgICAgICAiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy4iLAogICAgICAgICAgICAgICAgZWwKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHsKICAgICAgICAgICAgICB3YXJuJDIoCiAgICAgICAgICAgICAgICAiPHRlbXBsYXRlIHYtc2xvdD4gY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSByb290IGxldmVsIGluc2lkZSAiICsKICAgICAgICAgICAgICAgICJ0aGUgcmVjZWl2aW5nIGNvbXBvbmVudCIsCiAgICAgICAgICAgICAgICBlbAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciByZWYgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyk7CiAgICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lOwogICAgICAgICAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYzsKICAgICAgICAgIGVsLnNsb3RUYXJnZXQgPSBuYW1lOwogICAgICAgICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljOwogICAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90CiAgICAgICAgdmFyIHNsb3RCaW5kaW5nJDEgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTsKICAgICAgICBpZiAoc2xvdEJpbmRpbmckMSkgewogICAgICAgICAgewogICAgICAgICAgICBpZiAoIW1heWJlQ29tcG9uZW50KGVsKSkgewogICAgICAgICAgICAgIHdhcm4kMigKICAgICAgICAgICAgICAgICJ2LXNsb3QgY2FuIG9ubHkgYmUgdXNlZCBvbiBjb21wb25lbnRzIG9yIDx0ZW1wbGF0ZT4uIiwKICAgICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDEKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkgewogICAgICAgICAgICAgIHdhcm4kMigKICAgICAgICAgICAgICAgICJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLiIsCiAgICAgICAgICAgICAgICBlbAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7CiAgICAgICAgICAgICAgd2FybiQyKAogICAgICAgICAgICAgICAgIlRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eSwgdGhlIGRlZmF1bHQgc2xvdCBzaG91bGQgYWxzbyB1c2UgIiArCiAgICAgICAgICAgICAgICAiPHRlbXBsYXRlPiBzeW50YXggd2hlbiB0aGVyZSBhcmUgb3RoZXIgbmFtZWQgc2xvdHMuIiwKICAgICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDEKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCdzIGNoaWxkcmVuIHRvIGl0cyBkZWZhdWx0IHNsb3QKICAgICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTsKICAgICAgICAgIHZhciByZWYkMSA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nJDEpOwogICAgICAgICAgdmFyIG5hbWUkMSA9IHJlZiQxLm5hbWU7CiAgICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYzsKICAgICAgICAgIHZhciBzbG90Q29udGFpbmVyID0gc2xvdHNbbmFtZSQxXSA9IGNyZWF0ZUFTVEVsZW1lbnQoJ3RlbXBsYXRlJywgW10sIGVsKTsKICAgICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldCA9IG5hbWUkMTsKICAgICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7CiAgICAgICAgICBzbG90Q29udGFpbmVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgIGlmICghYy5zbG90U2NvcGUpIHsKICAgICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nJDEudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsKICAgICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBhcyB0aGV5IGFyZSByZXR1cm5lZCBmcm9tIHNjb3BlZFNsb3RzIG5vdwogICAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTsKICAgICAgICAgIC8vIG1hcmsgZWwgbm9uLXBsYWluIHNvIGRhdGEgZ2V0cyBnZW5lcmF0ZWQKICAgICAgICAgIGVsLnBsYWluID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykgewogICAgdmFyIG5hbWUgPSBiaW5kaW5nLm5hbWUucmVwbGFjZShzbG90UkUsICcnKTsKICAgIGlmICghbmFtZSkgewogICAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHsKICAgICAgICBuYW1lID0gJ2RlZmF1bHQnOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4kMigKICAgICAgICAgICJ2LXNsb3Qgc2hvcnRoYW5kIHN5bnRheCByZXF1aXJlcyBhIHNsb3QgbmFtZS4iLAogICAgICAgICAgYmluZGluZwogICAgICAgICk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKQogICAgICAvLyBkeW5hbWljIFtuYW1lXQogICAgICA/IHsgbmFtZTogbmFtZS5zbGljZSgxLCAtMSksIGR5bmFtaWM6IHRydWUgfQogICAgICAvLyBzdGF0aWMgbmFtZQogICAgICA6IHsgbmFtZTogKCJcIiIgKyBuYW1lICsgIlwiIiksIGR5bmFtaWM6IGZhbHNlIH0KICB9CgogIC8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHMKICBmdW5jdGlvbiBwcm9jZXNzU2xvdE91dGxldCAoZWwpIHsKICAgIGlmIChlbC50YWcgPT09ICdzbG90JykgewogICAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpOwogICAgICBpZiAoZWwua2V5KSB7CiAgICAgICAgd2FybiQyKAogICAgICAgICAgImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgIiArCiAgICAgICAgICAiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gIiArCiAgICAgICAgICAiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuIiwKICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JykKICAgICAgICApOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwcm9jZXNzQ29tcG9uZW50IChlbCkgewogICAgdmFyIGJpbmRpbmc7CiAgICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7CiAgICAgIGVsLmNvbXBvbmVudCA9IGJpbmRpbmc7CiAgICB9CiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHsKICAgICAgZWwuaW5saW5lVGVtcGxhdGUgPSB0cnVlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkgewogICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7CiAgICB2YXIgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljOwogICAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgIG5hbWUgPSByYXdOYW1lID0gbGlzdFtpXS5uYW1lOwogICAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7CiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7CiAgICAgICAgLy8gbWFyayBlbGVtZW50IGFzIGR5bmFtaWMKICAgICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7CiAgICAgICAgLy8gbW9kaWZpZXJzCiAgICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZS5yZXBsYWNlKGRpclJFLCAnJykpOwogICAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXIKICAgICAgICBpZiAobW9kaWZpZXJzKSB7CiAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTsKICAgICAgICB9CiAgICAgICAgaWYgKGJpbmRSRS50ZXN0KG5hbWUpKSB7IC8vIHYtYmluZAogICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTsKICAgICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTsKICAgICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpOwogICAgICAgICAgaWYgKGlzRHluYW1pYykgewogICAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDAKICAgICAgICAgICkgewogICAgICAgICAgICB3YXJuJDIoCiAgICAgICAgICAgICAgKCJUaGUgdmFsdWUgZm9yIGEgdi1iaW5kIGV4cHJlc3Npb24gY2Fubm90IGJlIGVtcHR5LiBGb3VuZCBpbiBcInYtYmluZDoiICsgbmFtZSArICJcIiIpCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7CiAgICAgICAgICAgIGlmIChtb2RpZmllcnMucHJvcCAmJiAhaXNEeW5hbWljKSB7CiAgICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpOwogICAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobW9kaWZpZXJzLmNhbWVsICYmICFpc0R5bmFtaWMpIHsKICAgICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7CiAgICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAiJGV2ZW50Iik7CiAgICAgICAgICAgICAgaWYgKCFpc0R5bmFtaWMpIHsKICAgICAgICAgICAgICAgIGFkZEhhbmRsZXIoCiAgICAgICAgICAgICAgICAgIGVsLAogICAgICAgICAgICAgICAgICAoInVwZGF0ZToiICsgKGNhbWVsaXplKG5hbWUpKSksCiAgICAgICAgICAgICAgICAgIHN5bmNHZW4sCiAgICAgICAgICAgICAgICAgIG51bGwsCiAgICAgICAgICAgICAgICAgIGZhbHNlLAogICAgICAgICAgICAgICAgICB3YXJuJDIsCiAgICAgICAgICAgICAgICAgIGxpc3RbaV0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAoaHlwaGVuYXRlKG5hbWUpICE9PSBjYW1lbGl6ZShuYW1lKSkgewogICAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKAogICAgICAgICAgICAgICAgICAgIGVsLAogICAgICAgICAgICAgICAgICAgICgidXBkYXRlOiIgKyAoaHlwaGVuYXRlKG5hbWUpKSksCiAgICAgICAgICAgICAgICAgICAgc3luY0dlbiwKICAgICAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgICAgIGZhbHNlLAogICAgICAgICAgICAgICAgICAgIHdhcm4kMiwKICAgICAgICAgICAgICAgICAgICBsaXN0W2ldCiAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGhhbmRsZXIgdy8gZHluYW1pYyBldmVudCBuYW1lCiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKAogICAgICAgICAgICAgICAgICBlbCwKICAgICAgICAgICAgICAgICAgKCJcInVwZGF0ZTpcIisoIiArIG5hbWUgKyAiKSIpLAogICAgICAgICAgICAgICAgICBzeW5jR2VuLAogICAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgICAgICAgd2FybiQyLAogICAgICAgICAgICAgICAgICBsaXN0W2ldLAogICAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWMKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMucHJvcCkgfHwgKAogICAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKQogICAgICAgICAgKSkgewogICAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIHZhbHVlLCBsaXN0W2ldLCBpc0R5bmFtaWMpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb24KICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SRSwgJycpOwogICAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7CiAgICAgICAgICBpZiAoaXNEeW5hbWljKSB7CiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTsKICAgICAgICAgIH0KICAgICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIsIGxpc3RbaV0sIGlzRHluYW1pYyk7CiAgICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXMKICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTsKICAgICAgICAgIC8vIHBhcnNlIGFyZwogICAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7CiAgICAgICAgICB2YXIgYXJnID0gYXJnTWF0Y2ggJiYgYXJnTWF0Y2hbMV07CiAgICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTsKICAgICAgICAgIGlmIChhcmcpIHsKICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpOwogICAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkgewogICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgxLCAtMSk7CiAgICAgICAgICAgICAgaXNEeW5hbWljID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgYWRkRGlyZWN0aXZlKGVsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBpc0R5bmFtaWMsIG1vZGlmaWVycywgbGlzdFtpXSk7CiAgICAgICAgICBpZiAobmFtZSA9PT0gJ21vZGVsJykgewogICAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGUKICAgICAgICB7CiAgICAgICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHZhbHVlLCBkZWxpbWl0ZXJzKTsKICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgd2FybiQyKAogICAgICAgICAgICAgIG5hbWUgKyAiPVwiIiArIHZhbHVlICsgIlwiOiAiICsKICAgICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICsKICAgICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICsKICAgICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGlkPSJ7eyB2YWwgfX0iPiwgdXNlIDxkaXYgOmlkPSJ2YWwiPi4nLAogICAgICAgICAgICAgIGxpc3RbaV0KICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTsKICAgICAgICAvLyAjNjg4NyBmaXJlZm94IGRvZXNuJ3QgdXBkYXRlIG11dGVkIHN0YXRlIGlmIHNldCB2aWEgYXR0cmlidXRlCiAgICAgICAgLy8gZXZlbiBpbW1lZGlhdGVseSBhZnRlciBlbGVtZW50IGNyZWF0aW9uCiAgICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiYKICAgICAgICAgICAgbmFtZSA9PT0gJ211dGVkJyAmJgogICAgICAgICAgICBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHsKICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjaGVja0luRm9yIChlbCkgewogICAgdmFyIHBhcmVudCA9IGVsOwogICAgd2hpbGUgKHBhcmVudCkgewogICAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQogICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50OwogICAgfQogICAgcmV0dXJuIGZhbHNlCiAgfQoKICBmdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkgewogICAgdmFyIG1hdGNoID0gbmFtZS5tYXRjaChtb2RpZmllclJFKTsKICAgIGlmIChtYXRjaCkgewogICAgICB2YXIgcmV0ID0ge307CiAgICAgIG1hdGNoLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0W20uc2xpY2UoMSldID0gdHJ1ZTsgfSk7CiAgICAgIHJldHVybiByZXQKICAgIH0KICB9CgogIGZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHsKICAgIHZhciBtYXAgPSB7fTsKICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgIGlmICgKICAgICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZQogICAgICApIHsKICAgICAgICB3YXJuJDIoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXSk7CiAgICAgIH0KICAgICAgbWFwW2F0dHJzW2ldLm5hbWVdID0gYXR0cnNbaV0udmFsdWU7CiAgICB9CiAgICByZXR1cm4gbWFwCiAgfQoKICAvLyBmb3Igc2NyaXB0IChlLmcuIHR5cGU9IngvdGVtcGxhdGUiKSBvciBzdHlsZSwgZG8gbm90IGRlY29kZSBjb250ZW50CiAgZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkgewogICAgcmV0dXJuIGVsLnRhZyA9PT0gJ3NjcmlwdCcgfHwgZWwudGFnID09PSAnc3R5bGUnCiAgfQoKICBmdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHsKICAgIHJldHVybiAoCiAgICAgIGVsLnRhZyA9PT0gJ3N0eWxlJyB8fAogICAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoCiAgICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHwKICAgICAgICBlbC5hdHRyc01hcC50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0JwogICAgICApKQogICAgKQogIH0KCiAgdmFyIGllTlNCdWcgPSAvXnhtbG5zOk5TXGQrLzsKICB2YXIgaWVOU1ByZWZpeCA9IC9eTlNcZCs6LzsKCiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICBmdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykgewogICAgdmFyIHJlcyA9IFtdOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgYXR0ciA9IGF0dHJzW2ldOwogICAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7CiAgICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpOwogICAgICAgIHJlcy5wdXNoKGF0dHIpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBmdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkgewogICAgdmFyIF9lbCA9IGVsOwogICAgd2hpbGUgKF9lbCkgewogICAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7CiAgICAgICAgd2FybiQyKAogICAgICAgICAgIjwiICsgKGVsLnRhZykgKyAiIHYtbW9kZWw9XCIiICsgdmFsdWUgKyAiXCI+OiAiICsKICAgICAgICAgICJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gIiArCiAgICAgICAgICAiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgIiArCiAgICAgICAgICAid3JpdGluZyB0byB0aGUgYWxpYXMgaXMgbGlrZSBtb2RpZnlpbmcgYSBmdW5jdGlvbiBsb2NhbCB2YXJpYWJsZS4gIiArCiAgICAgICAgICAiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuIiwKICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ10KICAgICAgICApOwogICAgICB9CiAgICAgIF9lbCA9IF9lbC5wYXJlbnQ7CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHsKICAgIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHsKICAgICAgdmFyIG1hcCA9IGVsLmF0dHJzTWFwOwogICAgICBpZiAoIW1hcFsndi1tb2RlbCddKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHZhciB0eXBlQmluZGluZzsKICAgICAgaWYgKG1hcFsnOnR5cGUnXSB8fCBtYXBbJ3YtYmluZDp0eXBlJ10pIHsKICAgICAgICB0eXBlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHlwZScpOwogICAgICB9CiAgICAgIGlmICghbWFwLnR5cGUgJiYgIXR5cGVCaW5kaW5nICYmIG1hcFsndi1iaW5kJ10pIHsKICAgICAgICB0eXBlQmluZGluZyA9ICIoIiArIChtYXBbJ3YtYmluZCddKSArICIpLnR5cGUiOwogICAgICB9CgogICAgICBpZiAodHlwZUJpbmRpbmcpIHsKICAgICAgICB2YXIgaWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicsIHRydWUpOwogICAgICAgIHZhciBpZkNvbmRpdGlvbkV4dHJhID0gaWZDb25kaXRpb24gPyAoIiYmKCIgKyBpZkNvbmRpdGlvbiArICIpIikgOiAiIjsKICAgICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsOwogICAgICAgIHZhciBlbHNlSWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJywgdHJ1ZSk7CiAgICAgICAgLy8gMS4gY2hlY2tib3gKICAgICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7CiAgICAgICAgLy8gcHJvY2VzcyBmb3Igb24gdGhlIG1haW4gbm9kZQogICAgICAgIHByb2Nlc3NGb3IoYnJhbmNoMCk7CiAgICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpOwogICAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDAsIG9wdGlvbnMpOwogICAgICAgIGJyYW5jaDAucHJvY2Vzc2VkID0gdHJ1ZTsgLy8gcHJldmVudCBpdCBmcm9tIGRvdWJsZS1wcm9jZXNzZWQKICAgICAgICBicmFuY2gwLmlmID0gIigiICsgdHlwZUJpbmRpbmcgKyAiKT09PSdjaGVja2JveCciICsgaWZDb25kaXRpb25FeHRyYTsKICAgICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7CiAgICAgICAgICBleHA6IGJyYW5jaDAuaWYsCiAgICAgICAgICBibG9jazogYnJhbmNoMAogICAgICAgIH0pOwogICAgICAgIC8vIDIuIGFkZCByYWRpbyBlbHNlLWlmIGNvbmRpdGlvbgogICAgICAgIHZhciBicmFuY2gxID0gY2xvbmVBU1RFbGVtZW50KGVsKTsKICAgICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDEsICd2LWZvcicsIHRydWUpOwogICAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMSwgJ3R5cGUnLCAncmFkaW8nKTsKICAgICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gxLCBvcHRpb25zKTsKICAgICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7CiAgICAgICAgICBleHA6ICIoIiArIHR5cGVCaW5kaW5nICsgIik9PT0ncmFkaW8nIiArIGlmQ29uZGl0aW9uRXh0cmEsCiAgICAgICAgICBibG9jazogYnJhbmNoMQogICAgICAgIH0pOwogICAgICAgIC8vIDMuIG90aGVyCiAgICAgICAgdmFyIGJyYW5jaDIgPSBjbG9uZUFTVEVsZW1lbnQoZWwpOwogICAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMiwgJ3YtZm9yJywgdHJ1ZSk7CiAgICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7CiAgICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMiwgb3B0aW9ucyk7CiAgICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwgewogICAgICAgICAgZXhwOiBpZkNvbmRpdGlvbiwKICAgICAgICAgIGJsb2NrOiBicmFuY2gyCiAgICAgICAgfSk7CgogICAgICAgIGlmIChoYXNFbHNlKSB7CiAgICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoZWxzZUlmQ29uZGl0aW9uKSB7CiAgICAgICAgICBicmFuY2gwLmVsc2VpZiA9IGVsc2VJZkNvbmRpdGlvbjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBicmFuY2gwCiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHsKICAgIHJldHVybiBjcmVhdGVBU1RFbGVtZW50KGVsLnRhZywgZWwuYXR0cnNMaXN0LnNsaWNlKCksIGVsLnBhcmVudCkKICB9CgogIHZhciBtb2RlbCQxID0gewogICAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZQogIH07CgogIHZhciBtb2R1bGVzJDEgPSBbCiAgICBrbGFzcyQxLAogICAgc3R5bGUkMSwKICAgIG1vZGVsJDEKICBdOwoKICAvKiAgKi8KCiAgZnVuY3Rpb24gdGV4dCAoZWwsIGRpcikgewogICAgaWYgKGRpci52YWx1ZSkgewogICAgICBhZGRQcm9wKGVsLCAndGV4dENvbnRlbnQnLCAoIl9zKCIgKyAoZGlyLnZhbHVlKSArICIpIiksIGRpcik7CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikgewogICAgaWYgKGRpci52YWx1ZSkgewogICAgICBhZGRQcm9wKGVsLCAnaW5uZXJIVE1MJywgKCJfcygiICsgKGRpci52YWx1ZSkgKyAiKSIpLCBkaXIpOwogICAgfQogIH0KCiAgdmFyIGRpcmVjdGl2ZXMkMSA9IHsKICAgIG1vZGVsOiBtb2RlbCwKICAgIHRleHQ6IHRleHQsCiAgICBodG1sOiBodG1sCiAgfTsKCiAgLyogICovCgogIHZhciBiYXNlT3B0aW9ucyA9IHsKICAgIGV4cGVjdEhUTUw6IHRydWUsCiAgICBtb2R1bGVzOiBtb2R1bGVzJDEsCiAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzJDEsCiAgICBpc1ByZVRhZzogaXNQcmVUYWcsCiAgICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLAogICAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLAogICAgY2FuQmVMZWZ0T3BlblRhZzogY2FuQmVMZWZ0T3BlblRhZywKICAgIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsCiAgICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSwKICAgIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKQogIH07CgogIC8qICAqLwoKICB2YXIgaXNTdGF0aWNLZXk7CiAgdmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZzsKCiAgdmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTsKCiAgLyoqCiAgICogR29hbCBvZiB0aGUgb3B0aW1pemVyOiB3YWxrIHRoZSBnZW5lcmF0ZWQgdGVtcGxhdGUgQVNUIHRyZWUKICAgKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mCiAgICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS4KICAgKgogICAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOgogICAqCiAgICogMS4gSG9pc3QgdGhlbSBpbnRvIGNvbnN0YW50cywgc28gdGhhdCB3ZSBubyBsb25nZXIgbmVlZCB0bwogICAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjsKICAgKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy4KICAgKi8KICBmdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykgewogICAgaWYgKCFyb290KSB7IHJldHVybiB9CiAgICBpc1N0YXRpY0tleSA9IGdlblN0YXRpY0tleXNDYWNoZWQob3B0aW9ucy5zdGF0aWNLZXlzIHx8ICcnKTsKICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubzsKICAgIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuCiAgICBtYXJrU3RhdGljJDEocm9vdCk7CiAgICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuCiAgICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpOwogIH0KCiAgZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyQxIChrZXlzKSB7CiAgICByZXR1cm4gbWFrZU1hcCgKICAgICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwJyArCiAgICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKQogICAgKQogIH0KCiAgZnVuY3Rpb24gbWFya1N0YXRpYyQxIChub2RlKSB7CiAgICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpOwogICAgaWYgKG5vZGUudHlwZSA9PT0gMSkgewogICAgICAvLyBkbyBub3QgbWFrZSBjb21wb25lbnQgc2xvdCBjb250ZW50IHN0YXRpYy4gdGhpcyBhdm9pZHMKICAgICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2RlcwogICAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nCiAgICAgIGlmICgKICAgICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJgogICAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiYKICAgICAgICBub2RlLmF0dHJzTWFwWydpbmxpbmUtdGVtcGxhdGUnXSA9PSBudWxsCiAgICAgICkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldOwogICAgICAgIG1hcmtTdGF0aWMkMShjaGlsZCk7CiAgICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHsKICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykgewogICAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykgewogICAgICAgICAgdmFyIGJsb2NrID0gbm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jazsKICAgICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7CiAgICAgICAgICBpZiAoIWJsb2NrLnN0YXRpYykgewogICAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7CiAgICBpZiAobm9kZS50eXBlID09PSAxKSB7CiAgICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHsKICAgICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjsKICAgICAgfQogICAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdAogICAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbAogICAgICAvLyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgYW5kIGl0J3MgYmV0dGVyIG9mZiB0byBqdXN0IGFsd2F5cyByZW5kZXIgaXQgZnJlc2guCiAgICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKAogICAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmCiAgICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAzCiAgICAgICkpIHsKICAgICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlOwogICAgICAgIHJldHVybgogICAgICB9IGVsc2UgewogICAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlOwogICAgICB9CiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuY2hpbGRyZW5baV0sIGlzSW5Gb3IgfHwgISFub2RlLmZvcik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykgewogICAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykgewogICAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2ssIGlzSW5Gb3IpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHsKICAgIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvbgogICAgICByZXR1cm4gZmFsc2UKICAgIH0KICAgIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dAogICAgICByZXR1cm4gdHJ1ZQogICAgfQogICAgcmV0dXJuICEhKG5vZGUucHJlIHx8ICgKICAgICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5ncwogICAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlCiAgICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluCiAgICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50CiAgICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJgogICAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSkKICAgICkpCiAgfQoKICBmdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkgewogICAgd2hpbGUgKG5vZGUucGFyZW50KSB7CiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDsKICAgICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgIH0KICAgICAgaWYgKG5vZGUuZm9yKSB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZhbHNlCiAgfQoKICAvKiAgKi8KCiAgdmFyIGZuRXhwUkUgPSAvXihbXHckX10rfFwoW14pXSo/XCkpXHMqPT58XmZ1bmN0aW9uKD86XHMrW1x3JF0rKT9ccypcKC87CiAgdmFyIGZuSW52b2tlUkUgPSAvXChbXildKj9cKTsqJC87CiAgdmFyIHNpbXBsZVBhdGhSRSA9IC9eW0EtWmEtel8kXVtcdyRdKig/OlwuW0EtWmEtel8kXVtcdyRdKnxcWydbXiddKj8nXXxcWyJbXiJdKj8iXXxcW1xkK118XFtbQS1aYS16XyRdW1x3JF0qXSkqJC87CgogIC8vIEtleWJvYXJkRXZlbnQua2V5Q29kZSBhbGlhc2VzCiAgdmFyIGtleUNvZGVzID0gewogICAgZXNjOiAyNywKICAgIHRhYjogOSwKICAgIGVudGVyOiAxMywKICAgIHNwYWNlOiAzMiwKICAgIHVwOiAzOCwKICAgIGxlZnQ6IDM3LAogICAgcmlnaHQ6IDM5LAogICAgZG93bjogNDAsCiAgICAnZGVsZXRlJzogWzgsIDQ2XQogIH07CgogIC8vIEtleWJvYXJkRXZlbnQua2V5IGFsaWFzZXMKICB2YXIga2V5TmFtZXMgPSB7CiAgICAvLyAjNzg4MDogSUUxMSBhbmQgRWRnZSB1c2UgYEVzY2AgZm9yIEVzY2FwZSBrZXkgbmFtZS4KICAgIGVzYzogWydFc2MnLCAnRXNjYXBlJ10sCiAgICB0YWI6ICdUYWInLAogICAgZW50ZXI6ICdFbnRlcicsCiAgICAvLyAjOTExMjogSUUxMSB1c2VzIGBTcGFjZWJhcmAgZm9yIFNwYWNlIGtleSBuYW1lLgogICAgc3BhY2U6IFsnICcsICdTcGFjZWJhciddLAogICAgLy8gIzc4MDY6IElFMTEgdXNlcyBrZXkgbmFtZXMgd2l0aG91dCBgQXJyb3dgIHByZWZpeCBmb3IgYXJyb3cga2V5cy4KICAgIHVwOiBbJ1VwJywgJ0Fycm93VXAnXSwKICAgIGxlZnQ6IFsnTGVmdCcsICdBcnJvd0xlZnQnXSwKICAgIHJpZ2h0OiBbJ1JpZ2h0JywgJ0Fycm93UmlnaHQnXSwKICAgIGRvd246IFsnRG93bicsICdBcnJvd0Rvd24nXSwKICAgIC8vICM5MTEyOiBJRTExIHVzZXMgYERlbGAgZm9yIERlbGV0ZSBrZXkgbmFtZS4KICAgICdkZWxldGUnOiBbJ0JhY2tzcGFjZScsICdEZWxldGUnLCAnRGVsJ10KICB9OwoKICAvLyAjNDg2ODogbW9kaWZpZXJzIHRoYXQgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsaXN0ZW5lcgogIC8vIG5lZWQgdG8gZXhwbGljaXRseSByZXR1cm4gbnVsbCBzbyB0aGF0IHdlIGNhbiBkZXRlcm1pbmUgd2hldGhlciB0byByZW1vdmUKICAvLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlCiAgdmFyIGdlbkd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbikgeyByZXR1cm4gKCJpZigiICsgY29uZGl0aW9uICsgIilyZXR1cm4gbnVsbDsiKTsgfTsKCiAgdmFyIG1vZGlmaWVyQ29kZSA9IHsKICAgIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JywKICAgIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLAogICAgc2VsZjogZ2VuR3VhcmQoIiRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0IiksCiAgICBjdHJsOiBnZW5HdWFyZCgiISRldmVudC5jdHJsS2V5IiksCiAgICBzaGlmdDogZ2VuR3VhcmQoIiEkZXZlbnQuc2hpZnRLZXkiKSwKICAgIGFsdDogZ2VuR3VhcmQoIiEkZXZlbnQuYWx0S2V5IiksCiAgICBtZXRhOiBnZW5HdWFyZCgiISRldmVudC5tZXRhS2V5IiksCiAgICBsZWZ0OiBnZW5HdWFyZCgiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDAiKSwKICAgIG1pZGRsZTogZ2VuR3VhcmQoIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAxIiksCiAgICByaWdodDogZ2VuR3VhcmQoIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyIikKICB9OwoKICBmdW5jdGlvbiBnZW5IYW5kbGVycyAoCiAgICBldmVudHMsCiAgICBpc05hdGl2ZQogICkgewogICAgdmFyIHByZWZpeCA9IGlzTmF0aXZlID8gJ25hdGl2ZU9uOicgOiAnb246JzsKICAgIHZhciBzdGF0aWNIYW5kbGVycyA9ICIiOwogICAgdmFyIGR5bmFtaWNIYW5kbGVycyA9ICIiOwogICAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHsKICAgICAgdmFyIGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pOwogICAgICBpZiAoZXZlbnRzW25hbWVdICYmIGV2ZW50c1tuYW1lXS5keW5hbWljKSB7CiAgICAgICAgZHluYW1pY0hhbmRsZXJzICs9IG5hbWUgKyAiLCIgKyBoYW5kbGVyQ29kZSArICIsIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdGF0aWNIYW5kbGVycyArPSAiXCIiICsgbmFtZSArICJcIjoiICsgaGFuZGxlckNvZGUgKyAiLCI7CiAgICAgIH0KICAgIH0KICAgIHN0YXRpY0hhbmRsZXJzID0gInsiICsgKHN0YXRpY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyAifSI7CiAgICBpZiAoZHluYW1pY0hhbmRsZXJzKSB7CiAgICAgIHJldHVybiBwcmVmaXggKyAiX2QoIiArIHN0YXRpY0hhbmRsZXJzICsgIixbIiArIChkeW5hbWljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArICJdKSIKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBwcmVmaXggKyBzdGF0aWNIYW5kbGVycwogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikgewogICAgaWYgKCFoYW5kbGVyKSB7CiAgICAgIHJldHVybiAnZnVuY3Rpb24oKXt9JwogICAgfQoKICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7CiAgICAgIHJldHVybiAoIlsiICsgKGhhbmRsZXIubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBnZW5IYW5kbGVyKGhhbmRsZXIpOyB9KS5qb2luKCcsJykpICsgIl0iKQogICAgfQoKICAgIHZhciBpc01ldGhvZFBhdGggPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKTsKICAgIHZhciBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTsKICAgIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpOwoKICAgIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHsKICAgICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikgewogICAgICAgIHJldHVybiBoYW5kbGVyLnZhbHVlCiAgICAgIH0KICAgICAgcmV0dXJuICgiZnVuY3Rpb24oJGV2ZW50KXsiICsgKGlzRnVuY3Rpb25JbnZvY2F0aW9uID8gKCJyZXR1cm4gIiArIChoYW5kbGVyLnZhbHVlKSkgOiBoYW5kbGVyLnZhbHVlKSArICJ9IikgLy8gaW5saW5lIHN0YXRlbWVudAogICAgfSBlbHNlIHsKICAgICAgdmFyIGNvZGUgPSAnJzsKICAgICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnOwogICAgICB2YXIga2V5cyA9IFtdOwogICAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHsKICAgICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHsKICAgICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBtb2RpZmllckNvZGVba2V5XTsKICAgICAgICAgIC8vIGxlZnQvcmlnaHQKICAgICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7CiAgICAgICAgICAgIGtleXMucHVzaChrZXkpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7CiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gKGhhbmRsZXIubW9kaWZpZXJzKTsKICAgICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBnZW5HdWFyZCgKICAgICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ10KICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gIW1vZGlmaWVyc1trZXlNb2RpZmllcl07IH0pCiAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICgiJGV2ZW50LiIgKyBrZXlNb2RpZmllciArICJLZXkiKTsgfSkKICAgICAgICAgICAgICAuam9pbignfHwnKQogICAgICAgICAgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChrZXlzLmxlbmd0aCkgewogICAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpOwogICAgICB9CiAgICAgIC8vIE1ha2Ugc3VyZSBtb2RpZmllcnMgbGlrZSBwcmV2ZW50IGFuZCBzdG9wIGdldCBleGVjdXRlZCBhZnRlciBrZXkgZmlsdGVyaW5nCiAgICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHsKICAgICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTsKICAgICAgfQogICAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGgKICAgICAgICA/ICgicmV0dXJuICIgKyAoaGFuZGxlci52YWx1ZSkgKyAiKCRldmVudCkiKQogICAgICAgIDogaXNGdW5jdGlvbkV4cHJlc3Npb24KICAgICAgICAgID8gKCJyZXR1cm4gKCIgKyAoaGFuZGxlci52YWx1ZSkgKyAiKSgkZXZlbnQpIikKICAgICAgICAgIDogaXNGdW5jdGlvbkludm9jYXRpb24KICAgICAgICAgICAgPyAoInJldHVybiAiICsgKGhhbmRsZXIudmFsdWUpKQogICAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7CiAgICAgIHJldHVybiAoImZ1bmN0aW9uKCRldmVudCl7IiArIGNvZGUgKyBoYW5kbGVyQ29kZSArICJ9IikKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykgewogICAgcmV0dXJuICgKICAgICAgLy8gbWFrZSBzdXJlIHRoZSBrZXkgZmlsdGVycyBvbmx5IGFwcGx5IHRvIEtleWJvYXJkRXZlbnRzCiAgICAgIC8vICM5NDQxOiBjYW4ndCB1c2UgJ2tleUNvZGUnIGluICRldmVudCBiZWNhdXNlIENocm9tZSBhdXRvZmlsbCBmaXJlcyBmYWtlCiAgICAgIC8vIGtleSBldmVudHMgdGhhdCBkbyBub3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5Li4uCiAgICAgICJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJiIgKwogICAgICAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyAiKXJldHVybiBudWxsOyIKICAgICkKICB9CgogIGZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkgewogICAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApOwogICAgaWYgKGtleVZhbCkgewogICAgICByZXR1cm4gKCIkZXZlbnQua2V5Q29kZSE9PSIgKyBrZXlWYWwpCiAgICB9CiAgICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07CiAgICB2YXIga2V5TmFtZSA9IGtleU5hbWVzW2tleV07CiAgICByZXR1cm4gKAogICAgICAiX2soJGV2ZW50LmtleUNvZGUsIiArCiAgICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArICIsIiArCiAgICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyAiLCIgKwogICAgICAiJGV2ZW50LmtleSwiICsKICAgICAgIiIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5TmFtZSkpICsKICAgICAgIikiCiAgICApCiAgfQoKICAvKiAgKi8KCiAgZnVuY3Rpb24gb24gKGVsLCBkaXIpIHsKICAgIGlmIChkaXIubW9kaWZpZXJzKSB7CiAgICAgIHdhcm4oInYtb24gd2l0aG91dCBhcmd1bWVudCBkb2VzIG5vdCBzdXBwb3J0IG1vZGlmaWVycy4iKTsKICAgIH0KICAgIGVsLndyYXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKCJfZygiICsgY29kZSArICIsIiArIChkaXIudmFsdWUpICsgIikiKTsgfTsKICB9CgogIC8qICAqLwoKICBmdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHsKICAgIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHsKICAgICAgcmV0dXJuICgiX2IoIiArIGNvZGUgKyAiLCciICsgKGVsLnRhZykgKyAiJywiICsgKGRpci52YWx1ZSkgKyAiLCIgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAndHJ1ZScgOiAnZmFsc2UnKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMuc3luYyA/ICcsdHJ1ZScgOiAnJykgKyAiKSIpCiAgICB9OwogIH0KCiAgLyogICovCgogIHZhciBiYXNlRGlyZWN0aXZlcyA9IHsKICAgIG9uOiBvbiwKICAgIGJpbmQ6IGJpbmQkMSwKICAgIGNsb2FrOiBub29wCiAgfTsKCiAgLyogICovCgoKCgoKICB2YXIgQ29kZWdlblN0YXRlID0gZnVuY3Rpb24gQ29kZWdlblN0YXRlIChvcHRpb25zKSB7CiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwogICAgdGhpcy53YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuOwogICAgdGhpcy50cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Db2RlJyk7CiAgICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTsKICAgIHRoaXMuZGlyZWN0aXZlcyA9IGV4dGVuZChleHRlbmQoe30sIGJhc2VEaXJlY3RpdmVzKSwgb3B0aW9ucy5kaXJlY3RpdmVzKTsKICAgIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vOwogICAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTsKICAgIHRoaXMub25jZUlkID0gMDsKICAgIHRoaXMuc3RhdGljUmVuZGVyRm5zID0gW107CiAgICB0aGlzLnByZSA9IGZhbHNlOwogIH07CgoKCiAgZnVuY3Rpb24gZ2VuZXJhdGUgKAogICAgYXN0LAogICAgb3B0aW9ucwogICkgewogICAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTsKICAgIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QsIHN0YXRlKSA6ICdfYygiZGl2IiknOwogICAgcmV0dXJuIHsKICAgICAgcmVuZGVyOiAoIndpdGgodGhpcyl7cmV0dXJuICIgKyBjb2RlICsgIn0iKSwKICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkgewogICAgaWYgKGVsLnBhcmVudCkgewogICAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTsKICAgIH0KCiAgICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7CiAgICAgIHJldHVybiBnZW5TdGF0aWMoZWwsIHN0YXRlKQogICAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7CiAgICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSkKICAgIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHsKICAgICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpCiAgICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkgewogICAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKQogICAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkgewogICAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndm9pZCAwJwogICAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90JykgewogICAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpCiAgICB9IGVsc2UgewogICAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudAogICAgICB2YXIgY29kZTsKICAgICAgaWYgKGVsLmNvbXBvbmVudCkgewogICAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCwgc3RhdGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBkYXRhOwogICAgICAgIGlmICghZWwucGxhaW4gfHwgKGVsLnByZSAmJiBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkpKSB7CiAgICAgICAgICBkYXRhID0gZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpOwogICAgICAgIGNvZGUgPSAiX2MoJyIgKyAoZWwudGFnKSArICInIiArIChkYXRhID8gKCIsIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKCIsIiArIGNoaWxkcmVuKSA6ICcnKSArICIpIjsKICAgICAgfQogICAgICAvLyBtb2R1bGUgdHJhbnNmb3JtcwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb2RlID0gc3RhdGUudHJhbnNmb3Jtc1tpXShlbCwgY29kZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGNvZGUKICAgIH0KICB9CgogIC8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0CiAgZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHsKICAgIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7CiAgICAvLyBTb21lIGVsZW1lbnRzICh0ZW1wbGF0ZXMpIG5lZWQgdG8gYmVoYXZlIGRpZmZlcmVudGx5IGluc2lkZSBvZiBhIHYtcHJlCiAgICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0bwogICAgLy8gd3JhcCBhIHN0YXRlIGNoYW5nZSBhbmQgcmVzZXQgaXQgdXBvbiBleGl0aW5nIHRoZSBwcmUgbm9kZS4KICAgIHZhciBvcmlnaW5hbFByZVN0YXRlID0gc3RhdGUucHJlOwogICAgaWYgKGVsLnByZSkgewogICAgICBzdGF0ZS5wcmUgPSBlbC5wcmU7CiAgICB9CiAgICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoIndpdGgodGhpcyl7cmV0dXJuICIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArICJ9IikpOwogICAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTsKICAgIHJldHVybiAoIl9tKCIgKyAoc3RhdGUuc3RhdGljUmVuZGVyRm5zLmxlbmd0aCAtIDEpICsgKGVsLnN0YXRpY0luRm9yID8gJyx0cnVlJyA6ICcnKSArICIpIikKICB9CgogIC8vIHYtb25jZQogIGZ1bmN0aW9uIGdlbk9uY2UgKGVsLCBzdGF0ZSkgewogICAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7CiAgICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7CiAgICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpCiAgICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7CiAgICAgIHZhciBrZXkgPSAnJzsKICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDsKICAgICAgd2hpbGUgKHBhcmVudCkgewogICAgICAgIGlmIChwYXJlbnQuZm9yKSB7CiAgICAgICAgICBrZXkgPSBwYXJlbnQua2V5OwogICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDsKICAgICAgfQogICAgICBpZiAoIWtleSkgewogICAgICAgIHN0YXRlLndhcm4oCiAgICAgICAgICAidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuICIsCiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ10KICAgICAgICApOwogICAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkKICAgICAgfQogICAgICByZXR1cm4gKCJfbygiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyAiLCIgKyAoc3RhdGUub25jZUlkKyspICsgIiwiICsga2V5ICsgIikiKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpCiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZW5JZiAoCiAgICBlbCwKICAgIHN0YXRlLAogICAgYWx0R2VuLAogICAgYWx0RW1wdHkKICApIHsKICAgIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uCiAgICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkKICB9CgogIGZ1bmN0aW9uIGdlbklmQ29uZGl0aW9ucyAoCiAgICBjb25kaXRpb25zLAogICAgc3RhdGUsCiAgICBhbHRHZW4sCiAgICBhbHRFbXB0eQogICkgewogICAgaWYgKCFjb25kaXRpb25zLmxlbmd0aCkgewogICAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknCiAgICB9CgogICAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTsKICAgIGlmIChjb25kaXRpb24uZXhwKSB7CiAgICAgIHJldHVybiAoIigiICsgKGNvbmRpdGlvbi5leHApICsgIik/IiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpICsgIjoiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICgiIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKQogICAgfQoKICAgIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSkKICAgIGZ1bmN0aW9uIGdlblRlcm5hcnlFeHAgKGVsKSB7CiAgICAgIHJldHVybiBhbHRHZW4KICAgICAgICA/IGFsdEdlbihlbCwgc3RhdGUpCiAgICAgICAgOiBlbC5vbmNlCiAgICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKQogICAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdlbkZvciAoCiAgICBlbCwKICAgIHN0YXRlLAogICAgYWx0R2VuLAogICAgYWx0SGVscGVyCiAgKSB7CiAgICB2YXIgZXhwID0gZWwuZm9yOwogICAgdmFyIGFsaWFzID0gZWwuYWxpYXM7CiAgICB2YXIgaXRlcmF0b3IxID0gZWwuaXRlcmF0b3IxID8gKCIsIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnOwogICAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/ICgiLCIgKyAoZWwuaXRlcmF0b3IyKSkgOiAnJzsKCiAgICBpZiAoc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmCiAgICAgIGVsLnRhZyAhPT0gJ3Nsb3QnICYmCiAgICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJgogICAgICAhZWwua2V5CiAgICApIHsKICAgICAgc3RhdGUud2FybigKICAgICAgICAiPCIgKyAoZWwudGFnKSArICIgdi1mb3I9XCIiICsgYWxpYXMgKyAiIGluICIgKyBleHAgKyAiXCI+OiBjb21wb25lbnQgbGlzdHMgcmVuZGVyZWQgd2l0aCAiICsKICAgICAgICAidi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gIiArCiAgICAgICAgIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uIiwKICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXSwKICAgICAgICB0cnVlIC8qIHRpcCAqLwogICAgICApOwogICAgfQoKICAgIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvbgogICAgcmV0dXJuIChhbHRIZWxwZXIgfHwgJ19sJykgKyAiKCgiICsgZXhwICsgIiksIiArCiAgICAgICJmdW5jdGlvbigiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyAiKXsiICsKICAgICAgICAicmV0dXJuICIgKyAoKGFsdEdlbiB8fCBnZW5FbGVtZW50KShlbCwgc3RhdGUpKSArCiAgICAgICd9KScKICB9CgogIGZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7CiAgICB2YXIgZGF0YSA9ICd7JzsKCiAgICAvLyBkaXJlY3RpdmVzIGZpcnN0LgogICAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC4KICAgIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpOwogICAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9CgogICAgLy8ga2V5CiAgICBpZiAoZWwua2V5KSB7CiAgICAgIGRhdGEgKz0gImtleToiICsgKGVsLmtleSkgKyAiLCI7CiAgICB9CiAgICAvLyByZWYKICAgIGlmIChlbC5yZWYpIHsKICAgICAgZGF0YSArPSAicmVmOiIgKyAoZWwucmVmKSArICIsIjsKICAgIH0KICAgIGlmIChlbC5yZWZJbkZvcikgewogICAgICBkYXRhICs9ICJyZWZJbkZvcjp0cnVlLCI7CiAgICB9CiAgICAvLyBwcmUKICAgIGlmIChlbC5wcmUpIHsKICAgICAgZGF0YSArPSAicHJlOnRydWUsIjsKICAgIH0KICAgIC8vIHJlY29yZCBvcmlnaW5hbCB0YWcgbmFtZSBmb3IgY29tcG9uZW50cyB1c2luZyAiaXMiIGF0dHJpYnV0ZQogICAgaWYgKGVsLmNvbXBvbmVudCkgewogICAgICBkYXRhICs9ICJ0YWc6XCIiICsgKGVsLnRhZykgKyAiXCIsIjsKICAgIH0KICAgIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHsKICAgICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTsKICAgIH0KICAgIC8vIGF0dHJpYnV0ZXMKICAgIGlmIChlbC5hdHRycykgewogICAgICBkYXRhICs9ICJhdHRyczoiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyAiLCI7CiAgICB9CiAgICAvLyBET00gcHJvcHMKICAgIGlmIChlbC5wcm9wcykgewogICAgICBkYXRhICs9ICJkb21Qcm9wczoiICsgKGdlblByb3BzKGVsLnByb3BzKSkgKyAiLCI7CiAgICB9CiAgICAvLyBldmVudCBoYW5kbGVycwogICAgaWYgKGVsLmV2ZW50cykgewogICAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5ldmVudHMsIGZhbHNlKSkgKyAiLCI7CiAgICB9CiAgICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7CiAgICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgIiwiOwogICAgfQogICAgLy8gc2xvdCB0YXJnZXQKICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMKICAgIGlmIChlbC5zbG90VGFyZ2V0ICYmICFlbC5zbG90U2NvcGUpIHsKICAgICAgZGF0YSArPSAic2xvdDoiICsgKGVsLnNsb3RUYXJnZXQpICsgIiwiOwogICAgfQogICAgLy8gc2NvcGVkIHNsb3RzCiAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHsKICAgICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwsIGVsLnNjb3BlZFNsb3RzLCBzdGF0ZSkpICsgIiwiOwogICAgfQogICAgLy8gY29tcG9uZW50IHYtbW9kZWwKICAgIGlmIChlbC5tb2RlbCkgewogICAgICBkYXRhICs9ICJtb2RlbDp7dmFsdWU6IiArIChlbC5tb2RlbC52YWx1ZSkgKyAiLGNhbGxiYWNrOiIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgIixleHByZXNzaW9uOiIgKyAoZWwubW9kZWwuZXhwcmVzc2lvbikgKyAifSwiOwogICAgfQogICAgLy8gaW5saW5lLXRlbXBsYXRlCiAgICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHsKICAgICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTsKICAgICAgaWYgKGlubGluZVRlbXBsYXRlKSB7CiAgICAgICAgZGF0YSArPSBpbmxpbmVUZW1wbGF0ZSArICIsIjsKICAgICAgfQogICAgfQogICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7CiAgICAvLyB2LWJpbmQgZHluYW1pYyBhcmd1bWVudCB3cmFwCiAgICAvLyB2LWJpbmQgd2l0aCBkeW5hbWljIGFyZ3VtZW50cyBtdXN0IGJlIGFwcGxpZWQgdXNpbmcgdGhlIHNhbWUgdi1iaW5kIG9iamVjdAogICAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LgogICAgaWYgKGVsLmR5bmFtaWNBdHRycykgewogICAgICBkYXRhID0gIl9iKCIgKyBkYXRhICsgIixcIiIgKyAoZWwudGFnKSArICJcIiwiICsgKGdlblByb3BzKGVsLmR5bmFtaWNBdHRycykpICsgIikiOwogICAgfQogICAgLy8gdi1iaW5kIGRhdGEgd3JhcAogICAgaWYgKGVsLndyYXBEYXRhKSB7CiAgICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTsKICAgIH0KICAgIC8vIHYtb24gZGF0YSB3cmFwCiAgICBpZiAoZWwud3JhcExpc3RlbmVycykgewogICAgICBkYXRhID0gZWwud3JhcExpc3RlbmVycyhkYXRhKTsKICAgIH0KICAgIHJldHVybiBkYXRhCiAgfQoKICBmdW5jdGlvbiBnZW5EaXJlY3RpdmVzIChlbCwgc3RhdGUpIHsKICAgIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlczsKICAgIGlmICghZGlycykgeyByZXR1cm4gfQogICAgdmFyIHJlcyA9ICdkaXJlY3RpdmVzOlsnOwogICAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTsKICAgIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lOwogICAgZm9yIChpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgIGRpciA9IGRpcnNbaV07CiAgICAgIG5lZWRSdW50aW1lID0gdHJ1ZTsKICAgICAgdmFyIGdlbiA9IHN0YXRlLmRpcmVjdGl2ZXNbZGlyLm5hbWVdOwogICAgICBpZiAoZ2VuKSB7CiAgICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC4KICAgICAgICAvLyByZXR1cm5zIHRydWUgaWYgaXQgYWxzbyBuZWVkcyBhIHJ1bnRpbWUgY291bnRlcnBhcnQuCiAgICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTsKICAgICAgfQogICAgICBpZiAobmVlZFJ1bnRpbWUpIHsKICAgICAgICBoYXNSdW50aW1lID0gdHJ1ZTsKICAgICAgICByZXMgKz0gIntuYW1lOlwiIiArIChkaXIubmFtZSkgKyAiXCIscmF3TmFtZTpcIiIgKyAoZGlyLnJhd05hbWUpICsgIlwiIiArIChkaXIudmFsdWUgPyAoIix2YWx1ZTooIiArIChkaXIudmFsdWUpICsgIiksZXhwcmVzc2lvbjoiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKCIsYXJnOiIgKyAoZGlyLmlzRHluYW1pY0FyZyA/IGRpci5hcmcgOiAoIlwiIiArIChkaXIuYXJnKSArICJcIiIpKSkgOiAnJykgKyAoZGlyLm1vZGlmaWVycyA/ICgiLG1vZGlmaWVyczoiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyAifSwiOwogICAgICB9CiAgICB9CiAgICBpZiAoaGFzUnVudGltZSkgewogICAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJwogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsLCBzdGF0ZSkgewogICAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdOwogICAgaWYgKGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMSkgewogICAgICBzdGF0ZS53YXJuKAogICAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLAogICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH0KICAgICAgKTsKICAgIH0KICAgIGlmIChhc3QgJiYgYXN0LnR5cGUgPT09IDEpIHsKICAgICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgc3RhdGUub3B0aW9ucyk7CiAgICAgIHJldHVybiAoImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXsiICsgKGlubGluZVJlbmRlckZucy5yZW5kZXIpICsgIn0sc3RhdGljUmVuZGVyRm5zOlsiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoImZ1bmN0aW9uKCl7IiArIGNvZGUgKyAifSIpOyB9KS5qb2luKCcsJykpICsgIl19IikKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzICgKICAgIGVsLAogICAgc2xvdHMsCiAgICBzdGF0ZQogICkgewogICAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgInN0YWJsZSIsIHRoaXMgYWxsb3dzIGNoaWxkCiAgICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC4KICAgIC8vIGJ1dCBpbiBzb21lIGNhc2VzIHdlIGhhdmUgdG8gYmFpbC1vdXQgb2YgdGhpcyBvcHRpbWl6YXRpb24KICAgIC8vIGZvciBleGFtcGxlIGlmIHRoZSBzbG90IGNvbnRhaW5zIGR5bmFtaWMgbmFtZXMsIGhhcyB2LWlmIG9yIHYtZm9yIG9uIHRoZW0uLi4KICAgIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gZWwuZm9yIHx8IE9iamVjdC5rZXlzKHNsb3RzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgdmFyIHNsb3QgPSBzbG90c1trZXldOwogICAgICByZXR1cm4gKAogICAgICAgIHNsb3Quc2xvdFRhcmdldER5bmFtaWMgfHwKICAgICAgICBzbG90LmlmIHx8CiAgICAgICAgc2xvdC5mb3IgfHwKICAgICAgICBjb250YWluc1Nsb3RDaGlsZChzbG90KSAvLyBpcyBwYXNzaW5nIGRvd24gc2xvdCBmcm9tIHBhcmVudCB3aGljaCBtYXkgYmUgZHluYW1pYwogICAgICApCiAgICB9KTsKCiAgICAvLyAjOTUzNDogaWYgYSBjb21wb25lbnQgd2l0aCBzY29wZWQgc2xvdHMgaXMgaW5zaWRlIGEgY29uZGl0aW9uYWwgYnJhbmNoLAogICAgLy8gaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHRvIGJlIHJldXNlZCBidXQgd2l0aCBkaWZmZXJlbnQKICAgIC8vIGNvbXBpbGVkIHNsb3QgY29udGVudC4gVG8gYXZvaWQgdGhhdCwgd2UgZ2VuZXJhdGUgYSB1bmlxdWUga2V5IGJhc2VkIG9uCiAgICAvLyB0aGUgZ2VuZXJhdGVkIGNvZGUgb2YgYWxsIHRoZSBzbG90IGNvbnRlbnRzLgogICAgdmFyIG5lZWRzS2V5ID0gISFlbC5pZjsKCiAgICAvLyBPUiB3aGVuIGl0IGlzIGluc2lkZSBhbm90aGVyIHNjb3BlZCBzbG90IG9yIHYtZm9yICh0aGUgcmVhY3Rpdml0eSBtYXkgYmUKICAgIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSkKICAgIC8vICM5NDM4LCAjOTUwNgogICAgLy8gVE9ETzogdGhpcyBjYW4gYmUgZnVydGhlciBvcHRpbWl6ZWQgYnkgcHJvcGVybHkgYW5hbHl6aW5nIGluLXNjb3BlIGJpbmRpbmdzCiAgICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuCiAgICBpZiAoIW5lZWRzRm9yY2VVcGRhdGUpIHsKICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDsKICAgICAgd2hpbGUgKHBhcmVudCkgewogICAgICAgIGlmICgKICAgICAgICAgIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHx8CiAgICAgICAgICBwYXJlbnQuZm9yCiAgICAgICAgKSB7CiAgICAgICAgICBuZWVkc0ZvcmNlVXBkYXRlID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrCiAgICAgICAgfQogICAgICAgIGlmIChwYXJlbnQuaWYpIHsKICAgICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDsKICAgICAgfQogICAgfQoKICAgIHZhciBnZW5lcmF0ZWRTbG90cyA9IE9iamVjdC5rZXlzKHNsb3RzKQogICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoc2xvdHNba2V5XSwgc3RhdGUpOyB9KQogICAgICAuam9pbignLCcpOwoKICAgIHJldHVybiAoInNjb3BlZFNsb3RzOl91KFsiICsgZ2VuZXJhdGVkU2xvdHMgKyAiXSIgKyAobmVlZHNGb3JjZVVwZGF0ZSA/ICIsbnVsbCx0cnVlIiA6ICIiKSArICghbmVlZHNGb3JjZVVwZGF0ZSAmJiBuZWVkc0tleSA/ICgiLG51bGwsZmFsc2UsIiArIChoYXNoKGdlbmVyYXRlZFNsb3RzKSkpIDogIiIpICsgIikiKQogIH0KCiAgZnVuY3Rpb24gaGFzaChzdHIpIHsKICAgIHZhciBoYXNoID0gNTM4MTsKICAgIHZhciBpID0gc3RyLmxlbmd0aDsKICAgIHdoaWxlKGkpIHsKICAgICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTsKICAgIH0KICAgIHJldHVybiBoYXNoID4+PiAwCiAgfQoKICBmdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHsKICAgIGlmIChlbC50eXBlID09PSAxKSB7CiAgICAgIGlmIChlbC50YWcgPT09ICdzbG90JykgewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KICAgICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpCiAgICB9CiAgICByZXR1cm4gZmFsc2UKICB9CgogIGZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKAogICAgZWwsCiAgICBzdGF0ZQogICkgewogICAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTsKICAgIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQgJiYgIWlzTGVnYWN5U3ludGF4KSB7CiAgICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QsICJudWxsIikKICAgIH0KICAgIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkgewogICAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdCkKICAgIH0KICAgIHZhciBzbG90U2NvcGUgPSBlbC5zbG90U2NvcGUgPT09IGVtcHR5U2xvdFNjb3BlVG9rZW4KICAgICAgPyAiIgogICAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpOwogICAgdmFyIGZuID0gImZ1bmN0aW9uKCIgKyBzbG90U2NvcGUgKyAiKXsiICsKICAgICAgInJldHVybiAiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJwogICAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXgKICAgICAgICAgID8gKCIoIiArIChlbC5pZikgKyAiKT8iICsgKGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCcpICsgIjp1bmRlZmluZWQiKQogICAgICAgICAgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnCiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgIn0iOwogICAgLy8gcmV2ZXJzZSBwcm94eSB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90cwogICAgdmFyIHJldmVyc2VQcm94eSA9IHNsb3RTY29wZSA/ICIiIDogIixwcm94eTp0cnVlIjsKICAgIHJldHVybiAoIntrZXk6IiArIChlbC5zbG90VGFyZ2V0IHx8ICJcImRlZmF1bHRcIiIpICsgIixmbjoiICsgZm4gKyByZXZlcnNlUHJveHkgKyAifSIpCiAgfQoKICBmdW5jdGlvbiBnZW5DaGlsZHJlbiAoCiAgICBlbCwKICAgIHN0YXRlLAogICAgY2hlY2tTa2lwLAogICAgYWx0R2VuRWxlbWVudCwKICAgIGFsdEdlbk5vZGUKICApIHsKICAgIHZhciBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuOwogICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkgewogICAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdOwogICAgICAvLyBvcHRpbWl6ZSBzaW5nbGUgdi1mb3IKICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJgogICAgICAgIGVsJDEuZm9yICYmCiAgICAgICAgZWwkMS50YWcgIT09ICd0ZW1wbGF0ZScgJiYKICAgICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnCiAgICAgICkgewogICAgICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSA9IGNoZWNrU2tpcAogICAgICAgICAgPyBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCQxKSA/ICIsMSIgOiAiLDAiCiAgICAgICAgICA6ICIiOwogICAgICAgIHJldHVybiAoIiIgKyAoKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpKSArIG5vcm1hbGl6YXRpb25UeXBlKQogICAgICB9CiAgICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSQxID0gY2hlY2tTa2lwCiAgICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpCiAgICAgICAgOiAwOwogICAgICB2YXIgZ2VuID0gYWx0R2VuTm9kZSB8fCBnZW5Ob2RlOwogICAgICByZXR1cm4gKCJbIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyAiXSIgKyAobm9ybWFsaXphdGlvblR5cGUkMSA/ICgiLCIgKyBub3JtYWxpemF0aW9uVHlwZSQxKSA6ICcnKSkKICAgIH0KICB9CgogIC8vIGRldGVybWluZSB0aGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgZm9yIHRoZSBjaGlsZHJlbiBhcnJheS4KICAvLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZAogIC8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSkKICAvLyAyOiBmdWxsIG5vcm1hbGl6YXRpb24gbmVlZGVkCiAgZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKAogICAgY2hpbGRyZW4sCiAgICBtYXliZUNvbXBvbmVudAogICkgewogICAgdmFyIHJlcyA9IDA7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldOwogICAgICBpZiAoZWwudHlwZSAhPT0gMSkgewogICAgICAgIGNvbnRpbnVlCiAgICAgIH0KICAgICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHwKICAgICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG5lZWRzTm9ybWFsaXphdGlvbihjLmJsb2NrKTsgfSkpKSB7CiAgICAgICAgcmVzID0gMjsKICAgICAgICBicmVhawogICAgICB9CiAgICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHwKICAgICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHsKICAgICAgICByZXMgPSAxOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBmdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7CiAgICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnCiAgfQoKICBmdW5jdGlvbiBnZW5Ob2RlIChub2RlLCBzdGF0ZSkgewogICAgaWYgKG5vZGUudHlwZSA9PT0gMSkgewogICAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlLCBzdGF0ZSkKICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAzICYmIG5vZGUuaXNDb21tZW50KSB7CiAgICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZ2VuVGV4dChub2RlKQogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkgewogICAgcmV0dXJuICgiX3YoIiArICh0ZXh0LnR5cGUgPT09IDIKICAgICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKQogICAgICA6IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhKU09OLnN0cmluZ2lmeSh0ZXh0LnRleHQpKSkgKyAiKSIpCiAgfQoKICBmdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7CiAgICByZXR1cm4gKCJfZSgiICsgKEpTT04uc3RyaW5naWZ5KGNvbW1lbnQudGV4dCkpICsgIikiKQogIH0KCiAgZnVuY3Rpb24gZ2VuU2xvdCAoZWwsIHN0YXRlKSB7CiAgICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnImRlZmF1bHQiJzsKICAgIHZhciBjaGlsZHJlbiA9IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSk7CiAgICB2YXIgcmVzID0gIl90KCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/ICgiLCIgKyBjaGlsZHJlbikgOiAnJyk7CiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyB8fCBlbC5keW5hbWljQXR0cnMKICAgICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHsKICAgICAgICAgIC8vIHNsb3QgcHJvcHMgYXJlIGNhbWVsaXplZAogICAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSwKICAgICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLAogICAgICAgICAgZHluYW1pYzogYXR0ci5keW5hbWljCiAgICAgICAgfSk7IH0pKQogICAgICA6IG51bGw7CiAgICB2YXIgYmluZCQkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQnXTsKICAgIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7CiAgICAgIHJlcyArPSAiLG51bGwiOwogICAgfQogICAgaWYgKGF0dHJzKSB7CiAgICAgIHJlcyArPSAiLCIgKyBhdHRyczsKICAgIH0KICAgIGlmIChiaW5kJCQxKSB7CiAgICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgIiwiICsgYmluZCQkMTsKICAgIH0KICAgIHJldHVybiByZXMgKyAnKScKICB9CgogIC8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnQKICBmdW5jdGlvbiBnZW5Db21wb25lbnQgKAogICAgY29tcG9uZW50TmFtZSwKICAgIGVsLAogICAgc3RhdGUKICApIHsKICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7CiAgICByZXR1cm4gKCJfYygiICsgY29tcG9uZW50TmFtZSArICIsIiArIChnZW5EYXRhJDIoZWwsIHN0YXRlKSkgKyAoY2hpbGRyZW4gPyAoIiwiICsgY2hpbGRyZW4pIDogJycpICsgIikiKQogIH0KCiAgZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7CiAgICB2YXIgc3RhdGljUHJvcHMgPSAiIjsKICAgIHZhciBkeW5hbWljUHJvcHMgPSAiIjsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHByb3AgPSBwcm9wc1tpXTsKICAgICAgdmFyIHZhbHVlID0gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKHByb3AudmFsdWUpOwogICAgICBpZiAocHJvcC5keW5hbWljKSB7CiAgICAgICAgZHluYW1pY1Byb3BzICs9IChwcm9wLm5hbWUpICsgIiwiICsgdmFsdWUgKyAiLCI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RhdGljUHJvcHMgKz0gIlwiIiArIChwcm9wLm5hbWUpICsgIlwiOiIgKyB2YWx1ZSArICIsIjsKICAgICAgfQogICAgfQogICAgc3RhdGljUHJvcHMgPSAieyIgKyAoc3RhdGljUHJvcHMuc2xpY2UoMCwgLTEpKSArICJ9IjsKICAgIGlmIChkeW5hbWljUHJvcHMpIHsKICAgICAgcmV0dXJuICgiX2QoIiArIHN0YXRpY1Byb3BzICsgIixbIiArIChkeW5hbWljUHJvcHMuc2xpY2UoMCwgLTEpKSArICJdKSIpCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gc3RhdGljUHJvcHMKICAgIH0KICB9CgogIC8vICMzODk1LCAjNDI2OAogIGZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkgewogICAgcmV0dXJuIHRleHQKICAgICAgLnJlcGxhY2UoL1x1MjAyOC9nLCAnXFx1MjAyOCcpCiAgICAgIC5yZXBsYWNlKC9cdTIwMjkvZywgJ1xcdTIwMjknKQogIH0KCiAgLyogICovCgoKCiAgLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2UKICAvLyB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkCiAgdmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXGInICsgKAogICAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArCiAgICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgKwogICAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnCiAgKS5zcGxpdCgnLCcpLmpvaW4oJ1xcYnxcXGInKSArICdcXGInKTsKCiAgLy8gdGhlc2UgdW5hcnkgb3BlcmF0b3JzIHNob3VsZCBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eS9tZXRob2QgbmFtZXMKICB2YXIgdW5hcnlPcGVyYXRvcnNSRSA9IG5ldyBSZWdFeHAoJ1xcYicgKyAoCiAgICAnZGVsZXRlLHR5cGVvZix2b2lkJwogICkuc3BsaXQoJywnKS5qb2luKCdcXHMqXFwoW15cXCldKlxcKXxcXGInKSArICdcXHMqXFwoW15cXCldKlxcKScpOwoKICAvLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zCiAgdmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXXxcXC4pKid8Iig/OlteIlxcXXxcXC4pKiJ8YCg/OlteYFxcXXxcXC4pKlwkXHt8XH0oPzpbXmBcXF18XFwuKSpgfGAoPzpbXmBcXF18XFwuKSpgL2c7CgogIC8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlCiAgZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QsIHdhcm4pIHsKICAgIGlmIChhc3QpIHsKICAgICAgY2hlY2tOb2RlKGFzdCwgd2Fybik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHsKICAgIGlmIChub2RlLnR5cGUgPT09IDEpIHsKICAgICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7CiAgICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07CiAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTsKICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd2LWZvcicpIHsKICAgICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoInYtZm9yPVwiIiArIHZhbHVlICsgIlwiIiksIHdhcm4sIHJhbmdlKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAndi1zbG90JyB8fCBuYW1lWzBdID09PSAnIycpIHsKICAgICAgICAgICAgICBjaGVja0Z1bmN0aW9uUGFyYW1ldGVyRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyAiPVwiIiArIHZhbHVlICsgIlwiIiksIHdhcm4sIHJhbmdlKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHsKICAgICAgICAgICAgICBjaGVja0V2ZW50KHZhbHVlLCAobmFtZSArICI9XCIiICsgdmFsdWUgKyAiXCIiKSwgd2FybiwgcmFuZ2UpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyAiPVwiIiArIHZhbHVlICsgIlwiIiksIHdhcm4sIHJhbmdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAobm9kZS5jaGlsZHJlbikgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIHdhcm4pOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHsKICAgICAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbiwgbm9kZS50ZXh0LCB3YXJuLCBub2RlKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNoZWNrRXZlbnQgKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHsKICAgIHZhciBzdHJpcHBlZCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKTsKICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBzdHJpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTsKICAgIGlmIChrZXl3b3JkTWF0Y2ggJiYgc3RyaXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHsKICAgICAgd2FybigKICAgICAgICAiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCB1bmFyeSBvcGVyYXRvciBhcyBwcm9wZXJ0eSBuYW1lOiAiICsKICAgICAgICAiXCIiICsgKGtleXdvcmRNYXRjaFswXSkgKyAiXCIgaW4gZXhwcmVzc2lvbiAiICsgKHRleHQudHJpbSgpKSwKICAgICAgICByYW5nZQogICAgICApOwogICAgfQogICAgY2hlY2tFeHByZXNzaW9uKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpOwogIH0KCiAgZnVuY3Rpb24gY2hlY2tGb3IgKG5vZGUsIHRleHQsIHdhcm4sIHJhbmdlKSB7CiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTsKICAgIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCB3YXJuLCByYW5nZSk7CiAgICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjEsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTsKICAgIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpOwogIH0KCiAgZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyICgKICAgIGlkZW50LAogICAgdHlwZSwKICAgIHRleHQsCiAgICB3YXJuLAogICAgcmFuZ2UKICApIHsKICAgIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnKSB7CiAgICAgIHRyeSB7CiAgICAgICAgbmV3IEZ1bmN0aW9uKCgidmFyICIgKyBpZGVudCArICI9XyIpKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHdhcm4oKCJpbnZhbGlkICIgKyB0eXBlICsgIiBcIiIgKyBpZGVudCArICJcIiBpbiBleHByZXNzaW9uOiAiICsgKHRleHQudHJpbSgpKSksIHJhbmdlKTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7CiAgICB0cnkgewogICAgICBuZXcgRnVuY3Rpb24oKCJyZXR1cm4gIiArIGV4cCkpOwogICAgfSBjYXRjaCAoZSkgewogICAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpOwogICAgICBpZiAoa2V5d29yZE1hdGNoKSB7CiAgICAgICAgd2FybigKICAgICAgICAgICJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogIiArCiAgICAgICAgICAiXCIiICsgKGtleXdvcmRNYXRjaFswXSkgKyAiXCJcbiAgUmF3IGV4cHJlc3Npb246ICIgKyAodGV4dC50cmltKCkpLAogICAgICAgICAgcmFuZ2UKICAgICAgICApOwogICAgICB9IGVsc2UgewogICAgICAgIHdhcm4oCiAgICAgICAgICAiaW52YWxpZCBleHByZXNzaW9uOiAiICsgKGUubWVzc2FnZSkgKyAiIGluXG5cbiIgKwogICAgICAgICAgIiAgICAiICsgZXhwICsgIlxuXG4iICsKICAgICAgICAgICIgIFJhdyBleHByZXNzaW9uOiAiICsgKHRleHQudHJpbSgpKSArICJcbiIsCiAgICAgICAgICByYW5nZQogICAgICAgICk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGNoZWNrRnVuY3Rpb25QYXJhbWV0ZXJFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7CiAgICB0cnkgewogICAgICBuZXcgRnVuY3Rpb24oZXhwLCAnJyk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHdhcm4oCiAgICAgICAgImludmFsaWQgZnVuY3Rpb24gcGFyYW1ldGVyIGV4cHJlc3Npb246ICIgKyAoZS5tZXNzYWdlKSArICIgaW5cblxuIiArCiAgICAgICAgIiAgICAiICsgZXhwICsgIlxuXG4iICsKICAgICAgICAiICBSYXcgZXhwcmVzc2lvbjogIiArICh0ZXh0LnRyaW0oKSkgKyAiXG4iLAogICAgICAgIHJhbmdlCiAgICAgICk7CiAgICB9CiAgfQoKICAvKiAgKi8KCiAgdmFyIHJhbmdlID0gMjsKCiAgZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUgKAogICAgc291cmNlLAogICAgc3RhcnQsCiAgICBlbmQKICApIHsKICAgIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDsKICAgIGlmICggZW5kID09PSB2b2lkIDAgKSBlbmQgPSBzb3VyY2UubGVuZ3RoOwoKICAgIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXHI/XG4vKTsKICAgIHZhciBjb3VudCA9IDA7CiAgICB2YXIgcmVzID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7CiAgICAgIGlmIChjb3VudCA+PSBzdGFydCkgewogICAgICAgIGZvciAodmFyIGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHsKICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgeyBjb250aW51ZSB9CiAgICAgICAgICByZXMucHVzaCgoIiIgKyAoaiArIDEpICsgKHJlcGVhdCQxKCIgIiwgMyAtIFN0cmluZyhqICsgMSkubGVuZ3RoKSkgKyAifCAgIiArIChsaW5lc1tqXSkpKTsKICAgICAgICAgIHZhciBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoOwogICAgICAgICAgaWYgKGogPT09IGkpIHsKICAgICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmUKICAgICAgICAgICAgdmFyIHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxOwogICAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQ7CiAgICAgICAgICAgIHJlcy5wdXNoKCIgICB8ICAiICsgcmVwZWF0JDEoIiAiLCBwYWQpICsgcmVwZWF0JDEoIl4iLCBsZW5ndGgpKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHsKICAgICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7CiAgICAgICAgICAgICAgdmFyIGxlbmd0aCQxID0gTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpOwogICAgICAgICAgICAgIHJlcy5wdXNoKCIgICB8ICAiICsgcmVwZWF0JDEoIl4iLCBsZW5ndGgkMSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBicmVhawogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzLmpvaW4oJ1xuJykKICB9CgogIGZ1bmN0aW9uIHJlcGVhdCQxIChzdHIsIG4pIHsKICAgIHZhciByZXN1bHQgPSAnJzsKICAgIGlmIChuID4gMCkgewogICAgICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICAgICAgaWYgKG4gJiAxKSB7IHJlc3VsdCArPSBzdHI7IH0KICAgICAgICBuID4+Pj0gMTsKICAgICAgICBpZiAobiA8PSAwKSB7IGJyZWFrIH0KICAgICAgICBzdHIgKz0gc3RyOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0CiAgfQoKICAvKiAgKi8KCgoKICBmdW5jdGlvbiBjcmVhdGVGdW5jdGlvbiAoY29kZSwgZXJyb3JzKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKGNvZGUpCiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTsKICAgICAgcmV0dXJuIG5vb3AKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4gKGNvbXBpbGUpIHsKICAgIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9ucyAoCiAgICAgIHRlbXBsYXRlLAogICAgICBvcHRpb25zLAogICAgICB2bQogICAgKSB7CiAgICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpOwogICAgICB2YXIgd2FybiQkMSA9IG9wdGlvbnMud2FybiB8fCB3YXJuOwogICAgICBkZWxldGUgb3B0aW9ucy53YXJuOwoKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgIHsKICAgICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uCiAgICAgICAgdHJ5IHsKICAgICAgICAgIG5ldyBGdW5jdGlvbigncmV0dXJuIDEnKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkgewogICAgICAgICAgICB3YXJuJCQxKAogICAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICsKICAgICAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArCiAgICAgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICsKICAgICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArCiAgICAgICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJwogICAgICAgICAgICApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gY2hlY2sgY2FjaGUKICAgICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVycwogICAgICAgID8gU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVycykgKyB0ZW1wbGF0ZQogICAgICAgIDogdGVtcGxhdGU7CiAgICAgIGlmIChjYWNoZVtrZXldKSB7CiAgICAgICAgcmV0dXJuIGNhY2hlW2tleV0KICAgICAgfQoKICAgICAgLy8gY29tcGlsZQogICAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTsKCiAgICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzCiAgICAgIHsKICAgICAgICBpZiAoY29tcGlsZWQuZXJyb3JzICYmIGNvbXBpbGVkLmVycm9ycy5sZW5ndGgpIHsKICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7CiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgd2FybiQkMSgKICAgICAgICAgICAgICAgICJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XG5cbiIgKyAoZS5tc2cpICsgIlxuXG4iICsKICAgICAgICAgICAgICAgIGdlbmVyYXRlQ29kZUZyYW1lKHRlbXBsYXRlLCBlLnN0YXJ0LCBlLmVuZCksCiAgICAgICAgICAgICAgICB2bQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgd2FybiQkMSgKICAgICAgICAgICAgICAiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxuXG4iICsgdGVtcGxhdGUgKyAiXG5cbiIgKwogICAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuICgiLSAiICsgZSk7IH0pLmpvaW4oJ1xuJykgKyAnXG4nLAogICAgICAgICAgICAgIHZtCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChjb21waWxlZC50aXBzICYmIGNvbXBpbGVkLnRpcHMubGVuZ3RoKSB7CiAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkgewogICAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbXBpbGVkLnRpcHMuZm9yRWFjaChmdW5jdGlvbiAobXNnKSB7IHJldHVybiB0aXAobXNnLCB2bSk7IH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gdHVybiBjb2RlIGludG8gZnVuY3Rpb25zCiAgICAgIHZhciByZXMgPSB7fTsKICAgICAgdmFyIGZuR2VuRXJyb3JzID0gW107CiAgICAgIHJlcy5yZW5kZXIgPSBjcmVhdGVGdW5jdGlvbihjb21waWxlZC5yZW5kZXIsIGZuR2VuRXJyb3JzKTsKICAgICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHsKICAgICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpCiAgICAgIH0pOwoKICAgICAgLy8gY2hlY2sgZnVuY3Rpb24gZ2VuZXJhdGlvbiBlcnJvcnMuCiAgICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuCiAgICAgIC8vIG1vc3RseSBmb3IgY29kZWdlbiBkZXZlbG9wbWVudCB1c2UKICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgIHsKICAgICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkgewogICAgICAgICAgd2FybiQkMSgKICAgICAgICAgICAgIkZhaWxlZCB0byBnZW5lcmF0ZSByZW5kZXIgZnVuY3Rpb246XG5cbiIgKwogICAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikgewogICAgICAgICAgICAgIHZhciBlcnIgPSByZWYuZXJyOwogICAgICAgICAgICAgIHZhciBjb2RlID0gcmVmLmNvZGU7CgogICAgICAgICAgICAgIHJldHVybiAoKGVyci50b1N0cmluZygpKSArICIgaW5cblxuIiArIGNvZGUgKyAiXG4iKTsKICAgICAgICAgIH0pLmpvaW4oJ1xuJyksCiAgICAgICAgICAgIHZtCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIChjYWNoZVtrZXldID0gcmVzKQogICAgfQogIH0KCiAgLyogICovCgogIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciAoYmFzZUNvbXBpbGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVDb21waWxlciAoYmFzZU9wdGlvbnMpIHsKICAgICAgZnVuY3Rpb24gY29tcGlsZSAoCiAgICAgICAgdGVtcGxhdGUsCiAgICAgICAgb3B0aW9ucwogICAgICApIHsKICAgICAgICB2YXIgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7CiAgICAgICAgdmFyIGVycm9ycyA9IFtdOwogICAgICAgIHZhciB0aXBzID0gW107CgogICAgICAgIHZhciB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkgewogICAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTsKICAgICAgICB9OwoKICAgICAgICBpZiAob3B0aW9ucykgewogICAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHsKICAgICAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lCiAgICAgICAgICAgIHZhciBsZWFkaW5nU3BhY2VMZW5ndGggPSB0ZW1wbGF0ZS5tYXRjaCgvXlxzKi8pWzBdLmxlbmd0aDsKCiAgICAgICAgICAgIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7CiAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7IG1zZzogbXNnIH07CiAgICAgICAgICAgICAgaWYgKHJhbmdlKSB7CiAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBkYXRhLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgZGF0YS5lbmQgPSByYW5nZS5lbmQgKyBsZWFkaW5nU3BhY2VMZW5ndGg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKGRhdGEpOwogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIG1vZHVsZXMKICAgICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHsKICAgICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPQogICAgICAgICAgICAgIChiYXNlT3B0aW9ucy5tb2R1bGVzIHx8IFtdKS5jb25jYXQob3B0aW9ucy5tb2R1bGVzKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzCiAgICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVzKSB7CiAgICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKAogICAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSwKICAgICAgICAgICAgICBvcHRpb25zLmRpcmVjdGl2ZXMKICAgICAgICAgICAgKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIGNvcHkgb3RoZXIgb3B0aW9ucwogICAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKGtleSAhPT0gJ21vZHVsZXMnICYmIGtleSAhPT0gJ2RpcmVjdGl2ZXMnKSB7CiAgICAgICAgICAgICAgZmluYWxPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gd2FybjsKCiAgICAgICAgdmFyIGNvbXBpbGVkID0gYmFzZUNvbXBpbGUodGVtcGxhdGUudHJpbSgpLCBmaW5hbE9wdGlvbnMpOwogICAgICAgIHsKICAgICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QsIHdhcm4pOwogICAgICAgIH0KICAgICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7CiAgICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7CiAgICAgICAgcmV0dXJuIGNvbXBpbGVkCiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgY29tcGlsZTogY29tcGlsZSwKICAgICAgICBjb21waWxlVG9GdW5jdGlvbnM6IGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4oY29tcGlsZSkKICAgICAgfQogICAgfQogIH0KCiAgLyogICovCgogIC8vIGBjcmVhdGVDb21waWxlckNyZWF0b3JgIGFsbG93cyBjcmVhdGluZyBjb21waWxlcnMgdGhhdCB1c2UgYWx0ZXJuYXRpdmUKICAvLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuCiAgLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuCiAgdmFyIGNyZWF0ZUNvbXBpbGVyID0gY3JlYXRlQ29tcGlsZXJDcmVhdG9yKGZ1bmN0aW9uIGJhc2VDb21waWxlICgKICAgIHRlbXBsYXRlLAogICAgb3B0aW9ucwogICkgewogICAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7CiAgICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHsKICAgICAgb3B0aW1pemUoYXN0LCBvcHRpb25zKTsKICAgIH0KICAgIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTsKICAgIHJldHVybiB7CiAgICAgIGFzdDogYXN0LAogICAgICByZW5kZXI6IGNvZGUucmVuZGVyLAogICAgICBzdGF0aWNSZW5kZXJGbnM6IGNvZGUuc3RhdGljUmVuZGVyRm5zCiAgICB9CiAgfSk7CgogIC8qICAqLwoKICB2YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7CiAgdmFyIGNvbXBpbGUgPSByZWYkMS5jb21waWxlOwogIHZhciBjb21waWxlVG9GdW5jdGlvbnMgPSByZWYkMS5jb21waWxlVG9GdW5jdGlvbnM7CgogIC8qICAqLwoKICAvLyBjaGVjayB3aGV0aGVyIGN1cnJlbnQgYnJvd3NlciBlbmNvZGVzIGEgY2hhciBpbnNpZGUgYXR0cmlidXRlIHZhbHVlcwogIHZhciBkaXY7CiAgZnVuY3Rpb24gZ2V0U2hvdWxkRGVjb2RlIChocmVmKSB7CiAgICBkaXYgPSBkaXYgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/ICI8YSBocmVmPVwiXG5cIi8+IiA6ICI8ZGl2IGE9XCJcblwiLz4iOwogICAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZignJiMxMDsnKSA+IDAKICB9CgogIC8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0CiAgdmFyIHNob3VsZERlY29kZU5ld2xpbmVzID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKGZhbHNlKSA6IGZhbHNlOwogIC8vICM2ODI4OiBjaHJvbWUgZW5jb2RlcyBjb250ZW50IGluIGFbaHJlZl0KICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7CgogIC8qICAqLwoKICB2YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkgewogICAgdmFyIGVsID0gcXVlcnkoaWQpOwogICAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTAogIH0pOwoKICB2YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDsKICBWdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uICgKICAgIGVsLAogICAgaHlkcmF0aW5nCiAgKSB7CiAgICBlbCA9IGVsICYmIHF1ZXJ5KGVsKTsKCiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7CiAgICAgIHdhcm4oCiAgICAgICAgIkRvIG5vdCBtb3VudCBWdWUgdG8gPGh0bWw+IG9yIDxib2R5PiAtIG1vdW50IHRvIG5vcm1hbCBlbGVtZW50cyBpbnN0ZWFkLiIKICAgICAgKTsKICAgICAgcmV0dXJuIHRoaXMKICAgIH0KCiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7CiAgICAvLyByZXNvbHZlIHRlbXBsYXRlL2VsIGFuZCBjb252ZXJ0IHRvIHJlbmRlciBmdW5jdGlvbgogICAgaWYgKCFvcHRpb25zLnJlbmRlcikgewogICAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlOwogICAgICBpZiAodGVtcGxhdGUpIHsKICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykgewogICAgICAgICAgaWYgKHRlbXBsYXRlLmNoYXJBdCgwKSA9PT0gJyMnKSB7CiAgICAgICAgICAgIHRlbXBsYXRlID0gaWRUb1RlbXBsYXRlKHRlbXBsYXRlKTsKICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovCiAgICAgICAgICAgIGlmICghdGVtcGxhdGUpIHsKICAgICAgICAgICAgICB3YXJuKAogICAgICAgICAgICAgICAgKCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogIiArIChvcHRpb25zLnRlbXBsYXRlKSksCiAgICAgICAgICAgICAgICB0aGlzCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHsKICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB7CiAgICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChlbCkgewogICAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTsKICAgICAgfQogICAgICBpZiAodGVtcGxhdGUpIHsKICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8KICAgICAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHsKICAgICAgICAgIG1hcmsoJ2NvbXBpbGUnKTsKICAgICAgICB9CgogICAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnModGVtcGxhdGUsIHsKICAgICAgICAgIG91dHB1dFNvdXJjZVJhbmdlOiAiZGV2ZWxvcG1lbnQiICE9PSAncHJvZHVjdGlvbicsCiAgICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lczogc2hvdWxkRGVjb2RlTmV3bGluZXMsCiAgICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiwKICAgICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVycywKICAgICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzCiAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7CiAgICAgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7CiAgICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7CiAgICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7CgogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLwogICAgICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykgewogICAgICAgICAgbWFyaygnY29tcGlsZSBlbmQnKTsKICAgICAgICAgIG1lYXN1cmUoKCJ2dWUgIiArICh0aGlzLl9uYW1lKSArICIgY29tcGlsZSIpLCAnY29tcGlsZScsICdjb21waWxlIGVuZCcpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIG1vdW50LmNhbGwodGhpcywgZWwsIGh5ZHJhdGluZykKICB9OwoKICAvKioKICAgKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZQogICAqIG9mIFNWRyBlbGVtZW50cyBpbiBJRSBhcyB3ZWxsLgogICAqLwogIGZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHsKICAgIGlmIChlbC5vdXRlckhUTUwpIHsKICAgICAgcmV0dXJuIGVsLm91dGVySFRNTAogICAgfSBlbHNlIHsKICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTsKICAgICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUwKICAgIH0KICB9CgogIFZ1ZS5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zOwoKICByZXR1cm4gVnVlOwoKfSkpOwo="},{"meta":{"name":"vue.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js","ts":1605621954166,"mimetype":"text/javascript"},"source":""}]},{"name":"Greasyfork Search with Sleazyfork Results include","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["greasyfork.org","sleazyfork.org"],"orig_excludes":[],"orig_includes":["http*://greasyfork.org/*","http*://www.greasyfork.org/*","http*://sleazyfork.org/*","http*://www.sleazyfork.org/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1598513653481,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/23840-greasyfork-search-with-sleazyfork-results-include/code/Greasyfork%20Search%20with%20Sleazyfork%20Results%20include.user.js","uuid":"b8173e42-ceb0-4b8b-858c-0c5fa2877992","source":""},{"name":"🔥持续更新🔥 CSDN广告完全过滤、人性化脚本优化：🆕 不用再登录了！让你体验令人惊喜的崭新CSDN。","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["www.csdn.net"],"orig_excludes":[],"orig_includes":["*://*.csdn.net/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1598513668513,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/zh-CN/scripts/378351/code/script.user.js","uuid":"9186a8d5-53a7-4bb3-bc5c-2de95ebf8450","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDwn5Sl5oyB57ut5pu05paw8J+UpSBDU0RO5bm/5ZGK5a6M5YWo6L+H5ruk44CB5Lq65oCn5YyW6ISa5pys5LyY5YyW77ya8J+GlSDkuI3nlKjlho3nmbvlvZXkuobvvIHorqnkvaDkvZPpqozku6Tkurrmg4rllpznmoTltK3mlrBDU0RO44CCCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9naXRodWIuY29tL2FkbGVyZWQKLy8gQHZlcnNpb24gICAgICAzLjQuMwovLyBAZGVzY3JpcHRpb24gIOKaoe+4j+aLpeacieaVsOmhueeLrOWutuWKn+iDveeahOacgOW8ukNTRE7ohJrmnKzvvIzkuI3mnI3mr5TkuIDmr5TimqHvuI988J+VtuaXoOmcgOeZu+W9lUNTRE7vvIzojrflvpfmr5TkvJrlkZjmm7TkvbPnmoTkvZPpqox88J+WpeWIhui+qOeOh+iHqumAgumFje+8jOWIhuWxj+S4jeeUqOa7muWKqHzwn5K+6LaF57qn6aKE5LyY5YyWfPCflJbni6zlrrbotoXnuqflhY3kvJrlkZh88J+Pt+eLrOWutuWOn+WIm+aWh+eroOWFjeeZu+W9leWxleW8gHzwn5SM54us5a625o6o6I2Q5YaF5a656Ieq55Sx5byA5YWzfPCfk6Dni6zlrrblhY3nmbvlvZXlpI3liLZ88J+Ul+eLrOWutumYsuWklumTvumHjeWumuWQkXzwn5Od54us5a626K665Z2b5pyq55m75b2V6Ieq5Yqo5bGV5byA5paH56ug44CB6K+E6K66fPCfjLXlhajpnaLlh4DljJZ88J+TiOayiea1uOmYheivu3zwn6e05YeA5YyW5Ymq6LS05p2/fPCfk5XkvZzogIXkv6Hmga/mlofnq6Dpobbpg6jlsZXnpLoKLy8gQGF1dGhvciAgICAgICBBZGxlcgovLyBAY29ubmVjdCAgICAgIHd3dy5jc2RuLm5ldAovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmNzZG4ubmV0LyoKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2pxdWVyeS5jb29raWUvanF1ZXJ5LmNvb2tpZS5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vbnByb2dyZXNzQDAuMi4wL25wcm9ncmVzcy5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vY2xpcGJvYXJkQDIuMC42L2Rpc3QvY2xpcGJvYXJkLm1pbi5qcwovLyBAc3VwcG9ydFVSTCAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hZGxlcmVkL0NTRE5HcmVlbmVyL2lzc3Vlcy9uZXc/YXNzaWduZWVzPWFkbGVyZWQmbGFiZWxzPWhlbHArd2FudGVkJnRlbXBsYXRlPUlTU1VFX1RFTVBMQVRFLm1kJnRpdGxlPQovLyBAY29udHJpYnV0aW9uVVJMIGh0dHBzOi8vZG9jLnN0YWNrb3ZlcmZsb3cud2lraS93ZWIvIy8yMT9wYWdlX2lkPTEzOAovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBub3RlICAgICAgICAgMjAtMTAtMjMgMy40LjMg6YCC5bqU5paw54mIQ1NETu+8jOWOu+mZpOS4u+mhteWSjOeZu+W9lemhteW5v+WRiu+8jOS7peWPiueZu+W9leaPkOekuu+8jOW5tuenu+mZpOW6lemDqOS/oeaBrwovLyBAbm90ZSAgICAgICAgIDIwLTEwLTIwIDMuNC4yIOWIoOmZpOWPs+S+p+W5v+WRigovLyBAbm90ZSAgICAgICAgIDIwLTA5LTI2IDMuNC4xIOS/ruaUueaOkueJiOiuvuWumu+8jOS/ruWkjeeZu+W9leahhuW8ueWHuueahOmXrumimAovLyBAbm90ZSAgICAgICAgIDIwLTA5LTI0IDMuNC4wIOe0p+aApeS/ruWkjeeUseS6jkNTRE7liY3nq6/moLflvI/kv67mlLnlr7zoh7Torr7lrprlvIDlhbPkuKLlpLHnmoTpl67popgKLy8gQG5vdGUgICAgICAgICAyMC0wOC0yNyAzLjMuOSDntKfmgKXkv67lpI3nlLHkuo5DU0RO5YmN56uv5qC35byP5L+u5pS55a+86Ie06ISa5pys5aSx5pWI55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMjAtMDgtMjYgMy4zLjgg5ZCI5rOV6ISa5pys5o+Q56S6Ci8vIEBub3RlICAgICAgICAgMjAtMDctMjAgMy4zLjcg5L+u5aSN6I+c5Y2V5qCP5Zyo5Yib5L2c5Lit5b+D5pi+56S65byC5bi455qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMjAtMDctMTggMy4zLjYg5bel5YW3566x5oyJ6ZKu5LyY5YyWCi8vIEBub3RlICAgICAgICAgMjAtMDctMDUgMy4zLjUg6K+E6K665aSN5Yi25Yqf6IO95Lqk5LqS5LyY5YyWCi8vIEBub3RlICAgICAgICAgMjAtMDctMDQgMy4zLjQg5L+u5aSN5Y+z5L6n5qCP5raI5aSx55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMjAtMDctMDMgMy4zLjMg5paw5aKe5aSN5Yi26K+E6K665Yqf6IO977yB5Yig6Zmk6aG26YOo5bm/5ZGKCi8vIEBub3RlICAgICAgICAgMjAtMDYtMjggMy4zLjIg5o+Q56S65L+u5pS5Ci8vIEBub3RlICAgICAgICAgMjAtMDYtMjcgMy4zLjEg5by556qX5o+Q56S66YC76L6R5L+u5pS55Li65LuF5o+Q56S65LiA5qyh44CCCi8vIEBub3RlICAgICAgICAgMjAtMDYtMjcgMy4zLjAg572R56uZ5qCH6aKY5paw5raI5oGv5o+Q6YaS5Y676ZmkCi8vIEBub3RlICAgICAgICAgMjAtMDYtMjYgMy4yLjkg5oGi5aSNR3JlYXN5Rm9ya+W5s+WPsOiEmuacrOaUr+aMgQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTIxIDMuMi4wIOiEmuacrOi/geenu+mAmuefpQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTIxIDMuMS45IOWinuWKoOiHquWKqOmakOiXj+W6leagj+WKn+iDvQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTIxIDMuMS44IOWinuWKoOiHquWKqOmakOiXj+mhtuagj+WKn+iDve+8jOS/ruWkjemAiemhueeql+WPo+iiq+eCuei1numVv+adoeaMoeS9j+eahEJ1Z++8jOmAiemhueeql+WPo+W4g+WxgOS/ruaUuQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTIwIDMuMS43IOiuvue9rueql+WPo+Wkp+Wwj+WbuuWumu+8jOWinuWKoOaJk+i1j+WFpeWPowovLyBAbm90ZSAgICAgICAgIDIwLTA2LTE5IDMuMS42IOaYvuekuuaOqOiNkOWGheWuueaMiemSruWbnuW9ku+8jOaWsOW4g+WxgOe0p+aApeS/ruWkjQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTE4IDMuMS41IOiHquWumuS5ieWKn+iDveabtOaWsAovLyBAbm90ZSAgICAgICAgIDIwLTA2LTE2IDMuMS40IOaUr+aMgeWkp+mDqOWIhuWKn+iDveaooeWdl+WMluaYvuekugovLyBAbm90ZSAgICAgICAgIDIwLTA2LTE0IDMuMS4zIOe7v+WMluiuvuWumuS8mOWMlgovLyBAbm90ZSAgICAgICAgIDIwLTA2LTE0IDMuMS4yIElTU1VF5qih5p2/6LCD5pW0U3VwcG9ydCBVUkwKLy8gQG5vdGUgICAgICAgICAyMC0wNi0xNCAzLjEuMSDlop7liqDmkJzljZrkuLvmlofnq6DmqKHlnZcKLy8gQG5vdGUgICAgICAgICAyMC0wNi0xMyAzLjEuMCDkv67lpI3orr7nva7ov4fmnJ/nmoTpl67popgKLy8gQG5vdGUgICAgICAgICAyMC0wNi0xMiAzLjAuOSDmoIfpopjlm57mu5oKLy8gQG5vdGUgICAgICAgICAyMC0wNi0xMiAzLjAuOCDkuLvpobXlub/lkYrliKDpmaTvvIznu7/ljJborr7nva7ku4XmmL7npLrlnKjmlofnq6DpobXpnaLvvIzliKDpmaTpobXohJrvvIzpobbpg6jkvJjljJbvvIzoi6XlubLnu4boioLkvJjljJYKLy8gQG5vdGUgICAgICAgICAyMC0wNi0xMSAzLjAuNyDlop7liqDlrpjmlrlRUeS6pOa1gee+pO+8jOWinuWKoOWFs+mXreW8uuWItueZveiJsuS4u+mimOWKn+iDvQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTExIDMuMC42IOeUqOaIt+WQjeeJh+WKn+iDveS8mOWMlgovLyBAbm90ZSAgICAgICAgIDIwLTA2LTExIDMuMC41IOS8mOWMluWKoOi9vemAn+W6pgovLyBAbm90ZSAgICAgICAgIDIwLTA2LTEwIDMuMC40IOS/ruWkjeiuvue9rueVjOmdoumBruaMoeeahOmXrumimO+8jOaYvuekuuWNmuS4u+WktOWDjwovLyBAbm90ZSAgICAgICAgIDIwLTA2LTA5IDMuMC4zIOm7mOiupOiuvuWumuS/ruaUuQovLyBAbm90ZSAgICAgICAgIDIwLTA2LTA5IDMuMC4yIOS/ruWkjeaOqOiNkOWGheWuueaMiemSruWIt+aWsOS4jeeUn+aViOeahOmXrumimO+8jOWinuWKoOW3peWFt+euseaPkOekuuahhgovLyBAbm90ZSAgICAgICAgIDIwLTA2LTA4IDMuMC4xIOiuvue9ruS4reW/g+aOqOWHuu+8geWinuWKoOa1j+iniOaViOaenOmAiemhuSAmJiBHcmVlbiBCb29rIEljb24gVXBkYXRlCi8vIEBub3RlICAgICAgICAgMjAtMDYtMDggMy4wLjAg6K6+572u5Lit5b+D5o6o5Ye677yB5aKe5Yqg5rWP6KeI5pWI5p6c6YCJ6aG5Ci8vIEBub3RlICAgICAgICAgMjAtMDYtMDcgMi40LjIg6K6+572u6Kej6ICm77yM5LiL5Liq54mI5pys5pCe6YWN572u5Lit5b+DCi8vIEBub3RlICAgICAgICAgMjAtMDYtMDYgMi40LjEg5L+u5aSN5paH56ug5YaF5a655raI5aSx55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMjAtMDYtMDQgMi40LjAg5L+u5aSN5o6o6I2Q5oyJ6ZKu6ZSZ5L2N55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMjAtMDYtMDQgMi4zLjkg56qE5bGP6YCC6YWN5LyY5YyWCi8vIEBub3RlICAgICAgICAgMjAtMDYtMDQgMi4zLjgg6buR5aSc5qih5byP5Ye6546w6Zeu6aKY77yM57Sn5oCl5Zue5qGj5YiwIDIuMy42Ci8vIEBub3RlICAgICAgICAgMjAtMDYtMDMgMi4zLjcg5oSf6LCiIEBBbGV4TFdUIOWinuWKoOm7keaal+aooeW8jwovLyBAbm90ZSAgICAgICAgIDIwLTA2LTAyIDIuMy42IEFkc0J5R29vZ2xlIOWIoOmZpAovLyBAbm90ZSAgICAgICAgIDIwLTA1LTI1IDIuMy41IOaEn+iwoiBAUnlhbklQTyDkv67lpI0gQ2Fubm90IHJlYWQgcHJvcGVydHkgJ3JlcGxhY2UnIG9mIHVuZGVmaW5lZCDmiqXplJnnmoTpl67popgKLy8gQG5vdGUgICAgICAgICAyMC0wNS0yNCAyLjMuNCDkv67lpI3lhY3nmbvlvZXlpI3liLblip/og70KLy8gQG5vdGUgICAgICAgICAyMC0wNS0yMiAyLjMuMyBMb2dv5LiO6IOM5pmv5ZCM5q2lCi8vIEBub3RlICAgICAgICAgMjAtMDUtMjIgMi4zLjIg5rex5bqm5Yig6Zmk6IOM5pmvCi8vIEBub3RlICAgICAgICAgMjAtMDUtMjAgMi4zLjEg6YCa6L+HcmVxdWlyZeS9v+eUqE5Qcm9ncmVzcwovLyBAbm90ZSAgICAgICAgIDIwLTA1LTIwIDIuMy4wIOaYvuekuuaOqOiNkOWGheWuueaMiemSruagt+W8j+WGhee9ru+8jOWJlOmZpENETgovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE3IDIuMi45IOi/m+W6puadoeagt+W8j+abtOaWsO+8jOaXtumXtOW7tuaXtuS8mOWMlgovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE3IDIuMi44IOabtOaWsOiEmuacrOaPj+i/sO+8jOWxleW8gOivhOiuuueahOaJgOacieWbnuWkje+8jOWIoOmZpOWIm+S9nOS4reW/g+aMiemSru+8jOWKoOi9vei/m+W6puadoQovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE3IDIuMi43IOabtOaWsOiEmuacrOaPj+i/sAovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE2IDIuMi42IOS/ruWkjeesrOS4gOasoeeCueWHu+aYvuekuuaOqOiNkOWGheWuueaXoOWPjeW6lOeahOmXrumimAovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE2IDIuMi41IOWIoOmZpOaKouaymeWPkeinkuagh++8jOS/ruaUueaYvuekuuaOqOiNkOWGheWuueaMiemSruagt+W8jwovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE2IDIuMi40IOaEn+iwouadpeiHqkdpdEh1YueahOaci+WPi+KAnEhlcm9uWmhhbmfigJ3nmoRJc3N1ZeW7uuiuru+8jOWIoOmZpOaJgOacieWNmuWuouiKsemHjOiDoeWTqOeahOiDjOaZr++8jOS4u+mhteWIhuexu+S4reW5v+WRiua4hemZpO+8jENTU+agt+W8j+aOp+WItuWuveW6pumAgumFjeS7o+eggeS8mOWMlgovLyBAbm90ZSAgICAgICAgIDIwLTA1LTE2IDIuMi4zIOaEn+iwouadpeiHqkdpdEh1YueahOaci+WPi+KAnFJldGlyZWRXb3JsZOKAneeahOS7o+eggei0oeeMru+8jOS9v+eUqENTU+adpeaOp+WItuagt+W8j++8jOiAjOS4jeaYr0pT77yM5aKe5aSn54G15rS75oCn44CCCi8vIEBub3RlICAgICAgICAgMjAtMDUtMTMgMi4yLjIg5bGP6JS95oKo55qE57yp5pS+5LiN5pivMTAwJeeahOaPkOekugovLyBAbm90ZSAgICAgICAgIDIwLTA0LTI5IDIuMi4xIOaEn+iwouWkp+WutueahOaUr+aMge+8jOWinuWKoOebruW9leaYvuekuu+8jOiHquWKqOWIpOaWreaYr+WQpuWtmOWcqOebruW9leiwg+aVtOmhtemdouWuveW6pu+8jOWxj+iUveaWsOWinuW5v+WRiu+8jOasoui/juWkp+WutuS9k+mqjOW5tuaPkOWHuuaEj+inge+8gQovLyBAbm90ZSAgICAgICAgIDIwLTA0LTE1IDIuMi4wIOS4gOS6m+W5v+WRiuiiq+WFtuS7luaPkuS7tuWxj+iUveWvvOiHtOeahOW8guW4uOaXoOinhuS5iwovLyBAbm90ZSAgICAgICAgIDIwLTAzLTMwIDIuMS45IOW5suaOieKAnOiusOW9leS9oOeahOWIm+S9nOWOhueoi+KAne+8jOW5suaOieacqueZu+W9leaDheWGteS4i+eahOinkuagh+aPkOmGkgovLyBAbm90ZSAgICAgICAgIDIwLTAzLTEzIDIuMS44IOeqhOWxj+mAgumFjeWKoOW8ugovLyBAbm90ZSAgICAgICAgIDIwLTAzLTEzIDIuMS43IOabtOaWsOeugOS7iwovLyBAbm90ZSAgICAgICAgIDIwLTAzLTEyIDIuMS42IOWuveW6puiHqumAguW6lO+8iOaEn+iwouadpeiHqkdpdEh1YueahOaci+WPi0xlb25HN+eahOW7uuiuru+8ie+8geS/ruWkjeWJqui0tOadv+WHgOWMluaXoOaViOeahOmXrumimOOAggovLyBAbm90ZSAgICAgICAgIDIwLTAzLTA0IDIuMS41IOmAgumFjUFkR3VhcmQKLy8gQG5vdGUgICAgICAgICAyMC0wMi0yNyAyLjEuNCDkvJjljJblhY3nmbvlvZXlpI3liLYKLy8gQG5vdGUgICAgICAgICAyMC0wMi0yNSAyLjEuMyDlhY3nmbvlvZXlpI3liLbmm7TmlrDvvIznjrDlt7Llj6/nlKgKLy8gQG5vdGUgICAgICAgICAyMC0wMi0yNCAyLjEuMiBCeSBHaXRodWJASmFsaW5XYW5nIOabtOaUueWOu+mZpOWJqui0tOadv+WKq+aMgeeahOaWueW8j++8jOS9v+W+l+WOn+aWh+agvOW8j+WcqOWkjeWItuaXtuiDveWkn+S/neeVmQovLyBAbm90ZSAgICAgICAgIDIwLTAyLTIyIDIuMS4xIOe0p+aApeS/ruWkjeeUseS6jiBDU0ROIOS/ruaUueWJjeerr+e7k+aehOWvvOiHtOeahOaWh+eroOmUmeS9jQovLyBAbm90ZSAgICAgICAgIDIwLTAyLTExIDIuMS4wIOiLpeW5suWKqOeUu+S8mOWMlu+8jOinhuinieS9k+mqjOabtOa1geeVhQovLyBAbm90ZSAgICAgICAgIDIwLTAyLTA2IDIuMC45IOatpuaxieWKoOayue+8geS/ruaUueaOqOiNkOWGheWuueWIh+aNouW8gOWFs+S9jee9ru+8jOWHj+Wwkei/neWSjOaEnwovLyBAbm90ZSAgICAgICAgIDIwLTAxLTE3IDIuMC44IOWOu+mZpOWPs+S+p+W5v+WRigovLyBAbm90ZSAgICAgICAgIDIwLTAxLTE3IDIuMC43IOaEn+iwouadpeiHqkdpdEh1YueahOaci+WPi+KAnGdsZWFuc+KAneeahOW7uuiuru+8jOWOu+aOiemhteWktOW5v+WRigovLyBAbm90ZSAgICAgICAgIDE5LTEyLTEyIDIuMC42IOaEn+iwouadpeiHqkdpdEh1YueahOaci+WPi+KAnHlleHVlc29uZ+KAneeahOW7uuiuru+8jOWwhuS9nOiAheS/oeaBr+WcqOaWh+eroOmhtumDqOWxleekugovLyBAbm90ZSAgICAgICAgIDE5LTEwLTMwIDIuMC41IOe+juWMlumakOiXj+aMiemSru+8jOWinuWKoOeCueWHu+WKqOeUuwovLyBAbm90ZSAgICAgICAgIDE5LTEwLTMwIDIuMC40IOWIoOmZpENTRE7lrpjmlrnlnKjkuLvpobXmjqjpgIHnmoTmlofnq6DvvIjlpKflpJrmmK/lub/lkYrvvIkKLy8gQG5vdGUgICAgICAgICAxOS0xMC0zMCAyLjAuMyDmt7vliqDmm7TlpJrlsY/olL3ohJrmnKwKLy8gQG5vdGUgICAgICAgICAxOS0xMC0zMCAyLjAuMCDnpZ3oh6rlt7HnlJ/ml6Xlv6vkuZB+5a6M5YWo6YeN5YaZQ1NETkdyZWVuZXLvvIznu5/kuIDkvb/nlKhKUXVlcnnvvIzmlYjnjofmm7Tpq5gKLy8gQG5vdGUgICAgICAgICAxOS0xMC0yNyAxLjUuMiDliKDpmaTliIbkuqvmtbfmiqXmj5DnpLomJuaEn+iwokdpdEh1YueahOaci+WPi+KAnENITi1TVFVERU5U4oCd55qE5Y+N6aaI77yM5Y676Zmk5bqV6YOo6K++56iL5o6o6I2QCi8vIEBub3RlICAgICAgICAgMTktMTAtMjcgMS41LjEg5oSf6LCi5p2l6IeqR2l0SHVi55qE5pyL5Y+L4oCcQ0hOLVNUVURFTlTigJ3nmoTnu4boh7TlpI3njrDlj43ppojvvIzljrvpmaTkuoblupXpg6jnmoTor77nqIvmjqjojZDlub/lkYoKLy8gQG5vdGUgICAgICAgICAxOS0xMC0wNCAxLjUuMCDnp7vpmaTkuoblupXpg6jkuLvpopjkv6Hmga/lkozmiZPotY8KLy8gQG5vdGUgICAgICAgICAxOS0wOS0xMCAxLjQuOSDmhJ/osKLmnaXoh6pHaXRIdWLnmoTmnIvlj4vigJxwcm9ncmFtbWVyWmXigJ3nmoTnu4boh7TlpI3njrDlj43ppojvvIzkv67lpI3kuobor4TorrrljLrngrnlh7vmn6XnnIvlm57lpI3lkI7vvIzlt7Lnu4/lsZXlvIDnmoTor4TorrrkvJrmlLbotbfnmoTpl67popgKLy8gQG5vdGUgICAgICAgICAxOS0wOS0wNCAxLjQuOCDmhJ/osKLmnaXoh6pHaXRIdWLnmoTmnIvlj4vigJxkd2RjdGjigJ3nmoTnu4boh7TlpI3njrDlj43ppojvvIznjrDlnKjmn6XnnIvljp/liJvmlofnq6DkuI3kvJrml6DpmZDlvLnnmbvlvZXnqpflj6PkuobvvIzkuJTliqDlvLrkuoboh6rliqjlsZXlvIDlip/og70KLy8gQG5vdGUgICAgICAgICAxOS0wOC0yMCAxLjQuNyDmhJ/osKLmsrnlj4nnlKjmiLfigJxTdXByZW1lU2ly4oCd55qE5Y+N6aaI77yM5L+u5aSN5LqG5Y+z5L6n5oKs5rWu5qCP6YGu5oyh5paH56ug55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMTktMDgtMTQgMS40LjYg5peg6K+t44CC5Yia5pu05paw55qE5YWN55m75b2V5aSN5Yi277yM5Y+I5pS55LqG44CC5L+u5aSN77yBCi8vIEBub3RlICAgICAgICAgMTktMDgtMTMgMS40LjUg5pu05paw5LqG54us5a625Yqf6IO977ya5YWN55m75b2V5aSN5Yi2Ci8vIEBub3RlICAgICAgICAgMTktMDgtMTMgMS40LjQg5oSf6LCi5p2l6IeqR2l0SHVi55qE5pyL5Y+L4oCcaWFtc3VueGluZ+KAneeahOWPjemmiO+8jOS/ruWkjeS6humhtumDqOS4jei0tOi+ueeahOmXrumimAovLyBAbm90ZSAgICAgICAgIDE5LTA4LTAxIDEuNC4zIOaEn+iwouayueWPieeUqOaIt+KAnGRkZGR54oCd55qE5Y+N6aaI77yM5Y676Zmk5LqG5pu05aSa5o6o5bm/5bm/5ZGKCi8vIEBub3RlICAgICAgICAgMTktMDctMzAgMS40LjIg5oSf6LCi5rK55Y+J55So5oi34oCc5ZGo5LmJ5p2w4oCd55qE5Y+N6aaI77yM5aKe5Yqg5LqG6ZiyQ1NETuWklumTvumHjeWumuWQkeeahOWKn+iDve+8iENTRE7oh63mtYHmsJPvvIkKLy8gQG5vdGUgICAgICAgICAxOS0wNy0yMCAxLjQuMSDkv67lpI3kuobmjqjojZDlhoXlrrnlvIDlhbPot6jmlofnq6Dml6DmlYjpl67popjvvIjlv5jkuobphY3nva5Db29raWXkvZznlKjln5/vvIkKLy8gQG5vdGUgICAgICAgICAxOS0wNy0xOSAxLjQuMCAxLiDmnoTmnrblpKfmm7TmlrAgMi4g5oSf6LCi5p2l6IeqR2l0SHVi55qE5pyL5Y+LImx1a2VtaW4i55qE5Y+N6aaI77yM5Yqg5YWl5LqG5LiL5pa55o6o6I2Q5YaF5a655piv5ZCm6ZqQ6JeP5byA5YWz77yI5a6e55So77yJCi8vIEBub3RlICAgICAgICAgMTktMDctMTMgMS4zLjAg5oSf6LCi5p2l6IeqR2l0SHVi55qE5pyL5Y+L4oCcSG9sYXBsYWNl4oCd55qE5Y+N6aaI77yM5L+u5aSN5LqG5paH56ug5peg5rOV6Ieq5Yqo5bGV5byA55qE6Zeu6aKY77yIQ1NETuaAu+aUuei/meS4qu+8jOS7pOS6uuWktOeWvO+8iQovLyBAbm90ZSAgICAgICAgIDE5LTA2LTA4IDEuMi42IOaEn+iwouayueWPieeUqOaIt+KAnERlc2t5QWtp4oCd55qE5Y+N6aaI77yM5L+u5aSN5LqG5paH56ug5peg5rOV6Ieq5Yqo5bGV5byA55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMTktMDYtMDcgMS4yLjQg5L+u5aSN5LqG55m75b2V5ZCO6K+E6K665peg5rOV5q2j5bi45omT5byA55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMTktMDYtMDcgMS4yLjMg5oSf6LCi5rK55Y+J55So5oi3IuawuOi/nOeahOauv+S4iyLnmoTlj43ppojvvIzlnKjkuIDkuIrljYjnmoTliqrlipvmlLvlhYvkuIvvvIznu4jkuo7lrp7njrDkuobmnKrnmbvlvZXlsZXlvIDor4TorrrnmoTor63lj6UKLy8gQG5vdGUgICAgICAgICAxOS0wNi0wNSAxLjIuMCDkv67lpI3kuobor4Torrrml6Dms5Xoh6rliqjlsZXlvIDnmoRCVUcKLy8gQG5vdGUgICAgICAgICAxOS0wNi0wNCAxLjEuOSDkv67lpI3kuobml6Dms5Xoh6rliqjlsZXlvIDnmoRCVUfvvIjoh6rpl63kuobvvIkKLy8gQG5vdGUgICAgICAgICAxOS0wNi0wNCAxLjEuNiBDU0RO5aSq5Z2P5LqG77yM5oqK4oCc5raI5oGv4oCd5oyJ6ZKu55qEQ2xhc3Porr7nva7miJDkuobigJxHaXRDaGF04oCd77yM5omA5Lul5L+u5aSN5LqG4oCc5raI5oGv4oCd5oyJ6ZKu5raI5aSx55qE6Zeu6aKYCi8vIEBub3RlICAgICAgICAgMTktMDYtMDQgMS4xLjUgMS4g5LyY5YyW5LqG6K665Z2b5L2T6aqMIDIu576O5YyW44CB5LyY5YyW5Luj56CB57uT5p6ECi8vIEBub3RlICAgICAgICAgMTktMDYtMDQgMS4xLjQg5oSf6LCi5p2l6IeqR2l0SHVi55qE5pyL5Y+L4oCcaWFtc3VueGluZ+KAneeahOWPjemmiO+8jOWinuWKoOS6huiuuuWdm+W5v+WRiuWMuemFjeinhOWImQovLyBAbm90ZSAgICAgICAgIDE5LTA2LTAzIDEuMS4zIOaEn+iwouadpeiHqkdpdEh1YueahOaci+WPi+KAnHdhbmd3ZWkxMzXigJ3nmoTlj43ppojvvIzljrvpmaTkuobor4TorrrljLrkuIrmlrnnmoTlub/lkYoKLy8gQG5vdGUgICAgICAgICAxOS0wNS0yNyAxLjEuMiDmhJ/osKLmsrnlj4nnlKjmiLfigJzlpI/kvJ/mnbDigJ3nmoTlj43ppojvvIzkv67lpI3kuoblr4zmlofmnKznvJbovpHlmajml6Dms5Xkvb/nlKjnmoTpl67popgKLy8gQG5vdGUgICAgICAgICAxOS0wNS0yNSAxLjEuMCAxLiDkv67lpI3kuobkuLvpobXlub/lkYrnmoTpl67popggMi4g6K665Z2b6Ieq5Yqo5bGV5byAIDMuIOiuuuWdm+W5v+WRiua2iOmZpAovLyBAbm90ZSAgICAgICAgIDE5LTA1LTI1IDEuMC45IOaEn+iwouayueWPieeUqOaIt+KAnOa4o+a4o+S4jeWHhuivtOivneKAneeahOWPjemmiO+8jOS/ruWkjeS6huaUtuiXj+aMiemSrua2iOWkseeahOmXrumimAovLyBAbm90ZSAgICAgICAgIDE5LTAzLTAxIDEuMC4zIOa3u+WKoOmhtemdoumAieaLqeaAp+i/h+a7pOinhOWImQovLyBAbm90ZSAgICAgICAgIDE5LTAzLTAxIDEuMC4yIOWinuWKoOS6huWHgOWMluWJqui0tOadv+WKn+iDvQovLyBAbm90ZSAgICAgICAgIDE5LTAzLTAxIDEuMC4xIOS/ruWkjeS6huaOkueJiOmXrumimCwg5LyY5YyW5LqG5Luj56CB57uT5p6ECi8vIEBub3RlICAgICAgICAgMTktMDItMjYgMS4wLjAg5Yid54mI5Y+R5biDCi8vID09L1VzZXJTY3JpcHQ9PQp2YXIgdmVyc2lvbiA9ICIzLjQuMyI7CnZhciBjdXJyZW50VVJMID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CnZhciBsaXN0Owp2YXIgd2luZG93VG9wID0gMDsKCi8vIOiHquWumuS5iSBDU1MKLy8g6L+b5bqm5p2hCiQoJ2hlYWQnKS5hcHBlbmQoIjxzdHlsZT4jbnByb2dyZXNze3BvaW50ZXItZXZlbnRzOm5vbmV9I25wcm9ncmVzcyAuYmFye2JhY2tncm91bmQ6I2Y0NDQ0NDtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwMzE7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjJweH0jbnByb2dyZXNzIC5wZWd7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3dpZHRoOjEwMHB4O2hlaWdodDoxMDAlO2JveC1zaGFkb3c6MCAwIDEwcHggI2Y0NDQ0NCwwIDAgNXB4ICNmNDQ0NDQ7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgzZGVnKSB0cmFuc2xhdGUoMCwtNHB4KTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgzZGVnKSB0cmFuc2xhdGUoMCwtNHB4KTt0cmFuc2Zvcm06cm90YXRlKDNkZWcpIHRyYW5zbGF0ZSgwLC00cHgpfSNucHJvZ3Jlc3MgLnNwaW5uZXJ7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwMzE7dG9wOjE1cHg7cmlnaHQ6MTVweH0jbnByb2dyZXNzIC5zcGlubmVyLWljb257d2lkdGg6MThweDtoZWlnaHQ6MThweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOnNvbGlkIDJweCB0cmFuc3BhcmVudDtib3JkZXItdG9wLWNvbG9yOiNmNDQ0NDQ7Ym9yZGVyLWxlZnQtY29sb3I6I2Y0NDQ0NDtib3JkZXItcmFkaXVzOjUwJTstd2Via2l0LWFuaW1hdGlvbjpucHJvZ3Jlc3Mtc3Bpbm5lciAuNHMgbGluZWFyIGluZmluaXRlO2FuaW1hdGlvbjpucHJvZ3Jlc3Mtc3Bpbm5lciAuNHMgbGluZWFyIGluZmluaXRlfS5ucHJvZ3Jlc3MtY3VzdG9tLXBhcmVudHtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmV9Lm5wcm9ncmVzcy1jdXN0b20tcGFyZW50ICNucHJvZ3Jlc3MgLmJhciwubnByb2dyZXNzLWN1c3RvbS1wYXJlbnQgI25wcm9ncmVzcyAuc3Bpbm5lcntwb3NpdGlvbjphYnNvbHV0ZX1ALXdlYmtpdC1rZXlmcmFtZXMgbnByb2dyZXNzLXNwaW5uZXJ7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fUBrZXlmcmFtZXMgbnByb2dyZXNzLXNwaW5uZXJ7MCV7dHJhbnNmb3JtOnJvdGF0ZSgwKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19PC9zdHlsZT4iKTsKLy8g5by55Ye656qX5Y+jCiQoJ2hlYWQnKS5hcHBlbmQoIjxzdHlsZT4uYmxhY2tfb3ZlcmxheXt0b3A6MCU7bGVmdDowJTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQtY29sb3I6IzAwMDt6LWluZGV4OjEwMDE7LW1vei1vcGFjaXR5OjAuODtvcGFjaXR5Oi4xMDtmaWx0ZXI6YWxwaGEob3BhY2l0eT04OCl9LmJsYWNrX292ZXJsYXksLndoaXRlX2NvbnRlbnR7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlfS53aGl0ZV9jb250ZW50e3otaW5kZXg6OTk5OSFpbXBvcnRhbnQ7dG9wOjI1JTtsZWZ0OjI1JTt3aWR0aDo2NTBweDtoZWlnaHQ6NjAlO3BhZGRpbmc6MjBweDtib3JkZXI6MHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjt6LWluZGV4OjEwMDI7b3ZlcmZsb3c6YXV0b308L3N0eWxlPiIpOwovLyDmj5DnpLrmnaEKJCgnaGVhZCcpLmFwcGVuZCgiPHN0eWxlPi50cmlwc2NvbntwYWRkaW5nOjEwcHh9PC9zdHlsZT4iKTsKLy8g5oyJ6ZKu77yI5pen77yJCiQoJ2hlYWQnKS5hcHBlbmQoIjxzdHlsZT4jdG9nZ2xlLWJ1dHRvbntkaXNwbGF5Om5vbmV9LmJ1dHRvbi1sYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDo4MnB4O2JhY2tncm91bmQtY29sb3I6I2NjYztib3JkZXI6MXB4IHNvbGlkICNjY2M7Ym9yZGVyLXJhZGl1czozMHB4O2N1cnNvcjpwb2ludGVyfS5jaXJjbGV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5idXR0b24tbGFiZWwgLnRleHR7bGluZS1oZWlnaHQ6MzBweDtmb250LXNpemU6MThweDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0ub257Y29sb3I6I2ZmZjtkaXNwbGF5Om5vbmU7dGV4dC1pbmRlbnQ6MTBweH0ub2Zme2NvbG9yOiNmZmY7ZGlzcGxheTppbmxpbmUtYmxvY2s7dGV4dC1pbmRlbnQ6NTNweH0uYnV0dG9uLWxhYmVsIC5jaXJjbGV7bGVmdDowO3RyYW5zaXRpb246YWxsIC4zc30jdG9nZ2xlLWJ1dHRvbjpjaGVja2VkK2xhYmVsLmJ1dHRvbi1sYWJlbCAuY2lyY2xle2xlZnQ6NTBweH0jdG9nZ2xlLWJ1dHRvbjpjaGVja2VkK2xhYmVsLmJ1dHRvbi1sYWJlbCAub257ZGlzcGxheTppbmxpbmUtYmxvY2t9I3RvZ2dsZS1idXR0b246Y2hlY2tlZCtsYWJlbC5idXR0b24tbGFiZWwgLm9mZntkaXNwbGF5Om5vbmV9I3RvZ2dsZS1idXR0b246Y2hlY2tlZCtsYWJlbC5idXR0b24tbGFiZWx7YmFja2dyb3VuZC1jb2xvcjojNzhkNjkwfTwvc3R5bGU+Iik7Ci8vIOS/neWtmOaMiemSrgokKCdoZWFkJykuYXBwZW5kKCI8c3R5bGU+I3NhdmV7YmFja2dyb3VuZC1jb2xvcjojMTlhNGVkO2JvcmRlcjpub25lO2NvbG9yOiNmZmY7cGFkZGluZzo1cHggMTVweDt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jaztmb250LXNpemU6MTJweDtjdXJzb3I6cG9pbnRlcn08L3N0eWxlPiIpOwovLyBTdGFyIOagt+W8jwokKCdoZWFkJykuYXBwZW5kKCI8c3R5bGU+LmdpdmVNZU9uZVN0YXI6aG92ZXJ7Y29sb3I6I0ZGNjlCNDt9PC9zdHlsZT4iKTsKCi8vIFNWRwp2YXIgc2F2ZV9zdmcgPSAnPHN2ZyB0PSIxNTk1MDgyNjUwMTczIiBjbGFzcz0iaWNvbiIgdmlld0JveD0iMCAwIDEwNzUgMTAyNCIgdmVyc2lvbj0iMS4xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHAtaWQ9IjIwNzgiIHdpZHRoPSIxNDAiIGhlaWdodD0iMTQwIj48cGF0aCBkPSJNNzUzLjc2MzkwMiA2ODUuODMwMjQ0YTQ4Ljk1MjE5NSA0OC45NTIxOTUgMCAwIDEgNDkuMTUyLTQ4LjcwMjQzOWM4MS40MjA0ODggMCAxNDEuMTYyMTQ2LTY1LjM4NjE0NiAxNDEuMTYyMTQ3LTE0Ni4wNTczNjYgMC00My41MDc1MTItMTMuMDM3MjY4LTgyLjQxOTUxMi00My40NTc1NjEtMTA5LjI0MzMxN2ExNDIuMzYwOTc2IDE0Mi4zNjA5NzYgMCAwIDAtMjAuMjgwMTk1LTE0LjkzNTQxNSAxNTguMDQ1NjU5IDE1OC4wNDU2NTkgMCAwIDAtMTEuMjM5MDI1LTYuMjQzOTAybC0yLjc0NzMxNy0xLjI5ODczMmExNTUuODQ3ODA1IDE1NS44NDc4MDUgMCAwIDAtOS4xOTEwMjQtMy45OTYwOTdjLTEuMzQ4NjgzLTAuNTQ5NDYzLTIuNjk3MzY2LTAuOTk5MDI0LTQuMDk2LTEuNDk4NTM3YTE1Mi4zNTEyMiAxNTIuMzUxMjIgMCAwIDAtOC40OTE3MDctMi44NDcyMTljLTEuOTQ4MDk4LTAuNTk5NDE1LTMuODk2MTk1LTAuOTk5MDI0LTUuODQ0MjkzLTEuNDk4NTM3LTIuNDk3NTYxLTAuNTk5NDE1LTQuOTQ1MTcxLTEuMjQ4NzgtNy40OTI2ODMtMS43NDgyOTMtMi41OTc0NjMtMC40OTk1MTItNS4zNDQ3OC0wLjg5OTEyMi04LjA0MjE0Ni0xLjI0ODc4LTEuOTQ4MDk4LTAuMjQ5NzU2LTMuODQ2MjQ0LTAuNTk5NDE1LTUuODQ0MjkzLTAuNzk5MjJhMTUzLjE1MDQzOSAxNTMuMTUwNDM5IDAgMCAwLTE0LjQzNTkwMy0wLjc0OTI2OGMtMS40OTg1MzcgMC0yLjk5NzA3MyAwLjE5OTgwNS00LjU0NTU2MSAwLjI0OTc1NmEyNjUuMzkwODI5IDI2NS4zOTA4MjkgMCAwIDAtNS41OTQ1MzYtMjQuNTI2MDQ5Yy0wLjQ5OTUxMi0xLjk5ODA0OS0xLjI5ODczMi0zLjg0NjI0NC0xLjg5ODE0Ni01Ljg0NDI5MmEyNjcuNDM4ODI5IDI2Ny40Mzg4MjkgMCAwIDAtNS45NDQxOTYtMTcuOTgyNDM5Yy0wLjY0OTM2Ni0xLjc5ODI0NC0xLjQ5ODUzNy0zLjQ5NjU4NS0yLjE5Nzg1My01LjI5NDgzYTI4My4xMjM1MTIgMjgzLjEyMzUxMiAwIDAgMC03Ljc0MjQzOS0xNy43MzI2ODNMNzcyLjc0NTM2NiAyNjkuNzM2NTg1YTI4Mi45NzM2NTkgMjgyLjk3MzY1OSAwIDAgMC05Ljc5MDQzOS0xNy44MzI1ODVDNzE0LjMwMjQzOSAxNzEuNTgyNDM5IDYyNS44ODg3OCAxMjQuODc4MDQ5IDUyNC40ODc4MDUgMTI0Ljg3ODA0OWMtMTAxLjQwMDk3NiAwLTE4OS45MTQ1MzcgNDYuNjU0NDM5LTIzOC41MTcwNzMgMTI2Ljk3Ni0zLjQ5NjU4NSA1Ljc5NDM0MS02LjY5MzQ2MyAxMS43ODg0ODgtOS43OTA0MzkgMTcuODMyNTg1bC0yLjE5Nzg1NCA0LjA5NmEyODMuNTIzMTIyIDI4My41MjMxMjIgMCAwIDAtNy43NDI0MzkgMTcuNzMyNjgzbC0yLjE5Nzg1NCA1LjI0NDg3OGMtMi4yNDc4MDUgNS44OTQyNDQtNC4xNDU5NTEgMTEuOTg4MjkzLTUuOTk0MTQ2IDE4LjAzMjM5LTAuNTQ5NDYzIDEuOTk4MDQ5LTEuMjk4NzMyIDMuODQ2MjQ0LTEuODQ4MTk1IDUuODQ0MjkzYTI2Ni43Mzk1MTIgMjY2LjczOTUxMiAwIDAgMC01LjU5NDUzNyAyNC40NzYwOThjLTEuNDk4NTM3IDAtMi45OTcwNzMtMC4xOTk4MDUtNC41NDU1NjEtMC4xOTk4MDUtNC44OTUyMiAwLTkuNjkwNTM3IDAuMjk5NzA3LTE0LjQ4NTg1MyAwLjc0OTI2OC0xLjk5ODA0OSAwLjE5OTgwNS0zLjg0NjI0NCAwLjQ5OTUxMi01Ljc5NDM0MiAwLjc5OTIyLTIuNjk3MzY2IDAuMzQ5NjU5LTUuNDQ0NjgzIDAuNjk5MzE3LTguMDkyMDk3IDEuMjQ4NzgtMi40OTc1NjEgMC40OTk1MTItNC45OTUxMjIgMS4xNDg4NzgtNy40OTI2ODMgMS43NDgyOTMtMS44OTgxNDYgMC40OTk1MTItMy44NDYyNDQgMC44OTkxMjItNS43OTQzNDIgMS40OTg1MzZhMTUzLjY0OTk1MSAxNTMuNjQ5OTUxIDAgMCAwLTguNDkxNzA3IDIuNzk3MjY5bC00LjA5NiAxLjQ5ODUzNmExNjQuMjg5NTYxIDE2NC4yODk1NjEgMCAwIDAtOS4yNDA5NzYgMy45OTYwOThsLTIuNjk3MzY2IDEuMzQ4NjgzYTE0NS41NTc4NTQgMTQ1LjU1Nzg1NCAwIDAgMC0zMS40NjkyNjggMjEuMTc5MzE3QzExNy44ODQ4NzggNDA4LjYwMDk3NiAxMDQuODk3NTYxIDQ0Ny41NjI5MjcgMTA0Ljg5NzU2MSA0OTEuMDcwNDM5YzAgODAuNjcxMjIgNTkuNzQxNjU5IDE0Ni4wNTczNjYgMTQxLjE2MjE0NiAxNDYuMDU3MzY2YTQ4Ljk1MjE5NSA0OC45NTIxOTUgMCAwIDEgNDkuMTUyIDQ4LjcwMjQzOSA0OC45NTIxOTUgNDguOTUyMTk1IDAgMCAxLTQ5LjE1MiA0OC43MDI0MzljLTEzNS43MTc0NjMgMC0yNDUuNzEwMDQ5LTEwOC45OTM1NjEtMjQ1LjcxMDA0OC0yNDMuNDYyMjQ0IDAtMTA5LjY5Mjg3OCA3My4yMjg0ODgtMjAyLjQwMjM0MSAxNzMuODMwMjQzLTIzMi44NzI1ODVBMzc1LjgzMjk3NiAzNzUuODMyOTc2IDAgMCAxIDUyNC40ODc4MDUgMjAuMzMwMTQ2YTM3NS44ODI5MjcgMzc1Ljg4MjkyNyAwIDAgMSAzNTAuMzA3OTAyIDIzNy44Njc3MDhjMTAwLjYwMTc1NiAzMC40NzAyNDQgMTczLjgzMDI0NCAxMjMuMTc5NzA3IDE3My44MzAyNDQgMjMyLjg3MjU4NSAwIDEzNC40Njg2ODMtMTA5Ljk5MjU4NSAyNDMuNDYyMjQ0LTI0NS43MTAwNDkgMjQzLjQ2MjI0NGE0OC45NTIxOTUgNDguOTUyMTk1IDAgMCAxLTQ5LjEwMjA0OC00OC43MDI0Mzl6IiBwLWlkPSIyMDc5Ij48L3BhdGg+PHBhdGggZD0iTTQ4Ny45NzM0NjMgMzg2LjEyMjkyN2E0OS4xMDIwNDkgNDkuMTAyMDQ5IDAgMCAxIDcyLjkyODc4MSAwLjA5OTkwMmwxNDcuMzU2MDk3IDE2Mi4wNDE3NTZjNi45OTMxNzEgNy43NDI0MzkgMTEuNDg4NzggMTkuNDMxMDI0IDEyLjUzNzc1NyAzMC4xMjA1ODZsMC4yNDk3NTYgMTIuOTM3MzY2YzAgMTkuNDgwOTc2LTIwLjQ4IDM5LjY2MTI2OC0zOS4yMTE3MDggMzkuNjYxMjY4aC0xMDQuODk3NTYxdjI2Mi45OTMxNzFhNTIuNDQ4NzggNTIuNDQ4NzggMCAxIDEtMTA0Ljg5NzU2MSAwdi0yNjIuOTkzMTcxaC0xMDQuODk3NTYxYy0xMy44ODY0MzkgMC0zOS4yMTE3MDctMjEuNzI4NzgtMzkuMjExNzA3LTM5LjY2MTI2OHYtMTIuOTg3MzE3YzAtMTIuNDg3ODA1IDQuNzk1MzE3LTIxLjI3OTIyIDEyLjYzNzY1OS0yOS45MjA3ODFsMTQ3LjM1NjA5Ny0xNjIuMjkxNTEyeiIgcC1pZD0iMjA4MCI+PC9wYXRoPjwvc3ZnPic7CnZhciBzdGFyX3N2Z18xID0gJzxzdmcgdD0iMTU5NTA4MzYzMTY4NSIgY2xhc3M9Imljb24iIHZpZXdCb3g9IjAgMCAxMDUxIDEwMjQiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBwLWlkPSIyMTczIiB3aWR0aD0iMTQwIiBoZWlnaHQ9IjE0MCI+PHBhdGggZD0iTTUyNS44Mzc4MzggODUyLjQxMDgxMUwxOTkuMjY0ODY1IDEwMDEuODU5NDU5bDQxLjUxMzUxMy0zNTcuMDE2MjE2TDAgMzgxLjkyNDMyNGwzNTEuNDgxMDgxLTY5LjE4OTE4OUw1MjUuODM3ODM4IDBsMTc0LjM1Njc1NyAzMTIuNzM1MTM1TDEwNTEuNjc1Njc2IDM4MS45MjQzMjRsLTI0MC43NzgzNzkgMjYyLjkxODkxOSA0MS41MTM1MTQgMzU3LjAxNjIxNnoiIGZpbGw9IiNGRkQ1NjYiIHAtaWQ9IjIxNzQiPjwvcGF0aD48L3N2Zz4nOwp2YXIgc3Rhcl9zdmdfMiA9ICcgPHN2ZyB0PSIxNTk1MDgzNzE1MzEyIiBjbGFzcz0iaWNvbiIgdmlld0JveD0iMCAwIDEwMjQgMTAyNCIgdmVyc2lvbj0iMS4xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHAtaWQ9Ijc4NDgiIHdpZHRoPSIxNDAiIGhlaWdodD0iMTQwIj48cGF0aCBkPSJNMTAxNC4wMDEzNDcgODY2LjA5MDIzNkw4MTAuMjM1NjkgNjYyLjMyNDU3OWwxNDUuNDk3NjQzLTg0LjEyNjU5OWMxMS4zNzc3NzgtNi41NTA4NDIgMTcuOTI4NjItMTguOTYyOTYzIDE2Ljg5NDI3Ni0zMi4wNjQ2NDctMS4wMzQzNDMtMTMuMTAxNjg0LTkuMzA5MDkxLTI0LjQ3OTQ2MS0yMS4zNzY0MzEtMjkuMzA2Mzk3bC02NDguMTg4NTUyLTI1OC41ODU4NTljLTEyLjc1NjkwMi01LjE3MTcxNy0yNy4yMzc3MS0yLjA2ODY4Ny0zNi44OTE1ODIgNy41ODUxODYtOS42NTM4NzIgOS42NTM4NzItMTIuNzU2OTAyIDI0LjEzNDY4LTcuNTg1MTg1IDM2Ljg5MTU4MmwyNTguNTg1ODU4IDY0OC41MzMzMzNjNC44MjY5MzYgMTIuMDY3MzQgMTYuMjA0NzE0IDIwLjY4Njg2OSAyOS4zMDYzOTcgMjEuMzc2NDMxIDEzLjEwMTY4NCAxLjAzNDM0MyAyNS41MTM4MDUtNS41MTY0OTggMzIuMDY0NjQ3LTE2Ljg5NDI3Nmw4NC4xMjY1OTktMTQ1LjQ5NzY0MyAyMDMuNzY1NjU3IDIwMy43NjU2NTdjNi41NTA4NDIgNi41NTA4NDIgMTUuMTcwMzcgOS45OTg2NTMgMjQuMTM0NjggOS45OTg2NTMgOC45NjQzMSAwIDE3LjkyODYyLTMuNDQ3ODExIDI0LjEzNDY4LTkuOTk4NjUzbDk5LjI5Njk3LTk5LjI5Njk3YzEzLjQ0NjQ2NS0xMy40NDY0NjUgMTMuNDQ2NDY1LTM1LjE2NzY3NyAwLTQ4LjYxNDE0MXpNMTUwLjMyNDU3OSAxMDIuMDU1MjE5Yy0xMy40NDY0NjUtMTMuNDQ2NDY1LTM1LjE2NzY3Ny0xMy40NDY0NjUtNDguMjY5MzYgMC0xMy40NDY0NjUgMTMuNDQ2NDY1LTEzLjQ0NjQ2NSAzNS4xNjc2NzcgMCA0OC4yNjkzNmw3Ni4xOTY2MzMgNzYuMTk2NjMzYzYuNTUwODQyIDYuNTUwODQyIDE1LjUxNTE1MiA5Ljk5ODY1MyAyNC4xMzQ2OCA5Ljk5ODY1M3MxNy41ODM4MzgtMy40NDc4MTEgMjQuMTM0NjgtOS45OTg2NTNjMTMuNDQ2NDY1LTEzLjQ0NjQ2NSAxMy40NDY0NjUtMzUuMTY3Njc3IDAtNDguMjY5MzZMMTUwLjMyNDU3OSAxMDIuMDU1MjE5ek0xNzYuMTgzMTY1IDMzOC41NzUwODRjMC0xOC45NjI5NjMtMTUuMTcwMzctMzQuMTMzMzMzLTM0LjEzMzMzMy0zNC4xMzMzMzNIMzQuMTMzMzMzYy0xOC45NjI5NjMgMC0zNC4xMzMzMzMgMTUuMTcwMzctMzQuMTMzMzMzIDM0LjEzMzMzM3MxNS4xNzAzNyAzNC4xMzMzMzMgMzQuMTMzMzMzIDM0LjEzMzMzNGgxMDcuNTcxNzE4YzE4Ljk2Mjk2MyAwIDM0LjQ3ODExNC0xNS4xNzAzNyAzNC40NzgxMTQtMzQuMTMzMzM0ek0xNjIuMzkxOTE5IDQ0NC40MjI4OTZsLTc2LjE5NjYzMyA3NS44NTE4NTFjLTEzLjQ0NjQ2NSAxMy40NDY0NjUtMTMuNDQ2NDY1IDM1LjE2NzY3NyAwIDQ4LjI2OTM2MSA2LjU1MDg0MiA2LjU1MDg0MiAxNS41MTUxNTIgOS45OTg2NTMgMjQuMTM0NjggOS45OTg2NTNzMTcuNTgzODM4LTMuNDQ3ODExIDI0LjEzNDY4LTkuOTk4NjUzbDc2LjE5NjYzMy03Ni4xOTY2MzNjMTMuNDQ2NDY1LTEzLjQ0NjQ2NSAxMy40NDY0NjUtMzUuMTY3Njc3IDAtNDguMjY5MzYxLTEzLjQ0NjQ2NS0xMy4xMDE2ODQtMzUuMTY3Njc3LTEzLjEwMTY4NC00OC4yNjkzNiAwLjM0NDc4MnpNMzM4LjU3NTA4NCAxNzYuMTgzMTY1YzE4Ljk2Mjk2MyAwIDM0LjEzMzMzMy0xNS4xNzAzNyAzNC4xMzMzMzQtMzQuMTMzMzMzVjM0LjEzMzMzM2MwLTE4Ljk2Mjk2My0xNS4xNzAzNy0zNC4xMzMzMzMtMzQuMTMzMzM0LTM0LjEzMzMzM3MtMzQuMTMzMzMzIDE1LjE3MDM3LTM0LjEzMzMzMyAzNC4xMzMzMzN2MTA3LjU3MTcxOGMwIDE4Ljk2Mjk2MyAxNS4xNzAzNyAzNC40NzgxMTQgMzQuMTMzMzMzIDM0LjQ3ODExNHpNNDY4LjU1NzU3NiAyMjAuNjU5OTMzYzguNjE5NTI5IDAgMTcuNTgzODM4LTMuNDQ3ODExIDI0LjEzNDY4LTkuOTk4NjU0TDU2OC44ODg4ODkgMTM0LjQ2NDY0NmMxMy40NDY0NjUtMTMuNDQ2NDY1IDEzLjQ0NjQ2NS0zNS4xNjc2NzcgMC00OC4yNjkzNi0xMy40NDY0NjUtMTMuNDQ2NDY1LTM1LjE2NzY3Ny0xMy40NDY0NjUtNDguMjY5MzYgMGwtNzYuMTk2NjMzIDc2LjE5NjYzM2MtMTMuNDQ2NDY1IDEzLjQ0NjQ2NS0xMy40NDY0NjUgMzUuMTY3Njc3IDAgNDguMjY5MzYgNi41NTA4NDIgNi41NTA4NDIgMTUuNTE1MTUyIDkuOTk4NjUzIDI0LjEzNDY4IDkuOTk4NjU0eiIgZmlsbD0iIzJjMmMyYyIgcC1pZD0iNzg0OSI+PC9wYXRoPjwvc3ZnPic7CnZhciBzdGFyX3N2Z18zID0gJyA8c3ZnIHQ9IjE1OTUwODM5MjU0MzgiIGNsYXNzPSJpY29uIiB2aWV3Qm94PSIwIDAgMTIwNCAxMDI0IiB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgcC1pZD0iNDgwOSIgd2lkdGg9IjE0MCIgaGVpZ2h0PSIxNDAiPjxwYXRoIGQ9Ik0xMDg4Ljg2NDM0OCA2MTguMTM3MDFhMTU1NS4wMDkzODQgMTU1NS4wMDkzODQgMCAwIDEtMTUwLjI3MzAwNCAxNjcuMTM3MzA4Yy01Mi44ODE2NDIgNTEuMTk1MjEyLTEwNy45MzE1NTIgMTAxLjE4NTgzLTE2My42NDM5ODkgMTQ3LjI2MTUyMS0zMy44NDkwNjkgMjcuNTI0OTU1LTYwLjIyOTY2MSA0OC42NjU1NjYtNzYuMTkwNTIxIDYwLjIyOTY2MWExNjIuOTgxNDYyIDE2Mi45ODE0NjIgMCAwIDEtMTkxLjg5MTY5OSAwYy0xNS41MzkyNTMtMTIuMDQ1OTMyLTQyLjE2MDc2My0zMi42NDQ0NzYtNzYuMTkwNTIxLTYwLjgzMTk1N2EyNjM4LjQ4MDc1NCAyNjM4LjQ4MDc1NCAwIDAgMS0xNjQuMzY2NzQ1LTE0Ny4yNjE1MjEgMTU3OS4xMDEyNDkgMTU3OS4xMDEyNDkgMCAwIDEtMTUwLjI3MzAwNC0xNjUuODEyMjU3QTQ2OC4xMDQ5MjQgNDY4LjEwNDkyNCAwIDAgMSAwLjE1Mjk5OCAzNDQuNzU0NTc5IDMxNS41NDMxOTMgMzE1LjU0MzE5MyAwIDAgMSAxMDkuMDQ4MjI1IDk2LjM2NzQ1N2EzOTkuNDQzMTExIDM5OS40NDMxMTEgMCAwIDEgNDkzLjg4MzIxOS0yMC40NzgwODQgMzk4LjY2MDEyNSAzOTguNjYwMTI1IDAgMCAxIDQ5My44ODMyMTkgMjAuNDc4MDg0QTMxNS40ODI5NjQgMzE1LjQ4Mjk2NCAwIDAgMSAxMjA0Ljc0NjIxNSAzNDMuMzA5MDY3YTQ2Ni44NDAxMDEgNDY2Ljg0MDEwMSAwIDAgMS0xMTUuNzAxMTc4IDI3NC42NDcyNTR6IiBmaWxsPSIjRkU0QjgzIiBwLWlkPSI0ODEwIj48L3BhdGg+PC9zdmc+JzsKdmFyIHN0YXJfc3ZnXzQgPSAnIDxzdmcgdD0iMTU5NTA4NDA4OTExNSIgY2xhc3M9Imljb24iIHZpZXdCb3g9IjAgMCAxMDI0IDEwMjQiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBwLWlkPSI4MDA4IiB3aWR0aD0iMTQwIiBoZWlnaHQ9IjE0MCI+PHBhdGggZD0iTTUxMiA0Ni41NDU0NTVDMjU2IDQ2LjU0NTQ1NSA0Ni41NDU0NTUgMjU2IDQ2LjU0NTQ1NSA1MTJzMjA5LjQ1NDU0NSA0NjUuNDU0NTQ1IDQ2NS40NTQ1NDUgNDY1LjQ1NDU0NSA0NjUuNDU0NTQ1LTIwOS40NTQ1NDUgNDY1LjQ1NDU0NS00NjUuNDU0NTQ1Uzc2OCA0Ni41NDU0NTUgNTEyIDQ2LjU0NTQ1NXogbTAgODM3LjgxODE4MWMtMjA0LjggMC0zNzIuMzYzNjM2LTE2Ny41NjM2MzYtMzcyLjM2MzYzNi0zNzIuMzYzNjM2czE2Ny41NjM2MzYtMzcyLjM2MzYzNiAzNzIuMzYzNjM2LTM3Mi4zNjM2MzYgMzcyLjM2MzYzNiAxNjcuNTYzNjM2IDM3Mi4zNjM2MzYgMzcyLjM2MzYzNi0xNjcuNTYzNjM2IDM3Mi4zNjM2MzYtMzcyLjM2MzYzNiAzNzIuMzYzNjM2eiIgZmlsbD0iIzAwQzVDNSIgcC1pZD0iODAwOSI+PC9wYXRoPjxwYXRoIGQ9Ik02NTYuMjkwOTA5IDU4Ni40NzI3MjdjLTc5LjEyNzI3MyA2OS44MTgxODItMjA5LjQ1NDU0NSA2OS44MTgxODItMjg4LjU4MTgxOCAwLTE4LjYxODE4Mi0xMy45NjM2MzYtNDEuODkwOTA5LTEzLjk2MzYzNi02MC41MDkwOTEgNC42NTQ1NDYtMTMuOTYzNjM2IDEzLjk2MzYzNi0xMy45NjM2MzYgNDEuODkwOTA5IDQuNjU0NTQ1IDYwLjUwOTA5MSA1NS44NTQ1NDUgNTEuMiAxMjUuNjcyNzI3IDc0LjQ3MjcyNyAyMDAuMTQ1NDU1IDc0LjQ3MjcyN3MxNDQuMjkwOTA5LTI3LjkyNzI3MyAyMDAuMTQ1NDU1LTc0LjQ3MjcyN2MxOC42MTgxODItMTMuOTYzNjM2IDE4LjYxODE4Mi00MS44OTA5MDkgNC42NTQ1NDUtNjAuNTA5MDkxcy00MS44OTA5MDktMTguNjE4MTgyLTYwLjUwOTA5MS00LjY1NDU0NnpNMzU4LjQgNDYwLjhjMjcuOTI3MjczIDAgNTEuMi0yMy4yNzI3MjcgNTEuMi01MS4ycy0yMy4yNzI3MjctNTUuODU0NTQ1LTUxLjItNTUuODU0NTQ1Yy0yNy45MjcyNzMgMC01MS4yIDIzLjI3MjcyNy01MS4yIDUxLjJzMjMuMjcyNzI3IDU1Ljg1NDU0NSA1MS4yIDU1Ljg1NDU0NXpNNjY1LjYgNDYwLjhjMjcuOTI3MjczIDAgNTEuMi0yMy4yNzI3MjcgNTEuMi01MS4ycy0yMy4yNzI3MjctNTEuMi01MS4yLTUxLjItNTEuMiAyMy4yNzI3MjctNTEuMiA1MS4yIDIzLjI3MjcyNyA1MS4yIDUxLjIgNTEuMnoiIGZpbGw9IiMwMEM1QzUiIHAtaWQ9IjgwMTAiPjwvcGF0aD48L3N2Zz4nOwp2YXIgc3Rhcl9zdmcgPSBzdGFyX3N2Z18xICsgc3Rhcl9zdmdfMiArIHN0YXJfc3ZnXzMgKyBzdGFyX3N2Z180Owp2YXIgZG9uYXRlX3N2ZyA9ICc8c3ZnIHQ9IjE1OTI5ODI1MDgyNTgiIGNsYXNzPSJpY29uIiB2aWV3Qm94PSIwIDAgMTAyNCAxMDI0IiB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgcC1pZD0iNDIwNyIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIj48cGF0aCBkPSJNNjY0LjQ4IDIzNC40MzJhMzIgMzIgMCAwIDAtNDUuMjQ4LTAuOGwtNzYuMjU2IDczLjYtNzMuMzQ0LTczLjIxNmEzMiAzMiAwIDEgMC00NS4yNDggNDUuMzEybDcyLjM4NCA3Mi4yNTZoLTQ5LjI4YTMyIDMyIDAgMCAwIDAgNjRoNjMuNzc2djMyaC02My43NzZhMzIgMzIgMCAwIDAgMCA2NGg2My43NzZ2NjUuNjY0YTMyIDMyIDAgMSAwIDY0IDB2LTY1LjY2NGg2NC4yODhhMzIgMzIgMCAxIDAgMC02NGgtNjQuMjg4di0zMmg2NC4yODhhMzIgMzIgMCAxIDAgMC02NGgtNTAuMzY4bDc0LjQ2NC03MS44NzJhMzIuMDMyIDMyLjAzMiAwIDAgMCAwLjgzMi00NS4yOHogbTI3NS4yIDUwMy41NTJhOTAxNy41NjggOTAxNy41NjggMCAwIDAtMTQxLjY2NC01Ni43MzYgMzY4LjUxMiAzNjguNTEyIDAgMCAwIDk3LjU2OC0yNDguNjA4YzAtMjAyLjkxMi0xNjUuMTItMzY4LTM2OC4wNjQtMzY4cy0zNjggMTY1LjA4OC0zNjggMzY4YzAgMTYuMjI0IDEuMDI0IDMyLjM1MiAzLjA3MiA0Ny45NjggMi4zMDQgMTcuNTA0IDE4LjQ5NiAyOS42NjQgMzUuOTA0IDI3LjU4NGEzMiAzMiAwIDAgMCAyNy41ODQtMzUuOTA0IDMwNC41MTIgMzA0LjUxMiAwIDAgMS0yLjU2LTM5LjY0OGMwLTE2Ny42MTYgMTM2LjM4NC0zMDQgMzA0LTMwNCAxNjcuNjQ4IDAgMzA0LjA2NCAxMzYuMzg0IDMwNC4wNjQgMzA0YTMwMC41NDQgMzAwLjU0NCAwIDAgMS05Ni4xMjggMjIxLjQ3MmMtMC43NjggMC43MzYtMS4wODggMS43Ni0xLjgyNCAyLjUyOC00Mi44NDgtMTUuOTM2LTc5LjMyOC0yOC40OC05My43Ni0zMC42NTYtMjQuODk2LTMuOTA0LTQ4LjY3MiA3LjYxNi02My4xMDQgMjguODk2LTEyLjAzMiAxNy43OTItMTUuMDcyIDM4LjgxNi04LjA5NiA1Ni4yNTYgNC4yODggMTAuNjU2IDIwLjUxMiAzMi44OTYgMzkuNzc2IDU3LjI4LTQ2LjQzMi0wLjA2NC0xMTcuMzEyLTYuMzM2LTE5Mi44MzItMzUuNDg4LTMxLjI2NC0xMi4wNjQtNjkuNDQtNTIuNjQtMTAzLjEzNi04OC40MTYtNDcuOTY4LTUwLjk3Ni05My4yOC05OS4xMDQtMTQyLjU2LTk5LjEwNC0xOC4zMzYgMC0zNS43NDQgNi44NDgtNTAuMzM2IDE5Ljc3Ni0xOC4yNCAxNi4yMjQtMzUuMTM2IDQ4LjMyLTEyIDEwOS4yNDggNDIuNjI0IDExMi4xNiAyMDguNTQ0IDI4NS4xMiAzNDEuNzI4IDI4NS4xMmg0NzguMTQ0YTMyIDMyIDAgMCAwIDMyLTMydi0xNjBhMzEuODQgMzEuODQgMCAwIDAtMTkuNzc2LTI5LjU2OHogbS00NC4xNiAxNTcuNmgtNDQ1LjEybC0xLjAyNCAzMnYtMzJjLTk3LjYgMC0yNDcuMDcyLTE1Mi4xMjgtMjgxLjkyLTI0My44NzItMTAuMTEyLTI2LjY1Ni02LjcyLTM3LjQwOC01LjM0NC0zOC42MjQgNC4xMjgtMy42NDggNi41MjgtMy42NDggNy44NC0zLjY0OCAyMS42MzIgMCA2NC42MDggNDUuNjMyIDk1Ljk2OCA3OC45NDQgNDAuMjI0IDQyLjc1MiA4MS44NTYgODYuOTQ0IDEyNi42NTYgMTA0LjI1NiA4NS4yMTYgMzIuODk2IDE2NC44OTYgMzkuODA4IDIxNi43MzYgMzkuODA4IDQxLjM3NiAwIDY3LjU4NC00LjM1MiA2OC42NzItNC41NDRhMzIgMzIgMCAwIDAgMTkuMTM2LTUyLjE2Yy0yNy4wMDgtMzIuMDk2LTU4LjU5Mi03MS44MDgtNjcuMjk2LTg1LjM0NCAwLjI4OC0wLjU3NiAwLjUxMi0xLjAyNCAwLjM1Mi0xLjE1MiAyMi44NDggMy40ODggMTYyLjQzMiA1Ny45NTIgMjY1LjI4IDk5Ljg0djEwNi40OTZ6IiBwLWlkPSI0MjA4Ij48L3BhdGg+PC9zdmc+JzsKdmFyIHNldF9zdmcgPSAnPHN2ZyB0PSIxNTkyOTgyOTcwMzc1IiBjbGFzcz0iaWNvbiIgdmlld0JveD0iMCAwIDEwMjQgMTAyNCIgdmVyc2lvbj0iMS4xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHAtaWQ9IjEwMTEyIiB3aWR0aD0iNDgiIGhlaWdodD0iNDgiPjxwYXRoIGQ9Ik0yNTYgMTAyLjRoNTEybDI1NiAyNTYtNTEyIDU2My4yTDAgMzU4LjR6IiBmaWxsPSIjMjZDRDYzIiBwLWlkPSIxMDExMyI+PC9wYXRoPjxwYXRoIGQ9Ik0yNTYgMTAyLjRsMjU2IDI1Nkgwek03NjggMTAyLjRsMjU2IDI1Nkg1MTJ6TTUxMiA5MjEuNmwyMDQuOC01NjMuMkgzMDcuMnoiIGZpbGw9IiMxNEEzNDUiIHAtaWQ9IjEwMTE0Ij48L3BhdGg+PC9zdmc+JzsKCi8vIGpxdWVyeS5zaG93dGlwcy5qcwooZnVuY3Rpb24oalF1ZXJ5KSB7CglqUXVlcnkuZm4uc2hvd1RpcHMgPSBmdW5jdGlvbihvcHRpb25zLGVsZW0pewoJCXZhciBjb25maWcgPSB7CgkJCXNraW46InRyaXBzIiwKCQkJY29udGVudDokKHRoaXMpLmF0dHIoInRpcHMiKXx8IuW8ueWHuuexu+Wei+eahOawlOazoeaPkOekuu+8gSIsICAvL+awlOazoeaPkOekuuWGheWuuemHjOmdouWPr+S7peaYr0hUTUzvvIzpu5jorqTmmL7npLroh6rlrprkuYnnmoTmj5DnpLrlhoXlrrkKCQkJd2lkdGg6ImF1dG8iLCAgLy/pu5jorqTkuLphdXRv77yM5Y+v5Lul5YaZ5YW35L2T5bC65a+45aaC77yaMjAwCgkJCWFsaWduVG86WyJyaWdodCIsImNlbnRlciJdLCAgLy/nrq3lpLTmlrnlkJEKCQkJY29sb3I6WyJyZ2IoMjQ3LCAyMDYsIDU3KSIsIiNGRkZFRjQiXSwgIC8v6L+Z6YeM5piv5o+Q56S65bGC55qE6aOO5qC877yM56ys5LiA5Liq5Y+C5pWw5Li65o+Q56S66L655qGG6aKc6Imy77yM56ys5LqM5Liq5Y+C5pWw5Li65o+Q56S66IOM5pmv6aKc6ImyCgkJCXR5cGU6Imh0bWwiLCAgIC8v5pi+56S65YaF5a6557G75Z6LCgkJCXRyaWdnZXI6ImNsaWNrIiwgICAgLy/pu5jorqTkuLrngrnlh7vmmL7npLrvvIxzaG935Li65Yid5aeL5YyW5bCx5pi+56S677yMaG92ZXLkuLrnu4/ov4fmmL7npLrvvIxmb2N1c+eEpueCueaYvuekuu+8jG1vdXNl6Lef6ZqP6byg5qCH5pi+56S66ZqQ6JePCgkJCXNwYWNpbmc6MTAsICAvL+m7mOiupOS4uueureWktOi3neemu+WvueixoeeahOWwuuWvuAoJCQljdXN0b21pZDoiIiwgIC8v6Ieq5a6a5LmJSUQKCQkJaXNjbG9zZTpmYWxzZSwgICAvL+aYr+WQpuaYvuekuuWFs+mXreaMiemSrgoJCQlzdWNjZXNzIDogbnVsbCAgICAvL+aIkOWKn+WQjueahOWbnuiwg+WHveaVsAoJCX07CgkJdmFyIG9wdHMgPSBqUXVlcnkuZXh0ZW5kKGNvbmZpZywgb3B0aW9ucyk7CgkJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewoJCQl2YXIgdGhhdCA9IGpRdWVyeSh0aGlzKSx0aXBCb3gsdGlwSWQsc2VsZkgsc2VsZlcsY29uSWQsZG9jVywgc3BhID0gb3B0cy5zcGFjaW5nLCBza2luPW9wdHMuc2tpbjsKCQkJdmFyIE1hdGhyYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5OTk5OTk5KTsKICAgICAgICAgICAgdmFyIHBtciA9IChvcHRzLmN1c3RvbWlkPT0iIikgPyBNYXRocmFuZG9tIDpvcHRzLmN1c3RvbWlkLnJlcGxhY2UoL1sjLl0vLCAiIik7CgkJCXZhciBwb2ludGVyPW9wdHMuYWxpZ25Uby5sZW5ndGg9PT0xID8gJycrb3B0cy5hbGlnblRvWzBdKycnIDogJycrb3B0cy5hbGlnblRvWzBdKyctJytvcHRzLmFsaWduVG9bMV0rJyc7CgoJCQlpZih0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJykgewoJCQkJaWYoZWxlbSA9PSJzaG93Iil7CgkJCQkJalF1ZXJ5KCcjdGlwJytwbXIpLnNob3coKTsgIGpRdWVyeSgiI2NvbiIrcG1yKS5odG1sKG9wdHMuY29udGVudCk7CgkJCQkJc2hvd1Bvc2l0aW9uKHBvaW50ZXIsalF1ZXJ5KCcjdGlwJytwbXIpKTsKCQkJCQl9OwoJCQkJaWYoZWxlbSA9PSJoaWRlIil7alF1ZXJ5KCcjdGlwJytwbXIpLmhpZGUoKX07CgkJCX07CgkJCWlmKHR5cGVvZiBlbGVtID09ICcnIHx8IHR5cGVvZiBlbGVtID09IHVuZGVmaW5lZCl7cmV0dXJuIHRydWV9OwoJCQlpZihqUXVlcnkoJyN0aXAnK3BtcikubGVuZ3RoPT0xKXtyZXR1cm4gZmFsc2U7fQoJCQl0aXBCb3g9alF1ZXJ5KCc8ZGl2IGNsYXNzPSInK3NraW4rJyAnK3NraW4rJy0nK3BvaW50ZXIrJyIgaWQ9InRpcCcrcG1yKyciPjxpPjwvaT48ZW0+PC9lbT48ZGl2IGNsYXNzPSInK3NraW4rJ2NvbiIgaWQ9ImNvbicrcG1yKyciPjwvZGl2PjwvZGl2PicpLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpOwoJCQl0aXBJZCA9IGpRdWVyeSgiI3RpcCIrcG1yKTsKCQkJY29uSWQgPSBqUXVlcnkoIiNjb24iK3Btcik7CgoJCQl2YXIgZWRnZWNvbG9yPSdib3JkZXItJytvcHRzLmFsaWduVG9bMF0rJy1jb2xvcicsIHRmaT10aXBJZC5maW5kKCJpIiksIHRmZW09dGlwSWQuZmluZCgiZW0iKSwgdGZpZW09dGlwSWQuZmluZCgiaSxlbSIpOwoJCQl0aXBJZC5jc3Moeydwb3NpdGlvbic6J2Fic29sdXRlJyxib3JkZXI6JzFweCBzb2xpZCcsJ2JvcmRlci1jb2xvcic6b3B0cy5jb2xvclswXSwnYmFja2dyb3VuZC1jb2xvcic6b3B0cy5jb2xvclsxXX0pOwoJCQlpZihvcHRzLmFsaWduVG9bMV09PSdjZW50ZXInKXsgdmFyIG9mZnBvcz01MCxwZXJjZW49IiUiOyB9ZWxzZXsgdmFyIG9mZnBvcz01LHBlcmNlbj0icHgiOyB9OwoJCQl0ZmllbS5jc3Moe3dpZHRoOjAsaGVpZ2h0OjAsY29udGVudDonJywncG9zaXRpb24nOidhYnNvbHV0ZSd9KQoJCQl0ZmkuY3NzKHtib3JkZXI6JzhweCBzb2xpZCB0cmFuc3BhcmVudCcsJ3otaW5kZXgnOjV9KTsKCQkJdGZlbS5jc3Moe2JvcmRlcjonN3B4IHNvbGlkIHRyYW5zcGFyZW50Jywnei1pbmRleCc6MTB9KTsKCQkJc3dpdGNoIChwb2ludGVyKSB7CgkJCQljYXNlICd0b3AtY2VudGVyJzoKCQkJCWNhc2UgJ2JvdHRvbS1jZW50ZXInOgoJCQkJY2FzZSAndG9wLWxlZnQnOgoJCQkJY2FzZSAnYm90dG9tLWxlZnQnOgoJCQkJCXZhciBwb2k9ImxlZnQiOwoJCQkJCWlmKHBvaW50ZXI9PSd0b3AtY2VudGVyJyB8fCBwb2ludGVyPT0nYm90dG9tLWNlbnRlcicpewoJCQkJCQl0ZmkuY3NzKHsibWFyZ2luLWxlZnQiOiItOHB4In0pOwoJCQkJCQl0ZmVtLmNzcyh7Im1hcmdpbi1sZWZ0IjoiLTdweCJ9KTsKCQkJCQl9CgkJCQkgICAgYnJlYWs7CgkJCQljYXNlICdsZWZ0LWNlbnRlcic6CgkJCQljYXNlICdyaWdodC1jZW50ZXInOgoJCQkJY2FzZSAnbGVmdC10b3AnOgoJCQkJY2FzZSAncmlnaHQtdG9wJzoKCQkJCQl2YXIgcG9pPSJ0b3AiOwoJCQkJCWlmKHBvaW50ZXI9PSdsZWZ0LWNlbnRlcicgfHwgcG9pbnRlcj09J3JpZ2h0LWNlbnRlcicpewoJCQkJCQl0ZmkuY3NzKHsibWFyZ2luLXRvcCI6Ii04cHgifSk7CgkJCQkJCXRmZW0uY3NzKHsibWFyZ2luLXRvcCI6Ii03cHgifSk7CgkJCQkJfQoJCQkJICAgIGJyZWFrOwoJCQkJZGVmYXVsdDoKCQkJCQl2YXIgcG9pPSJyaWdodCI7CgkJCQkgICAgYnJlYWs7CgkJCX07CgoJCQlpZihwb2ludGVyPT0nZm9sbG93Jyl7CgkJCQl0ZmkuY3NzKHsnYm9yZGVyLWJvdHRvbS1jb2xvcic6b3B0cy5jb2xvclswXSxsZWZ0OicnK29mZnBvcytwZXJjZW4rJycsYm90dG9tOicxMDAlJ30pOwoJCQkJdGZlbS5jc3Moeydib3JkZXItYm90dG9tLWNvbG9yJzpvcHRzLmNvbG9yWzFdLGxlZnQ6JycrKG9mZnBvcysob3B0cy5hbGlnblRvWzFdPT0nY2VudGVyJz8wOjEpKStwZXJjZW4rJycsYm90dG9tOicxMDAlJ30pOwoJCQl9ZWxzZXsKCQkJCXRmaS5jc3MoZWRnZWNvbG9yLG9wdHMuY29sb3JbMF0pLmNzcyhwb2ksJycrb2ZmcG9zK3BlcmNlbisnJyk7CgkJCQl0ZmVtLmNzcyhlZGdlY29sb3Isb3B0cy5jb2xvclsxXSkuY3NzKHBvaSwnJysob2ZmcG9zKyhvcHRzLmFsaWduVG9bMV09PSdjZW50ZXInPzA6MSkpK3BlcmNlbisnJyk7CgkJCQl0ZmllbS5jc3Mob3B0cy5hbGlnblRvWzBdLCcxMDAlJyk7CgkJCX07CgoJCQlzd2l0Y2ggKG9wdHMudHlwZSkgewoJCQkJY2FzZSAnaHRtbCc6Y29uSWQuaHRtbChvcHRzLmNvbnRlbnQpOyBicmVhazsKCQkJCWNhc2UgJ2lkJyAgOgoJCQkJICAgIHZhciB0ZW1waWQ9alF1ZXJ5KG9wdHMuY29udGVudCkgLHdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCQkJCQlpZih0ZW1waWQuY3NzKCJkaXNwbGF5IikgPT0gIm5vbmUiKXsgIHRlbXBpZC5jc3Moe2Rpc3BsYXk6ImJsb2NrIn0pOyB9CgkJCQkJY29uSWQuYXBwZW5kKHRlbXBpZCk7CgkJCQkgICAgYnJlYWs7CgkJCX07CgkJCWlmKG9wdHMuaXNjbG9zZSl7CgkJCQlqUXVlcnkoJzxzcGFuIGNsYXNzPSInK3NraW4rJ2Nsb3NlIiBpZD0iY2xvc2UnK3BtcisnIj4mdGltZXM7PC9zcGFuPicpLmFwcGVuZFRvKHRpcElkKTsKCQkJCXRpcElkLmZpbmQoIiNjbG9zZSIrcG1yKyIiKS5vbigiY2xpY2siLGZ1bmN0aW9uKCl7dGlwSWQuaGlkZSgpO30pOwoJCQl9CgoJCQlpZih0eXBlb2Ygb3B0cy53aWR0aCA9PT0gJ3N0cmluZycpewoJCQkJZG9jVyA9IHBhcnNlSW50KGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgqKG9wdHMud2lkdGgucmVwbGFjZSgnJScsJycpLzEwMCkpOwoJCQkJKHR5cGVvZiBvcHRzLndpZHRoID09ICdhdXRvJyB8fCB0eXBlb2Ygb3B0cy53aWR0aCA9PSAnJykgPyB0aXBCb3guY3NzKHt3aWR0aDonYXV0byd9KSA6IHRpcEJveC5jc3Moe3dpZHRoOmRvY1d9KTsKCQkJCXRpcEJveC5oZWlnaHQoKTsKCQkJfWVsc2V7CgkJCQl0aXBCb3gud2lkdGgob3B0cy53aWR0aCkuaGVpZ2h0KCk7CgkJCX0KICAgICAgICAgICAgZnVuY3Rpb24gc2hvd1Bvc2l0aW9uKHBvaW50ZXIsY2VsbCl7CgkJCQl2YXIgc2VsZkggPSB0aGF0Lm91dGVySGVpZ2h0KHRydWUpLCBzZWxmVyA9IHRoYXQub3V0ZXJXaWR0aCh0cnVlKTsKCQkJCXZhciBwb3N0PXRoYXQub2Zmc2V0KCkudG9wLCBwb3NsPXRoYXQub2Zmc2V0KCkubGVmdDsKCQkJCXZhciB0aXBDZWxsPShjZWxsPT0iIiB8fCBjZWxsPT11bmRlZmluZWQpID8gdGlwSWQgOiBjZWxsOwoJCQkgICAgdmFyIHRpcEg9dGlwQ2VsbC5vdXRlckhlaWdodCh0cnVlKSwgdGlwVz10aXBDZWxsLm91dGVyV2lkdGgodHJ1ZSk7CgoJCQkJc3dpdGNoIChwb2ludGVyKSB7CgkJCQkJY2FzZSAndG9wLWxlZnQnOiB0aXBDZWxsLmNzcyh7dG9wOnBvc3QtdGlwSC1zcGEsbGVmdDpwb3NsfSk7IGJyZWFrOwoJCQkJCWNhc2UgJ3RvcC1jZW50ZXInOiB0aXBDZWxsLmNzcyh7dG9wOnBvc3QtdGlwSC1zcGEsbGVmdDpwb3NsLSh0aXBXLzIpKyhzZWxmVy8yKX0pOyBicmVhazsKCQkJCQljYXNlICd0b3AtcmlnaHQnOiB0aXBDZWxsLmNzcyh7dG9wOnBvc3QtdGlwSC1zcGEsbGVmdDpwb3NsLSh0aXBXLXNlbGZXKX0pOyBicmVhazsKCQkJCQljYXNlICdib3R0b20tbGVmdCc6IHRpcENlbGwuY3NzKHt0b3A6cG9zdCtzZWxmSCtzcGEsbGVmdDpwb3NsfSk7IGJyZWFrOwoJCQkJCWNhc2UgJ2JvdHRvbS1jZW50ZXInOiB0aXBDZWxsLmNzcyh7dG9wOnBvc3Qrc2VsZkgrc3BhLGxlZnQ6cG9zbC0odGlwVy8yKSsoc2VsZlcvMil9KTsgYnJlYWs7CgkJCQkJY2FzZSAnYm90dG9tLXJpZ2h0JzogdGlwQ2VsbC5jc3Moe3RvcDpwb3N0K3NlbGZIK3NwYSxsZWZ0OnBvc2wtKHRpcFctc2VsZlcpfSk7IGJyZWFrOwoJCQkJCWNhc2UgJ2xlZnQtdG9wJzogdGlwQ2VsbC5jc3Moe3RvcDpwb3N0LGxlZnQ6cG9zbC10aXBXLXNwYX0pOyBicmVhazsKCQkJCQljYXNlICdsZWZ0LWNlbnRlcic6IHRpcENlbGwuY3NzKHt0b3A6cG9zdC0odGlwSC8yKSsoc2VsZkgvMiksbGVmdDpwb3NsLXRpcFctc3BhfSk7IGJyZWFrOwoJCQkJCWNhc2UgJ3JpZ2h0LXRvcCc6IHRpcENlbGwuY3NzKHt0b3A6cG9zdCxsZWZ0OnBvc2wrc2VsZlcrc3BhfSk7IGJyZWFrOwoJCQkJCWNhc2UgJ3JpZ2h0LWNlbnRlcic6IHRpcENlbGwuY3NzKHt0b3A6cG9zdC0odGlwSC8yKSsoc2VsZkgvMiksbGVmdDpwb3NsK3NlbGZXK3NwYX0pOyBicmVhazsKCQkJCQljYXNlICdmb2xsb3cnOiB0aGF0Lm1vdXNlbW92ZShmdW5jdGlvbihlKSB7IHRpcENlbGwuY3NzKHt0b3A6ZS5wYWdlWSArIDMwLGxlZnQ6ZS5wYWdlWCAtIDZ9KTsgfSk7IGJyZWFrOwoJCQkJfTsKCQkJfQoJCQl0aXBCb3guaGlkZSgpOwoJCQlzd2l0Y2ggKG9wdHMudHJpZ2dlcil7CgkJCQljYXNlICdzaG93JzpzaG93UG9zaXRpb24ocG9pbnRlcik7dGlwQm94LnNob3coKTticmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJ2NsaWNrJzp0aGF0LmNsaWNrKGZ1bmN0aW9uKCl7c2hvd1Bvc2l0aW9uKHBvaW50ZXIpO3RpcEJveC5zaG93KCk7fSk7YnJlYWs7CgkJCQljYXNlICdob3Zlcic6dGhhdC5ob3ZlcihmdW5jdGlvbigpe3Nob3dQb3NpdGlvbihwb2ludGVyKTt0aXBCb3guc2hvdygpOyB0aXBCb3gub24oIm1vdXNlb3ZlciIsZnVuY3Rpb24oKXtqUXVlcnkodGhpcykuc2hvdygpfSkub24oIm1vdXNlb3V0IixmdW5jdGlvbigpe2pRdWVyeSh0aGlzKS5oaWRlKCl9KX0sZnVuY3Rpb24oKXt0aXBCb3guaGlkZSgpO30pO2JyZWFrOwoJCQkJY2FzZSAnZm9jdXMnOnRoYXQuZm9jdXMoZnVuY3Rpb24oKXtzaG93UG9zaXRpb24ocG9pbnRlcik7dGlwQm94LnNob3coKTt9KTsgIHRoYXQuYmx1cihmdW5jdGlvbigpe3RpcEJveC5oaWRlKCk7fSk7YnJlYWs7CgkJCQljYXNlICdtb3VzZSc6dGhhdC5ob3ZlcihmdW5jdGlvbigpe3Nob3dQb3NpdGlvbihwb2ludGVyKTt0aXBCb3guc2hvdygpO30sZnVuY3Rpb24oKXt0aXBCb3guaGlkZSgpO30pO2JyZWFrOwoJCQl9OwoJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7b3B0cy5zdWNjZXNzICYmIG9wdHMuc3VjY2VzcygpO30sIDEpOwoJCX0pOwoJfQp9KShqUXVlcnkpOwoKKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICBsKCJDU0ROR3JlZW5lciBWIiArIHZlcnNpb24pOwogICAgTlByb2dyZXNzLnN0YXJ0KCk7CgogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgYmxvY2tVUkwgPSBjdXJyZW50VVJMLnNwbGl0KCIvIikubGVuZ3RoOwogICAgICAgIHZhciBtYWluID0gLyh3d3dcLmNzZG5cLm5ldFwvKSQvOwogICAgICAgIHZhciBtYWluTmF2ID0gL25hdi87CiAgICAgICAgdmFyIGFydGljbGUgPSAvYXJ0aWNsZS87CiAgICAgICAgdmFyIGJicyA9IC9iYnNcLmNzZG5cLm5ldC87CiAgICAgICAgdmFyIGJsb2cgPSAvYmxvZ1wuY3NkblwubmV0LzsKICAgICAgICB2YXIgYmxvZzIgPSAvXC9hcnRpY2xlXC9saXN0XC8vOwogICAgICAgIHZhciBkb3dubG9hZCA9IC9kb3dubG9hZFwuY3NkblwubmV0LzsKICAgICAgICB2YXIgbG9naW4gPSAvcGFzc3BvcnRcLmNzZG5cLm5ldC87CiAgICAgICAgdmFyIHpvbmUgPSAvbWVcLmNzZG5cLm5ldC87CiAgICAgICAgdmFyIG90aGVyID0gLyh3d3dcLmNzZG5cLm5ldFwvKS87CiAgICAgICAgdmFyIG1wID0gL21wXC5jc2RuXC5uZXQvOwoKICAgICAgICAvLyDmlbDnu4TliJ3lp4vljJYKICAgICAgICBsaXN0ID0gW107CiAgICAgICAgLy8g5aS06YOo5YiGCiAgICAgICAgLy8gQVBQCiAgICAgICAgLy8gcHV0KCIuYXBwLWFwcCIpOwogICAgICAgIC8vIFZJUAogICAgICAgIHB1dCgiLnZpcC1jYWlzZSIpOwogICAgICAgIC8vIOiusOW9leS9oOeahOaIkOmVv+WOhueoi++8iOiusOS4quavm++8iQogICAgICAgIHB1dCgiI3dyaXRlR3VpZGUiKTsKICAgICAgICAvLyDmlrDpgJrnn6XlsI/lnIbngrnvvIjmnKrnmbvlvZXmiY3mtojmjonvvIkKICAgICAgICBpZiAoJCgiLnVzZXJpbmZvIGEiKS50ZXh0KCkgPT09ICfnmbvlvZUv5rOo5YaMJykgewogICAgICAgICAgICBwdXQoIiNtc2ctY2lyY2xlIik7CiAgICAgICAgfQogICAgICAgIC8vIOmhtumDqOiwt+atjOW5v+WRigogICAgICAgIHB1dCgiLmFkc2J5Z29vZ2xlIik7CiAgICAgICAgLy8g5oKs5rWu5Zyo6aG25qCP5oyJ6ZKu5LiK5Ye6546w55qE5LqM57u056CBCiAgICAgICAgcHV0KCIuYXBwQ29udHJvbCIpOwogICAgICAgIC8vIOmhtumDqOW5v+WRigogICAgICAgIHB1dCgiLmFkdmVydC1iZyIpOwoKICAgICAgICBpZiAobWFpbi50ZXN0KGN1cnJlbnRVUkwpIHx8IG1haW5OYXYudGVzdChjdXJyZW50VVJMKSkgewogICAgICAgICAgICBsKCLmraPlnKjkvJjljJbkuLvpobXkvZPpqowuLi4iKTsKICAgICAgICAgICAgLy8g5bi46KeECiAgICAgICAgICAgIC8vIOWktOmDqOW5v+WRigogICAgICAgICAgICBwdXQoIi5iYW5uZXItYWQtYm94Iik7CiAgICAgICAgICAgIC8vIOW1jOWFpeW5v+WRigogICAgICAgICAgICBwdXQoIiNrcF9ib3hfMjExIik7CiAgICAgICAgICAgIC8vIOWPs+S+p+W5v+WRigogICAgICAgICAgICBwdXQoIi5zbGlkZS1vdXRlciIpOwogICAgICAgICAgICAvLyDlj7Pkvqfor6bmg4UKICAgICAgICAgICAgcHV0KCIucGVyc2lvbl9hcnRpY2xlIik7CiAgICAgICAgICAgIC8vIOWPs+S+p+aOqOiNkAogICAgICAgICAgICAkKCIuZmVlZF9jb21wYW55IikucGFyZW50KCkucmVtb3ZlKCk7CiAgICAgICAgICAgIC8vIOW5v+WRiui9ruaSrQogICAgICAgICAgICBwdXQoIi5lbC1jYXJvdXNlbF9fY29udGFpbmVyIik7CiAgICAgICAgICAgIC8vIOmhtumDqOaoquW5hQogICAgICAgICAgICBwdXQoIi50b29sYmFyLWFkdmVydCIpOwogICAgICAgICAgICAvLyDpobbmoI9WSVDpgInpobkKICAgICAgICAgICAgJCgnLnRvb2xiYXItc3ViTWVudS1ib3gnKS5maW5kKCJbaHJlZj0naHR0cHM6Ly9tYWxsLmNzZG4ubmV0L3ZpcCddIikucGFyZW50KCkucmVtb3ZlKCk7CiAgICAgICAgICAgIGNsZWFuKDEwKTsKICAgICAgICAgICAgLy8gY29tbW9uKDUsIDEwKTsKICAgICAgICAgICAgbG9vcCgzKTsKICAgICAgICAgICAgbG9vcCgxKTsKICAgICAgICB9IGVsc2UgaWYgKChibG9nLnRlc3QoY3VycmVudFVSTCkgJiYgYmxvY2tVUkwgPT09IDQpIHx8IGJsb2cyLnRlc3QoY3VycmVudFVSTCkpIHsKICAgICAgICAgICAgbCgi5q2j5Zyo5LyY5YyW5Liq5Lq65Y2a5a6i5Li76aG15L2T6aqMLi4uIik7CiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICAvLyDlpLTpg6jlub/lkYoKICAgICAgICAgICAgcHV0KCIuYmFubmVyLWFkLWJveCIpOwogICAgICAgICAgICAvLyDlj7Pkvqflub/lkYoKICAgICAgICAgICAgcHV0KCIuc2xpZGUtb3V0ZXIiKTsKICAgICAgICAgICAgLy8g5Y+z5L6n6K+m5oOFCiAgICAgICAgICAgIHB1dCgiLnBlcnNpb25fYXJ0aWNsZSIpOwogICAgICAgICAgICAvLyDlt6bkvqflub/lkYoKICAgICAgICAgICAgcHV0KCIubWI4Iik7CiAgICAgICAgICAgIHB1dCgiI2twX2JveF81MDMiKTsKICAgICAgICAgICAgcHV0KCIja3BfYm94XzIxNCIpOwogICAgICAgICAgICBjbGVhbigxMCk7CiAgICAgICAgICAgIC8vIGNvbW1vbig1LCAxMCk7CiAgICAgICAgICAgIGxvb3AoMyk7CiAgICAgICAgICAgIGxvb3AoMSk7CiAgICAgICAgfSBlbHNlIGlmIChhcnRpY2xlLnRlc3QoY3VycmVudFVSTCkgJiYgIW1wLnRlc3QoY3VycmVudFVSTCkpIHsKICAgICAgICAgICAgbCgi5q2j5Zyo5LyY5YyW6ZiF6K+75L2T6aqMLi4uIik7CiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICAvLyDlj7Pkvqflub/lkYrvvIzmlL7liLDnrKzkuIDkuKrmuIXpmaQKICAgICAgICAgICAgLy8gcHV0KCIucmVjb21tZW5kLXJpZ2h0Iik7CiAgICAgICAgICAgIHB1dCgiI2FkZEFkQm94Iik7CiAgICAgICAgICAgIC8vIHB1dCgiLmFzaWRlLWJveC5raW5kX3BlcnNvbi5kLWZsZXguZmxleC1jb2x1bW4iKTsKICAgICAgICAgICAgcHV0KCIucmVjb21tZW5kLXRvcC1hZGJveCIpOwogICAgICAgICAgICAvLyBwdXQoIi5yZWNvbW1lbmQtbGlzdC1ib3guZC1mbGV4LmZsZXgtY29sdW1uLmFzaWRlLWJveCIpOwogICAgICAgICAgICAvLyDlt6bkvqflub/lkYoKICAgICAgICAgICAgLy8gcHV0KCIjY29udGFpbmVyIik7CiAgICAgICAgICAgIC8vIOW/q+adpeWGmeWNmuWuouWQpwogICAgICAgICAgICBwdXQoIi5ibG9nX3RpcF9ib3giKTsKICAgICAgICAgICAgLy8g5o6o6I2Q5YWz5rOo55So5oi3CiAgICAgICAgICAgIHB1dCgiLmJsb2ctZXhwZXJ0LXJlY29tbWVuZC1ib3giKTsKICAgICAgICAgICAgLy8g5Y+z5LiL6KeSVklQCiAgICAgICAgICAgIHB1dCgiLm1lYXUtZ290b3AtYm94Iik7CiAgICAgICAgICAgIC8vIOW5v+WRigogICAgICAgICAgICBwdXQoIi5tZWRpYXZfYWQiKTsKICAgICAgICAgICAgcHV0KCIucHVsbGxvZy1ib3giKTsKICAgICAgICAgICAgcHV0KCIucmVjb21tZW5kLWFkLWJveCIpOwogICAgICAgICAgICBwdXQoIi5ib3gtc2hhZG93Iik7CiAgICAgICAgICAgIHB1dCgiLnR5cGVfaG90X3dvcmQiKTsKICAgICAgICAgICAgcHV0KCIuZm91cnRoX2NvbHVtbiIpOwogICAgICAgICAgICAvLyDpq5jliIbovqjnjofml7blj7Pkvqfmlofnq6DmjqjojZAKICAgICAgICAgICAgLy8gcHV0KCIucmlnaHQtaXRlbSIpOwogICAgICAgICAgICAvLyDlub/lkYoKICAgICAgICAgICAgcHV0KCIjYXNpZGVGb290ZXIiKTsKICAgICAgICAgICAgcHV0KCIjYWQtZGl2Iik7CiAgICAgICAgICAgIHB1dCgiIzQ3OSIpOwogICAgICAgICAgICBwdXQoIiM0ODAiKTsKICAgICAgICAgICAgLy8g5omT6LWPCiAgICAgICAgICAgIHB1dCgiLnBvc3RUaW1lIik7CiAgICAgICAgICAgIC8vIOivvueoi+aOqOiNkAogICAgICAgICAgICBwdXQoIi50MCIpOwogICAgICAgICAgICAvLyDliIbkuqvmtbfmiqUKICAgICAgICAgICAgcHV0KCIuc2hhcmVTdWdnZXN0Iik7CiAgICAgICAgICAgIC8vIOW6lemDqOS4u+mimAogICAgICAgICAgICBwdXQoIi50ZW1wbGF0ZS1ib3giKTsKICAgICAgICAgICAgLy8g6K+E6K665Yy65bm/5ZGKCiAgICAgICAgICAgIHB1dCgiZGl2I2RtcF9hZF81OCIpOwogICAgICAgICAgICAvLyDmiZPotY8KICAgICAgICAgICAgcHV0KCIucmV3YXJkLXVzZXItYm94Iik7CiAgICAgICAgICAgIC8vIOWPs+S+p+aJk+i1j+aMiemSrgogICAgICAgICAgICBwdXQoIi50by1yZXdhcmQiKTsKICAgICAgICAgICAgLy8g5o6o6I2Q5YaF5a655bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLnJlY29tbWVuZC1yZWNvbW1lbmQtYm94Iik7CiAgICAgICAgICAgIC8vIOWPs+S+p+W5v+WRigogICAgICAgICAgICBwdXQoIi5pbmRleFN1cGVyaXNlIik7CiAgICAgICAgICAgIC8vIOaKouaymeWPkeinkuaghwogICAgICAgICAgICBwdXQoIi5jb21tZW50LXNvZmEtZmxhZyIpOwogICAgICAgICAgICAvLyDpobVqaW8KICAgICAgICAgICAgcHV0KCIuYm90dG9tLXB1Yi1mb290ZXIiKTsKICAgICAgICAgICAgLy8g55m75b2V5p+l55yL5pyq6K+75raI5oGvCiAgICAgICAgICAgIHB1dCgiLnRvb2xiYXItbm90aWNlLWJ1YmJsZSIpOwogICAgICAgICAgICAvLyDlj7Pkvqflub/lkYoKICAgICAgICAgICAgcHV0KCIucmVjb21tZW5kLXRvcC1hZGJveCIpOwogICAgICAgICAgICAvLyDlj7Pkvqflm5vkuKrlub/lkYoKICAgICAgICAgICAgcHV0KCIucHJvZ3JhbW1lcjFCb3giKTsKICAgICAgICAgICAgcHV0KCIucHJvZ3JhbW1lcjJCb3giKTsKICAgICAgICAgICAgcHV0KCIucHJvZ3JhbW1lcjNCb3giKTsKICAgICAgICAgICAgcHV0KCIucHJvZ3JhbW1lcjRCb3giKTsKICAgICAgICAgICAgLy8g54K56LWe5rCU5rOhCiAgICAgICAgICAgIHB1dCgiLnRyaXBsZXQtcHJvbXB0Iik7CiAgICAgICAgICAgIC8vIOmhtumDqOaoquW5hQogICAgICAgICAgICBwdXQoIi50b29sYmFyLWFkdmVydCIpOwogICAgICAgICAgICAvLyDlupXpg6jkv6Hmga8KICAgICAgICAgICAgcHV0KCIuYmxvZy1mb290ZXItYm90dG9tIik7CiAgICAgICAgICAgIGNsZWFuKDEwKTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgLy8g5bGV5byA6K+E6K6655qE5omA5pyJ5Zue5aSNCiAgICAgICAgICAgICAgICQoJy5idG4tcmVhZC1yZXBseScpLmNsaWNrKCk7CiAgICAgICAgICAgIH0sIDE1MDApOwogICAgICAgICAgICAvLyDkuLvliqjliqDlhaXlj7PkvqfmoI8KICAgICAgICAgICAgaWYgKCQoIi5yZWNvbW1lbmQtcmlnaHQiKS5sZW5ndGggPT09IDApIHskKCIjbWFpbkJveCIpLmFmdGVyKCc8ZGl2IGNsYXNzPSJyZWNvbW1lbmQtcmlnaHQgIGFsaWduLWl0ZW1zLXN0cmV0Y2ggY2xlYXJmaXgiIGlkPSJyaWdodEFzaWRlIj48YXNpZGUgY2xhc3M9InJlY29tbWVuZC1yaWdodF9hc2lkZSI+PGRpdiBpZD0icmVjb21tZW5kLXJpZ2h0IiBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogNTJweDsgb3ZlcmZsb3c6IHNjcm9sbDsiPjwvZGl2PjwvYXNpZGU+PC9kaXY+Jyk7fQogICAgICAgICAgICAvLyDnu7/ljJborr7nva4KICAgICAgICAgICAgY29tbW9uKDYsIDEpOwogICAgICAgICAgICAvLyDlsY/luZXpgILphY0KICAgICAgICAgICAgY29tbW9uKDQsIDEpOwogICAgICAgICAgICAvLyDor4TorroKICAgICAgICAgICAgY29tbW9uKDEsIDMwKTsKICAgICAgICAgICAgLy8g5YW25a6DCiAgICAgICAgICAgIGNvbW1vbigyLCAyMCk7CiAgICAgICAgICAgIC8vIOmhtumDqOaYvuekuuS9nOiAheS/oeaBrwogICAgICAgICAgICBjb21tb24oOCwgMSk7CiAgICAgICAgICAgIC8vIOW+queOr+e6v+eoi+W8gOWniwogICAgICAgICAgICBsb29wKDIpOwogICAgICAgICAgICBsb29wKDMpOwogICAgICAgIH0gZWxzZSBpZiAoYmJzLnRlc3QoY3VycmVudFVSTCkpIHsKICAgICAgICAgICAgbCgi5q2j5Zyo5LyY5YyW6K665Z2b5L2T6aqMLi4uIik7CiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICAvLyDor4TorrrltYzlhaXlsI/lub/lkYoKICAgICAgICAgICAgcHV0KCIucG9zdF9yZWNvbW1lbmQiKTsKICAgICAgICAgICAgLy8g5bqV6YOo5o6o6I2QCiAgICAgICAgICAgIHB1dCgiI3Bvc3RfZmVlZF93cmFwIik7CiAgICAgICAgICAgIC8vIOW6lemDqOebuOWFs+aWh+eroOmHjOmdoueahOW5v+WRigogICAgICAgICAgICBwdXQoIi5iYnNfZmVlZF9hZF9ib3giKTsKICAgICAgICAgICAgcHV0KCIucmVjb21tZW5kLWFkLWJveCIpOwogICAgICAgICAgICAvLyDlupXpg6jnm7jlhbPmloflrZfph4zpnaLnmoTng63or43mj5DnpLoKICAgICAgICAgICAgcHV0KCIudHlwZV9ob3Rfd29yZCIpOwogICAgICAgICAgICAvLyDlupXpg6jok53oibJmbGV45bGe5oCn55qE5bm/5ZGK5qCPK+eZu+W9leazqOWGjOahhgogICAgICAgICAgICBwdXQoIi5wdWxsbG9nLWJveCIpOwogICAgICAgICAgICAvLyDnjJzkvaDllpzmrKIKICAgICAgICAgICAgcHV0KCIucGVyc29uYWxpemVkLXJlY29tbWVuZC1ib3giKTsKICAgICAgICAgICAgLy8g5Y+R5biW5YeP5Y2K5o+Q56S6CiAgICAgICAgICAgIHB1dCgiLnRvdGFzdC1ib3giKTsKICAgICAgICAgICAgLy8g6aG26YOo5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLnJlY29tbWVuZC1yaWdodCIpOwogICAgICAgICAgICAvLyDpobbpg6jlub/lkYoKICAgICAgICAgICAgcHV0KCIuYWRfdG9wIik7CiAgICAgICAgICAgIGNsZWFuKDEwKTsKICAgICAgICAgICAgLy8g5bGV5byACiAgICAgICAgICAgIGNvbW1vbigzLCA1MCk7CiAgICAgICAgICAgIC8vIGNvbW1vbig1LCAxMCk7CiAgICAgICAgICAgIGxvb3AoMyk7CiAgICAgICAgfSBlbHNlIGlmIChkb3dubG9hZC50ZXN0KGN1cnJlbnRVUkwpKSB7CiAgICAgICAgICAgIGwoIuato+WcqOS8mOWMluS4i+i9vemhteS9k+mqjC4uLiIpOwogICAgICAgICAgICAvLyDluLjop4QKICAgICAgICAgICAgcHV0KCIuZml4ZWRfZGwiKTsKICAgICAgICAgICAgcHV0KCJpbmRleFN1cGVyaXNlIik7CiAgICAgICAgICAgIC8vIOWPs+S+p+aOqOiNkAogICAgICAgICAgICBwdXQoIi5jb250ZW50X3JlY29tIik7CiAgICAgICAgICAgIGNsZWFuKDEwKTsKICAgICAgICAgICAgLy8gY29tbW9uKDUsIDEwKTsKICAgICAgICAgICAgbG9vcCgzKTsKICAgICAgICB9IGVsc2UgaWYgKGxvZ2luLnRlc3QoY3VycmVudFVSTCkpIHsKICAgICAgICAgICAgbCgi5q2j5Zyo5LyY5YyW55m75b2V6aG15L2T6aqMLi4uIik7CiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICAvLyDnmbvlvZXnlYzpnaLlpKflm77lub/lkYoKICAgICAgICAgICAgcHV0KCIubWFpbi10dSIpOwogICAgICAgICAgICBjbGVhbigxMCk7CiAgICAgICAgICAgIC8vIGNvbW1vbig1LCAxMCk7CiAgICAgICAgICAgIGxvb3AoMyk7CiAgICAgICAgfSBlbHNlIGlmICh6b25lLnRlc3QoY3VycmVudFVSTCkpIHsKICAgICAgICAgICAgbCgi5q2j5Zyo5LyY5YyW5Liq5Lq656m66Ze05L2T6aqMLi4uIik7CiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICBjbGVhbigxMCk7CiAgICAgICAgICAgIGNvbW1vbig3LCAxMCk7CiAgICAgICAgICAgIC8vIGNvbW1vbig1LCAxMCk7CiAgICAgICAgICAgIGxvb3AoMyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbCgi5ZOm6LGB77yM5aW95YGP6Zeo55qE6aG16Z2i77yM5oiR5p2l6K+V552A5LyY5YyW5LiA5LiL5ZOmLi4uIik7CiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICAvLyDlsZXlvIDlhajmlocKICAgICAgICAgICAgJCgnLnJlYWRtb3JlX2J0bicpLmNsaWNrKCk7CiAgICAgICAgICAgIC8vICoqKiBpbmRleCAqKioKICAgICAgICAgICAgLy8g5aS06YOo5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLmJhbm5lci1hZC1ib3giKTsKICAgICAgICAgICAgLy8g5bWM5YWl5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiI2twX2JveF8yMTEiKTsKICAgICAgICAgICAgLy8g5Y+z5L6n5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLnNsaWRlLW91dGVyIik7CiAgICAgICAgICAgIC8vIOWPs+S+p+ivpuaDhQogICAgICAgICAgICBwdXQoIi5wZXJzaW9uX2FydGljbGUiKTsKICAgICAgICAgICAgLy8g5Y+z5L6n5o6o6I2QCiAgICAgICAgICAgICQoIi5mZWVkX2NvbXBhbnkiKS5wYXJlbnQoKS5yZW1vdmUoKTsKICAgICAgICAgICAgLy8gKioqIGFydGljbGUgKioqCiAgICAgICAgICAgIC8vIOW4uOinhAogICAgICAgICAgICAvLyDlj7Pkvqflub/lkYrvvIzmlL7liLDnrKzkuIDkuKrmuIXpmaQKICAgICAgICAgICAgcHV0KCIjYWRkQWRCb3giKTsKICAgICAgICAgICAgcHV0KCIucmVjb21tZW5kLXRvcC1hZGJveCIpOwogICAgICAgICAgICAvLyDlv6vmnaXlhpnljZrlrqLlkKcKICAgICAgICAgICAgcHV0KCIuYmxvZ190aXBfYm94Iik7CiAgICAgICAgICAgIC8vIOaOqOiNkOWFs+azqOeUqOaItwogICAgICAgICAgICBwdXQoIi5ibG9nLWV4cGVydC1yZWNvbW1lbmQtYm94Iik7CiAgICAgICAgICAgIC8vIOWPs+S4i+inklZJUAogICAgICAgICAgICBwdXQoIi5tZWF1LWdvdG9wLWJveCIpOwogICAgICAgICAgICAvLyDlub/lkYoKICAgICAgICAgICAgcHV0KCIubWVkaWF2X2FkIik7CiAgICAgICAgICAgIHB1dCgiLnB1bGxsb2ctYm94Iik7CiAgICAgICAgICAgIHB1dCgiLnJlY29tbWVuZC1hZC1ib3giKTsKICAgICAgICAgICAgcHV0KCIuYm94LXNoYWRvdyIpOwogICAgICAgICAgICBwdXQoIi50eXBlX2hvdF93b3JkIik7CiAgICAgICAgICAgIHB1dCgiLmZvdXJ0aF9jb2x1bW4iKTsKICAgICAgICAgICAgLy8g5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiI2FzaWRlRm9vdGVyIik7CiAgICAgICAgICAgIHB1dCgiI2FkLWRpdiIpOwogICAgICAgICAgICBwdXQoIiM0NzkiKTsKICAgICAgICAgICAgcHV0KCIjNDgwIik7CiAgICAgICAgICAgIC8vIOaJk+i1jwogICAgICAgICAgICBwdXQoIi5wb3N0VGltZSIpOwogICAgICAgICAgICAvLyDor77nqIvmjqjojZAKICAgICAgICAgICAgcHV0KCIudDAiKTsKICAgICAgICAgICAgLy8g5YiG5Lqr5rW35oqlCiAgICAgICAgICAgIHB1dCgiLnNoYXJlU3VnZ2VzdCIpOwogICAgICAgICAgICAvLyDlupXpg6jkuLvpopgKICAgICAgICAgICAgcHV0KCIudGVtcGxhdGUtYm94Iik7CiAgICAgICAgICAgIC8vIOivhOiuuuWMuuW5v+WRigogICAgICAgICAgICBwdXQoImRpdiNkbXBfYWRfNTgiKTsKICAgICAgICAgICAgLy8g5omT6LWPCiAgICAgICAgICAgIHB1dCgiLnJld2FyZC11c2VyLWJveCIpOwogICAgICAgICAgICAvLyDlj7PkvqfmiZPotY/mjInpkq4KICAgICAgICAgICAgcHV0KCIudG8tcmV3YXJkIik7CiAgICAgICAgICAgIC8vIOaOqOiNkOWGheWuueW5v+WRigogICAgICAgICAgICBwdXQoIi5yZWNvbW1lbmQtcmVjb21tZW5kLWJveCIpOwogICAgICAgICAgICAvLyDlj7Pkvqflub/lkYoKICAgICAgICAgICAgcHV0KCIuaW5kZXhTdXBlcmlzZSIpOwogICAgICAgICAgICAvLyDmiqLmspnlj5Hop5LmoIcKICAgICAgICAgICAgcHV0KCIuY29tbWVudC1zb2ZhLWZsYWciKTsKICAgICAgICAgICAgLy8g6aG1amlvCiAgICAgICAgICAgIHB1dCgiLmJvdHRvbS1wdWItZm9vdGVyIik7CiAgICAgICAgICAgIC8vIOeZu+W9leafpeeci+acquivu+a2iOaBrwogICAgICAgICAgICBwdXQoIi50b29sYmFyLW5vdGljZS1idWJibGUiKTsKICAgICAgICAgICAgLy8g5Y+z5L6n5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLnJlY29tbWVuZC10b3AtYWRib3giKTsKICAgICAgICAgICAgLy8g5a2m6Zmi5by55Ye65bm/5ZGKCiAgICAgICAgICAgICQoIi5mb3VjZV9jbG9zZV9idG4iKS5jbGljaygpOwogICAgICAgICAgICAvLyDlhbblroMKICAgICAgICAgICAgLy8g5aS06YOo5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLmJhbm5lci1hZC1ib3giKTsKICAgICAgICAgICAgLy8g5Y+z5L6n5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLnNsaWRlLW91dGVyIik7CiAgICAgICAgICAgIC8vIOWPs+S+p+ivpuaDhQogICAgICAgICAgICBwdXQoIi5wZXJzaW9uX2FydGljbGUiKTsKICAgICAgICAgICAgLy8g5bem5L6n5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLm1iOCIpOwogICAgICAgICAgICBwdXQoIiNrcF9ib3hfNTAzIik7CiAgICAgICAgICAgIHB1dCgiI2twX2JveF8yMTQiKTsKICAgICAgICAgICAgLy8gKioqIGJicyAqKioKICAgICAgICAgICAgLy8g6K+E6K665bWM5YWl5bCP5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLnBvc3RfcmVjb21tZW5kIik7CiAgICAgICAgICAgIC8vIOW6lemDqOaOqOiNkAogICAgICAgICAgICBwdXQoIiNwb3N0X2ZlZWRfd3JhcCIpOwogICAgICAgICAgICAvLyDlupXpg6jnm7jlhbPmlofnq6Dph4zpnaLnmoTlub/lkYoKICAgICAgICAgICAgcHV0KCIuYmJzX2ZlZWRfYWRfYm94Iik7CiAgICAgICAgICAgIHB1dCgiLnJlY29tbWVuZC1hZC1ib3giKTsKICAgICAgICAgICAgLy8g5bqV6YOo55u45YWz5paH5a2X6YeM6Z2i55qE54Ot6K+N5o+Q56S6CiAgICAgICAgICAgIHB1dCgiLnR5cGVfaG90X3dvcmQiKTsKICAgICAgICAgICAgLy8g5bqV6YOo6JOd6ImyZmxleOWxnuaAp+eahOW5v+WRiuagjyvnmbvlvZXms6jlhozmoYYKICAgICAgICAgICAgcHV0KCIucHVsbGxvZy1ib3giKTsKICAgICAgICAgICAgLy8g54yc5L2g5Zac5qyiCiAgICAgICAgICAgIHB1dCgiLnBlcnNvbmFsaXplZC1yZWNvbW1lbmQtYm94Iik7CiAgICAgICAgICAgIC8vIOWPkeW4luWHj+WNiuaPkOekugogICAgICAgICAgICBwdXQoIi50b3Rhc3QtYm94Iik7CiAgICAgICAgICAgIC8vIOmhtumDqOW5v+WRigogICAgICAgICAgICBwdXQoIi5yZWNvbW1lbmQtcmlnaHQiKTsKICAgICAgICAgICAgLy8g6aG26YOo5bm/5ZGKCiAgICAgICAgICAgIHB1dCgiLmFkX3RvcCIpOwogICAgICAgICAgICAvLyAqKiogZG93bmxvYWQgKioqCiAgICAgICAgICAgIHB1dCgiLmZpeGVkX2RsIik7CiAgICAgICAgICAgIHB1dCgiaW5kZXhTdXBlcmlzZSIpOwogICAgICAgICAgICAvLyDlj7PkvqfmjqjojZAKICAgICAgICAgICAgcHV0KCIuY29udGVudF9yZWNvbSIpOwogICAgICAgICAgICBjbGVhbigxMCk7CiAgICAgICAgfQogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIE5Qcm9ncmVzcy5kb25lKCk7CiAgICAgICAgfSwgMCk7CiAgICAgICAgbCgi5LyY5YyW5a6M5q+VISIpOwogICAgfSwgMCk7Cn0pKCk7CgpmdW5jdGlvbiBsKGxvZykgewogICAgY29uc29sZS5sb2coIltDU0ROR3JlZW5lcl0gIiArIGxvZyk7Cn0KCmZ1bmN0aW9uIGUoZXJyb3IpIHsKICAgIGNvbnNvbGUuZXJyb3IoIltDU0ROR3JlZW5lcl0gIiArIGVycm9yKTsKfQoKZnVuY3Rpb24gY2xlYXIoKSB7CiAgICBsaXN0ID0gW107Cn0KCmZ1bmN0aW9uIHB1dCh0YWcpIHsKICAgIGxpc3QucHVzaCh0YWcpOwp9CgpmdW5jdGlvbiBjbGVhbih0aW1lcykgewogICAgdmFyIGxvb3AgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgLS10aW1lczsKICAgICAgICBpZiAodGltZXMgPD0gMCkgewogICAgICAgICAgICBjbGVhckludGVydmFsKGxvb3ApOwogICAgICAgIH0KICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxpc3QubGVuZ3RoOyBrKyspIHsKICAgICAgICAgICAgJChsaXN0W2tdKS5yZW1vdmUoKTsKICAgICAgICB9CiAgICB9LCAxMDApOwogICAgTlByb2dyZXNzLmluYygpOwp9CgpmdW5jdGlvbiBsb29wKG51bSkgewogICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChudW0gPT09IDEpIHsKICAgICAgICAgICAgLy8g5Li76aG15Lit6Ze055qE5bm/5ZGKCiAgICAgICAgICAgICQoIi5KX2FkdiIpLnJlbW92ZSgpOwogICAgICAgICAgICAvLyDkuLvpobXmnInmlrDnmoTlhoXlrrnmqKrmnaEKICAgICAgICAgICAgJCgiLmZlZWQtZml4LWJveCIpLnJlbW92ZSgpOwogICAgICAgICAgICAvLyDkuLvpobXlub/lkYogaWZyYW1lCiAgICAgICAgICAgIGlmIChjdXJyZW50VVJMID09ICJodHRwczovL3d3dy5jc2RuLm5ldC8iKSB7CiAgICAgICAgICAgICAgICAkKCJpZnJhbWUiKS5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyDliKDpmaQgQ1NETiDlrpjmlrnlnKjkuLvpobXnmoTmlofnq6DvvIjlpKflpJrmmK/lub/lkYrvvIkKICAgICAgICAgICAgJCgibGkuY2xlYXJmaXgiKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGUpIHsKICAgICAgICAgICAgICAgIHZhciBiYW5uZWQgPSAvY3NkbjxcL2E+LzsKICAgICAgICAgICAgICAgIHZhciBhTWFyayA9ICQoZWxlKS5maW5kKCIubmFtZSIpLmh0bWwoKTsKICAgICAgICAgICAgICAgIGlmIChiYW5uZWQudGVzdChhTWFyaykpIHsKICAgICAgICAgICAgICAgICAgICAkKGVsZSkucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyDkuLvpobXlub/lkYoKICAgICAgICAgICAgJCgibGkiKS5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBsZXQgc2VsZiA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICBsZXQgZGF0YVR5cGUgPSBzZWxmLmF0dHIoJ2RhdGEtdHlwZScpOwogICAgICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09PSAnYWQnKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChudW0gPT09IDIpIHsKICAgICAgICAgICAgLy8g6K+E6K665p+l55yL5pu05aSa5bGV5byA55uR5ZCsCiAgICAgICAgICAgICQoImRpdi5jb21tZW50LWxpc3QtYm94IikuY3NzKCJtYXgtaGVpZ2h0IiwgIm5vbmUiKTsKICAgICAgICAgICAgLy8g5bGP6JS95oKo55qE57yp5pS+5LiN5pivMTAwJeeahOaPkOekugogICAgICAgICAgICAkKCcubGVmdFBvcCcpLnJlbW92ZSgpOwogICAgICAgIH0gZWxzZSBpZiAobnVtID09IDMpIHsKICAgICAgICAgICAgLy8g5b6q546v5Yig6Zmk55m75b2V5o+Q56S65qGGCiAgICAgICAgICAgIC8vIOaUueWbnuiDjOaZr+minOiJsgogICAgICAgICAgICAkKCIubG9naW4tbWFyayIpLnJlbW92ZSgpOwogICAgICAgICAgICAvLyDliKDpmaTnmbvlvZXmoYYKICAgICAgICAgICAgJCgiLmxvZ2luLWJveCIpLnJlbW92ZSgpOwogICAgICAgICAgICAkKCcjcGFzc3BvcnRib3gnKS5yZW1vdmUoKTsKICAgICAgICAgICAgJCgnLmxvZ2luLW1hcmsnKS5yZW1vdmUoKTsKICAgICAgICB9CiAgICB9LCA1MDApOwp9CgpmdW5jdGlvbiBjb21tb24obnVtLCB0aW1lcykgewogICAgdmFyIGxvb3AgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgLS10aW1lczsKICAgICAgICBpZiAodGltZXMgPD0gMCkgewogICAgICAgICAgICBjbGVhckludGVydmFsKGxvb3ApOwogICAgICAgIH0KICAgICAgICBpZiAobnVtID09PSAxKSB7CiAgICAgICAgICAgIC8vIOafpeeci+abtOWkmgogICAgICAgICAgICAkKCIuYnRuLXJlYWRtb3JlIikucmVtb3ZlQ2xhc3MoIm5vLWxvZ2luIik7CiAgICAgICAgICAgICQoIi5idG4tcmVhZG1vcmUiKS5hZGRDbGFzcygiZmFucy1yZWFkLW1vcmUiKTsKICAgICAgICAgICAgJCgiLmJ0bi1yZWFkbW9yZSIpLnJlbW92ZUF0dHIoImhyZWYiKTsKICAgICAgICAgICAgJCgiLmJ0bi1yZWFkbW9yZSIpLnJlbW92ZUF0dHIoInRhcmdldCIpOwogICAgICAgICAgICAkKCIuYnRuLXJlYWRtb3JlIikucmVtb3ZlQXR0cigicmVsIik7CiAgICAgICAgICAgICQoIi5idG4tcmVhZG1vcmUiKS5jbGljaygpOwogICAgICAgICAgICAvLyDlt7LnmbvlvZXnlKjmiLflsZXlvIDor4TorroKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJidG5Nb3JlQ29tbWVudCIpLmNsaWNrKCk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgIC8vIOWIoOmZpOafpeeci+abtOWkmuaMiemSrgogICAgICAgICAgICAkKCIjYnRuTW9yZUNvbW1lbnQiKS5wYXJlbnQoImRpdi5vcHQtYm94IikucmVtb3ZlKCk7CiAgICAgICAgICAgIC8vIOWxleW8gOWGheWuuQogICAgICAgICAgICAkKCJkaXYuY29tbWVudC1saXN0LWJveCIpLmNzcygibWF4LWhlaWdodCIsICJub25lIik7CiAgICAgICAgICAgIC8vIOaUueWbnuiDjOaZr+minOiJsgogICAgICAgICAgICAkKCIubG9naW4tbWFyayIpLnJlbW92ZSgpOwogICAgICAgICAgICAvLyDliKDpmaTnmbvlvZXmoYYKICAgICAgICAgICAgJCgiLmxvZ2luLWJveCIpLnJlbW92ZSgpOwogICAgICAgIH0gZWxzZSBpZiAobnVtID09PSAyKSB7CiAgICAgICAgICAgIC8vIOaMoeS9j+ivhOiuuueahOKAnOWHuuWktOaOqOiNkOKAnQogICAgICAgICAgICBpZiAoJCgiLnJlY29tbWVuZC1ib3giKS5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAkKCIucmVjb21tZW5kLWJveCIpWzBdLnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIOWOu+WklumTvgogICAgICAgICAgICAkKCIjY29udGVudF92aWV3cyIpLm9mZigpOwogICAgICAgICAgICAvLyDljrvpmaTmjqjlub/lub/lkYoKICAgICAgICAgICAgJCgibGlbZGF0YS10eXBlPSdhZCddIikucmVtb3ZlKCk7CiAgICAgICAgICAgIC8vIOWFjeeZu+W9leWkjeWItgogICAgICAgICAgICAkKCIuaGxqcy1idXR0b24iKS5yZW1vdmVDbGFzcygic2lnbmluIik7CiAgICAgICAgICAgICQoIi5obGpzLWJ1dHRvbiIpLmFkZENsYXNzKCJ7Mn0iKTsKICAgICAgICAgICAgJCgiLmhsanMtYnV0dG9uIikuYXR0cigiZGF0YS10aXRsZSIsICLlhY3nmbvlvZXlpI3liLYiKTsKICAgICAgICAgICAgJCgiLmhsanMtYnV0dG9uIikuYXR0cigib25jbGljayIsICJobGpzLmNvcHlDb2RlKGV2ZW50KSIpOwogICAgICAgICAgICAvLyDljrvpmaTliarotLTmnb/liqvmjIEKICAgICAgICAgICAgJCgiY29kZSIpLmF0dHIoIm9uY2xpY2siLCAibWRjcC5jb3B5Q29kZShldmVudCkiKTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIC8vIOWkjeWItuaXtuS/neeVmeWOn+aWh+agvOW8j++8jOWPguiAgyBodHRwczovL2dyZWFzeWZvcmsub3JnL2VuL3NjcmlwdHMvMzkwNTAyLWNzZG5yZW1vdmVjb3B5cmlnaHQvY29kZQogICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgImFydGljbGVUeXBlIiwgewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3Nkbi5jb3B5cmlnaHQuaW5pdCgiIiwgIiIsICIiKTsKICAgICAgICAgICAgLy8g6aG15aS05bm/5ZGKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjb2x1bW4tYWR2ZXJ0LWJveCIpWzBdLnN0eWxlLmRpc3BsYXk9Im5vbmUiOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgICAgICAvLyDoh6rliqjmo4DmtYvmmK/lkKbmnInnm67lvZXvvIzlpoLmnpzmsqHmnInliJnliKDpmaTlj7PovrnmoI/vvIzmlofnq6DlsYXkuK0KICAgICAgICAgICAgaWYgKCQoIi5yZWNvbW1lbmQtcmlnaHRfYXNpZGUiKS5odG1sKCkgJiYgJCgiLnJlY29tbWVuZC1yaWdodF9hc2lkZSIpLmh0bWwoKS5yZXBsYWNlKC9bXHJcbl0vZywgIiIpLnJlcGxhY2UoLyhccykvZywgIiIpID09PSAiIikgewogICAgICAgICAgICAgICAgJCgiI3JpZ2h0QXNpZGUiKS5yZW1vdmUoKTsKICAgICAgICAgICAgfSBlbHNlIGlmICgkKCIucmVjb21tZW5kLXJpZ2h0X2FzaWRlIikuaHRtbCgpICYmICQoIiNyZWNvbW1lbmQtcmlnaHQiKS5odG1sKCkucmVwbGFjZSgvW1xyXG5dL2csICIiKS5yZXBsYWNlKC8oXHMpL2csICIiKSA9PT0gIiIpIHsKICAgICAgICAgICAgICAgICQoIiNyaWdodEFzaWRlIikucmVtb3ZlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8g55m75b2V5oyJ6ZKu5paH5a2X5aSq5aSa77yM5L+u5pS5CiAgICAgICAgICAgICQoImEiKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuYXR0cignaHJlZicpID09PSAnaHR0cHM6Ly9wYXNzcG9ydC5jc2RuLm5ldC9hY2NvdW50L2xvZ2luJykgewogICAgICAgICAgICAgICAgICAgICQodGhpcykuaHRtbCgn55m75YWlJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyDpobbmoI/lub/lkYoKICAgICAgICAgICAgJCgibGkiKS5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBsZXQgc2VsZiA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICBsZXQgZGF0YVR5cGUgPSBzZWxmLmF0dHIoJ2RhdGEtc3ViLW1lbnUtdHlwZScpOwogICAgICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09PSAndmlwJykgewogICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyDpobbmoI9WSVDpgInpobkKICAgICAgICAgICAgJCgnLnRvb2xiYXItc3ViTWVudS1ib3gnKS5maW5kKCJbaHJlZj0naHR0cHM6Ly9tYWxsLmNzZG4ubmV0L3ZpcCddIikucGFyZW50KCkucmVtb3ZlKCk7CiAgICAgICAgfSBlbHNlIGlmIChudW0gPT0gMykgewogICAgICAgICAgICAvL+iuuuWdm+iHquWKqOWxleW8gAogICAgICAgICAgICAkKCIuanNfc2hvd190b3BpYyIpLmNsaWNrKCk7CiAgICAgICAgfSBlbHNlIGlmIChudW0gPT0gNCkgewogICAgICAgICAgICAvKiog6YWN572u5o6n5Yi2ICoqLwogICAgICAgICAgICBsZXQgY29uZmlnID0gbmV3IENvbmZpZygpOwogICAgICAgICAgICBsZXQgc21Db29raWUgPSBjb25maWcuZ2V0KCJzY3Itc20iLCBmYWxzZSk7CiAgICAgICAgICAgIGxldCBtZENvb2tpZSA9IGNvbmZpZy5nZXQoInNjci1tZCIsIHRydWUpOwogICAgICAgICAgICBsZXQgbGdDb29raWUgPSBjb25maWcuZ2V0KCJzY3ItbGciLCBmYWxzZSk7CgogICAgICAgICAgICAkKCIjc2NyLXNtIikucHJvcCgiY2hlY2tlZCIsIHNtQ29va2llKTsKICAgICAgICAgICAgJCgiI3Njci1tZCIpLnByb3AoImNoZWNrZWQiLCBtZENvb2tpZSk7CiAgICAgICAgICAgICQoIiNzY3ItbGciKS5wcm9wKCJjaGVja2VkIiwgbGdDb29raWUpOwoKICAgICAgICAgICAgaWYgKHNtQ29va2llKSB7CiAgICAgICAgICAgICAgICAvLyBTbWFsbCBTY3JlZW4gTW9kZQogICAgICAgICAgICAgICAgJCgiLm1haW5fZmF0aGVyIikucmVtb3ZlQ2xhc3MoImp1c3RpZnktY29udGVudC1jZW50ZXIiKTsKICAgICAgICAgICAgICAgICQoImNzZG4tc2lkZS10b29sYmFyIikuY3NzKCJsZWZ0IiwgImF1dG8iKQogICAgICAgICAgICAgICAgR01fYWRkU3R5bGUoYAogICAgICAgICAgICAgICAgbWFpbnsKICAgICAgICAgICAgICAgICAgICB3aWR0aDogYXV0byFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IG5vbmUhaW1wb3J0YW50OwogICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogOTB2dzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG1haW4gYXJ0aWNsZSBpbWd7CiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobWRDb29raWUpIHsKICAgICAgICAgICAgICAgIC8vIE1pZGRsZSBTY3JlZW4gTW9kZQogICAgICAgICAgICAgICAgJCgiLm1haW5fZmF0aGVyIikucmVtb3ZlQ2xhc3MoImp1c3RpZnktY29udGVudC1jZW50ZXIiKTsKICAgICAgICAgICAgICAgICQoImNzZG4tc2lkZS10b29sYmFyIikuY3NzKCJsZWZ0IiwgImF1dG8iKQogICAgICAgICAgICB9IGVsc2UgaWYgKGxnQ29va2llKSB7CiAgICAgICAgICAgICAgICAvLyBMYXJnZSBTY3JlZW4gTW9kZQogICAgICAgICAgICAgICAgJCgiLmNvbnRhaW5lciIpLmNzcygibWFyZ2luIiwgIjAgYXV0byIpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIOWxj+W5leWwuuWvuOWNlemAieebkeWQrAogICAgICAgICAgICAkKCIjc2NyLXNtIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbmV3IENvbmZpZygpLnNldCgic2NyLXNtIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KCJzY3ItbWQiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KCJzY3ItbGciLCBmYWxzZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKCIjc2NyLW1kIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbmV3IENvbmZpZygpLnNldCgic2NyLW1kIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KCJzY3Itc20iLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KCJzY3ItbGciLCBmYWxzZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKCIjc2NyLWxnIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbmV3IENvbmZpZygpLnNldCgic2NyLWxnIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KCJzY3Itc20iLCBmYWxzZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KCJzY3ItbWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAobnVtID09IDUpIHsKICAgICAgICAgICAgLy8g5pS55Zue6IOM5pmv6aKc6ImyCiAgICAgICAgICAgICQoIi5sb2dpbi1tYXJrIikucmVtb3ZlKCk7CiAgICAgICAgICAgIC8vIOWIoOmZpOeZu+W9leahhgogICAgICAgICAgICAkKCIubG9naW4tYm94IikucmVtb3ZlKCk7CiAgICAgICAgfSBlbHNlIGlmIChudW0gPT0gNikgewogICAgICAgICAgICBsZXQgZGlkID0gZmFsc2U7CiAgICAgICAgICAgIGxldCBjb25maWdIVE1MID0gJyc7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxkaXY+PGEgc3R5bGU9ImZvbnQtc2l6ZTogMjBweDsiIGhyZWY9Imh0dHBzOi8vb3BlbnVzZXJqcy5vcmcvc2NyaXB0cy9BZGxlckVELyVFNiU5QyU4MCVFNSVCQyVCQSVFNyU5QSU4NCVFOCU4MCU4MSVFNyU4OSU4QyVFOCU4NCU5QSVFNiU5QyVBQ0NTRE5HcmVlbmVyJUVGJUJDJTlBQ1NETiVFNSVCOSVCRiVFNSU5MSU4QSVFNSVBRSU4QyVFNSU4NSVBOCVFOCVCRiU4NyVFNiVCQiVBNCVFMyU4MCU4MSVFNCVCQSVCQSVFNiU4MCVBNyVFNSU4QyU5NiVFOCU4NCU5QSVFNiU5QyVBQyVFNCVCQyU5OCVFNSU4QyU5NiIgdGFyZ2V0PSJfYmxhbmsiPkNTRE5HcmVlbmVyPC9hPiA8c3VwPlYnICsgdmVyc2lvbiArICc8L3N1cD48L2Rpdj7lrpjmlrkgUVEg5Lqk5rWB576k77yaMTA0MjM3MDQ1MyZuYnNwOyZuYnNwOyZuYnNwOzxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSIvL3NoYW5nLnFxLmNvbS93cGEvcXVud3BhP2lka2V5PWQ3YWQ2ZWFkM2Y1NzcyMmU3ZjAwYTQyODFhZTc1ZGJhYzIxMzJjNWE4Y2YzMjE5OTJkNTczMDkwMzdmY2FmNjMiPjxpbWcgYm9yZGVyPSIwIiBzcmM9Ii8vcHViLmlkcXFpbWcuY29tL3dwYS9pbWFnZXMvZ3JvdXAucG5nIiBhbHQ9IkNTRE5HcmVlbmVyIOeUqOaIt+S6pOa1gee+pCIgdGl0bGU9IkNTRE5HcmVlbmVyIOeUqOaIt+S6pOa1gee+pCI+PC9hPjxicj48YnI+JzsKCiAgICAgICAgICAgIC8vIOiuvuWumu+8muaOqOiNkOWGheWuueaMiemSrgogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8cCBzdHlsZT0ibWFyZ2luLWJvdHRvbTogNXB4Ij48Yj7moLnmja7lsY/luZXlsLrlr7jvvIzpgILphY3niYjlvI88L2I+PGJyPjxzcGFuIHN0eWxlPSJmb250LXNpemU6IDVweDsiPuW7uuiurumAkOS4quWwneivleWQjumAieaLqemAguWQiOS9oOeahOeJiOW8j++8jOWxj+W5lei/h+Wwj+aIluiAheeJiOW8j+mAieaLqeS4jeato+ehruWPs+S+p+agj+WPr+iDveayoeacieepuumXtOaYvuekuu+8iOivt+Wwneivleiwg+iKgua1j+iniOWZqOe8qeaUvu+8ieOAgjwvc3Bhbj48L3A+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGxhYmVsPjxpbnB1dCBuYW1lPSJkaXNwbGF5TW9kZSIgdHlwZT0icmFkaW8iIHZhbHVlPSIiIGlkPSJzY3Itc20iIC8+IOW5s+mTuuaooeW8jyA8L2xhYmVsPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxsYWJlbD48aW5wdXQgbmFtZT0iZGlzcGxheU1vZGUiIHR5cGU9InJhZGlvIiB2YWx1ZT0iIiBpZD0ic2NyLW1kIiAvPiDpgILlupTmqKHlvI8gPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8bGFiZWw+PGlucHV0IG5hbWU9ImRpc3BsYXlNb2RlIiB0eXBlPSJyYWRpbyIgdmFsdWU9IiIgaWQ9InNjci1sZyIgLz4g5bGF5Lit5qih5byPPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8aHIgc3R5bGU9ImhlaWdodDoxcHg7Ym9yZGVyOm5vbmU7Ym9yZGVyLXRvcDoxcHggc29saWQgI2NjY2NjYzttYXJnaW46IDVweCAwcHggNXB4IDBweDsiIC8+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPHAgc3R5bGU9Im1hcmdpbi1ib3R0b206IDVweCI+PGI+6YCa55So6K6+5a6aPC9iPjwvcD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJ0b2dnbGUtcmVjb21tZW5kLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1yZWNvbW1lbmQtYnV0dG9uIiBjbGFzcz0ibW9kZUxhYmVsIj7mmL7npLrmjqjojZDlhoXlrrk8L2xhYmVsPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxicj4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJ0b2dnbGUtd2hpdGV0aGVtZS1idXR0b24iPiA8bGFiZWwgZm9yPSJ0b2dnbGUtd2hpdGV0aGVtZS1idXR0b24iIGNsYXNzPSJtb2RlTGFiZWwiPueZveiJsuS4u+mimCZEYXJrIFJlYWRlcuWFvOWuueaooeW8jzxicj48c3BhbiBzdHlsZT0iZm9udC1zaXplOiA4cHg7Y29sb3I6ICM4MDgwODA7Ij4jIOmAiemhueS9nOeUqO+8muW8gOWQr+WQjuWPr+mAmui/h0RhcmsgUmVhZGVy5o+S5Lu254G15rS75o6n5Yi255m96Imy5LiO6buR5pqX5qih5byP77yMPGEgc3R5bGU9ImNvbG9yOiBncmVlbjsiIGhyZWY9Imh0dHBzOi8vY2hyb21lLnp6em1oLmNuL2luZm8/dG9rZW49ZWltYWRwYmNiZm5tYmtvcG9vamZla2hua2hkYmllZWgiIHRhcmdldD0iX2JsYW5rIj7mj5Lku7bkuIvovb3lnLDlnYDngrnmiJE8L2E+PC9zcGFuPjwvbGFiZWw+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRvZ2dsZS1hdXRvc2l6ZS1idXR0b24iPiA8bGFiZWwgZm9yPSJ0b2dnbGUtYXV0b3NpemUtYnV0dG9uIiBjbGFzcz0ibW9kZUxhYmVsIj7lrr3luqboh6rliqjpgILlupQ8YnI+PHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogOHB4O2NvbG9yOiAjODA4MDgwOyI+IyDpgInpobnkvZznlKjvvJrlvIDlkK/mraTpgInpobnlj6/ku6XlnKjpobXpnaLlrr3luqbnvKnlsI/ml7boh6rliqjliIfmjaLoh7PlsI/lsY/mqKHlvI88L3NwYW4+PC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YnI+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idG9nZ2xlLWF1dG9oaWRldG9vbGJhci1idXR0b24iPiA8bGFiZWwgZm9yPSJ0b2dnbGUtYXV0b2hpZGV0b29sYmFyLWJ1dHRvbiIgY2xhc3M9Im1vZGVMYWJlbCI+5ZCR5LiL5rua5Yqo6Ieq5Yqo6ZqQ6JeP6aG25qCPPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YnI+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idG9nZ2xlLWF1dG9oaWRlYm90dG9tYmFyLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1hdXRvaGlkZWJvdHRvbWJhci1idXR0b24iIGNsYXNzPSJtb2RlTGFiZWwiPuiHquWKqOmakOiXj+W6leagjzwvbGFiZWw+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRvZ2dsZS13cml0ZWJsb2ctYnV0dG9uIj4gPGxhYmVsIGZvcj0idG9nZ2xlLXdyaXRlYmxvZy1idXR0b24iIGNsYXNzPSJtb2RlTGFiZWwiPuaYvuekuuWIm+S9nOS4reW/g+aMiemSrjwvbGFiZWw+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxociBzdHlsZT0iaGVpZ2h0OjFweDtib3JkZXI6bm9uZTtib3JkZXItdG9wOjFweCBzb2xpZCAjY2NjY2NjO21hcmdpbjogNXB4IDBweCA1cHggMHB4OyIgLz4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8cCBzdHlsZT0ibWFyZ2luLWJvdHRvbTogNXB4Ij48Yj7lj7PkvqfmoI/lrprliLY8L2I+PC9wPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRvZ2dsZS1hdXRob3JjYXJkLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1hdXRob3JjYXJkLWJ1dHRvbiIgY2xhc3M9Im1vZGVMYWJlbCI+5pi+56S65L2c6ICF5ZCN54mHPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YnI+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idG9nZ2xlLXNlYXJjaGJsb2ctYnV0dG9uIj4gPGxhYmVsIGZvcj0idG9nZ2xlLXNlYXJjaGJsb2ctYnV0dG9uIiBjbGFzcz0ibW9kZUxhYmVsIj7mmL7npLrmkJzljZrkuLvmlofnq6A8L2xhYmVsPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxicj4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJ0b2dnbGUtbmV3YXJ0aWNsZS1idXR0b24iPiA8bGFiZWwgZm9yPSJ0b2dnbGUtbmV3YXJ0aWNsZS1idXR0b24iIGNsYXNzPSJtb2RlTGFiZWwiPuaYvuekuuacgOaWsOaWh+eroDwvbGFiZWw+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRvZ2dsZS1ob3RhcnRpY2xlLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1ob3RhcnRpY2xlLWJ1dHRvbiIgY2xhc3M9Im1vZGVMYWJlbCI+5pi+56S654Ot6Zeo5paH56ugPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YnI+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idG9nZ2xlLW5ld2NvbW1lbnRzLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1uZXdjb21tZW50cy1idXR0b24iIGNsYXNzPSJtb2RlTGFiZWwiPuaYvuekuuacgOaWsOivhOiuujwvbGFiZWw+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRvZ2dsZS1raW5kcGVyc29uLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1raW5kcGVyc29uLWJ1dHRvbiIgY2xhc3M9Im1vZGVMYWJlbCI+5pi+56S65YiG57G75LiT5qCPPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YnI+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idG9nZ2xlLXJlY29tbWVuZGFydGljbGUtYnV0dG9uIj4gPGxhYmVsIGZvcj0idG9nZ2xlLXJlY29tbWVuZGFydGljbGUtYnV0dG9uIiBjbGFzcz0ibW9kZUxhYmVsIj7mmL7npLrmjqjojZDmlofnq6A8L2xhYmVsPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxicj4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJ0b2dnbGUtYXJjaGl2ZS1idXR0b24iPiA8bGFiZWwgZm9yPSJ0b2dnbGUtYXJjaGl2ZS1idXR0b24iIGNsYXNzPSJtb2RlTGFiZWwiPuaYvuekuuW9kuahozwvbGFiZWw+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRvZ2dsZS1jb250ZW50LWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1jb250ZW50LWJ1dHRvbiIgY2xhc3M9Im1vZGVMYWJlbCI+5pi+56S655uu5b2VPC9sYWJlbD4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YnI+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJ1dHRvbiBpZD0ic2F2ZSIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAyMHB4OyByaWdodDogMTVweDsiIG9uY2xpY2s9ImxvY2F0aW9uLnJlbG9hZCgpIj4nICsgc2F2ZV9zdmcgKyAnIOS/neWtmOW5tuW6lOeUqDwvYnV0dG9uPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxicj4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8cCBzdHlsZT0iZm9udC1zaXplOjVweCI+5bCP5o+Q56S677yaQ1NETkdyZWVuZXIg6ISa5pys5LiN5o+Q5L6b5Lu75L2V5Lya5ZGY5paH56ug56C06Kej44CB5Lya5ZGY6LWE5rqQ5LiL6L295Yqf6IO977yM5LuF6YCC55So5LqO5YmN56uv5LyY5YyW77yM6K+35Zyo5a6Y5pa55rig6YGT6LSt5Lmw5Lya5ZGY5L2T6aqM5LuY6LS55Yqf6IO944CCPC9wPic7CiAgICAgICAgICAgIGNvbmZpZ0hUTUwgKz0gJzxicj4nOwogICAgICAgICAgICBjb25maWdIVE1MICs9ICc8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYWRsZXJlZC9DU0ROR3JlZW5lciIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJnaXZlTWVPbmVTdGFyIj4nICsgc3Rhcl9zdmcgKyAnIDxiPueCueaIkX48L2I+IOWKqOWKqOWwj+aJi+WcqCBHaXRIdWIg54K55LiqIFN0YXLvvIzmlK/mjIHmiJHnu6fnu63nu7TmiqTohJrmnKwgOik8L2E+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPGJyPic7CgogICAgICAgICAgICAvLyBjb25maWdIVE1MICs9ICc8YSBocmVmPSJodHRwczovL2RvYy5zdGFja292ZXJmbG93Lndpa2kvd2ViLyMvMjE/cGFnZV9pZD0xMzgiIHRhcmdldD0iX2JsYW5rIiBzdHlsZT0ibWFyZ2luLXRvcDogNXB4OyBkaXNwbGF5OiBibG9jazsiPicgKyBkb25hdGVfc3ZnICsgJyDmiJHmmK/ogIHmnb/vvIzmipXluIHmiZPotY88L2E+JzsKICAgICAgICAgICAgY29uZmlnSFRNTCArPSAnPC9kaXY+PGRpdiBpZD0iZmFkZSIgY2xhc3M9ImJsYWNrX292ZXJsYXkiPjwvZGl2Pic7CiAgICAgICAgICAgIC8vIOe7v+WMluWZqOiuvuWumgogICAgICAgICAgICAkKCJib2R5IikucHJlcGVuZCgnPGRpdiBpZD0ibGlnaHQiIGNsYXNzPSJ3aGl0ZV9jb250ZW50Ij4nICsgY29uZmlnSFRNTCk7CiAgICAgICAgICAgIC8vIOe7v+WMluiuvuWumgogICAgICAgICAgICBsZXQgaHRtbE9mMCA9ICc8bGk+PGEgaWQ9ImdyZWVuZXJTZXR0aW5ncyIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0iIiBvbmNsaWNrPSIkKHdpbmRvdykuc2Nyb2xsVG9wKDApO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwnbGlnaHRcJykuc3R5bGUuZGlzcGxheT1cJ2Jsb2NrXCc7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCdmYWRlXCcpLnN0eWxlLmRpc3BsYXk9XCdibG9ja1wnOyI+JyArIHNldF9zdmcgKyAnIOe7v+WMluiuvuWumjwvYT48L2xpPic7CiAgICAgICAgICAgICQoIi50b29sYmFyLXN1Yk1lbnUtYm94IikuZXEoMSkuYmVmb3JlKGh0bWxPZjApOwoKICAgICAgICAgICAgLyoqIOmFjee9ruaOp+WItiAqKi8KICAgICAgICAgICAgbGV0IGNvbmZpZyA9IG5ldyBDb25maWcoKTsKICAgICAgICAgICAgLy8g5o6o6I2Q5YaF5a65CiAgICAgICAgICAgICQoIi5ibG9nLWNvbnRlbnQtYm94IikuYXBwZW5kKCI8YnI+PGRpdiBjbGFzcz0nYmxvZy1jb250ZW50LWJveCcgaWQ9J3JlY29tbWVuZFN3aXRjaCcgc3R5bGU9J3RleHQtYWxpZ246IHJpZ2h0Oyc+PC9kaXY+Iik7CiAgICAgICAgICAgICQoIiNyZWNvbW1lbmRTd2l0Y2g6bGFzdCIpLmFwcGVuZCgnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idG9nZ2xlLWJ1dHRvbiI+IDxsYWJlbCBmb3I9InRvZ2dsZS1idXR0b24iIGNsYXNzPSJidXR0b24tbGFiZWwiPiA8c3BhbiBjbGFzcz0iY2lyY2xlIj48L3NwYW4+IDxzcGFuIGNsYXNzPSJ0ZXh0IG9uIj4mbmJzcDs8L3NwYW4+IDxzcGFuIGNsYXNzPSJ0ZXh0IG9mZiI+Jm5ic3A7PC9zcGFuPiA8L2xhYmVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwIHN0eWxlPSJtYXJnaW4tdG9wOiA1cHg7IGZvbnQtc2l6ZTogMTNweDsiPuaYvuekuuaOqOiNkOWGheWuuTwvcD4nKTsKICAgICAgICAgICAgbGV0IHJlY29tbWVuZENvb2tpZSA9IGNvbmZpZy5nZXQoInJlY29tbWVuZCIsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKCFyZWNvbW1lbmRDb29raWUpIHsKICAgICAgICAgICAgICAgICQoIi5yZWNvbW1lbmQtYm94IikuaGlkZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZWNvbW1lbmRDb29raWUpIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtcmVjb21tZW5kLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1yZWNvbW1lbmQtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25maWcubGlzdGVuQnV0dG9uKCIjdG9nZ2xlLXJlY29tbWVuZC1idXR0b24iLCAicmVjb21tZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyQoIi5yZWNvbW1lbmQtYm94Iikuc2xpZGVEb3duKDIwMCk7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyQoIi5yZWNvbW1lbmQtYm94Iikuc2xpZGVVcCgyMDApO30pOwogICAgICAgICAgICBjb25maWcubGlzdGVuQnV0dG9uQW5kQWN0aW9uKCIjdG9nZ2xlLWJ1dHRvbiIsICJyZWNvbW1lbmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyQoIi5yZWNvbW1lbmQtYm94Iikuc2xpZGVEb3duKDIwMCk7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyQoIi5yZWNvbW1lbmQtYm94Iikuc2xpZGVVcCgyMDApO30pOwoKICAgICAgICAgICAgLy8g5o+Q56S6CiAgICAgICAgICAgIGxldCB0aXBzQ29va2llID0gY29uZmlnLmdldCgic2hvd1RpcCIsIHRydWUpOwogICAgICAgICAgICBpZiAodGlwc0Nvb2tpZSkgewogICAgICAgICAgICAgICAgc2hvd1RpcHMoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25maWcuc2V0KCJzaG93VGlwIiwgZmFsc2UpOwoKICAgICAgICAgICAgLy8g5pi+56S65L2c6ICF5ZCN54mHCiAgICAgICAgICAgIGxldCBhdXRob3JDYXJkQ29va2llID0gY29uZmlnLmdldCgiYXV0aG9yQ2FyZCIsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKGF1dGhvckNhcmRDb29raWUpIHsKICAgICAgICAgICAgICAgIC8vIOWNmuS4u+S/oeaBrwogICAgICAgICAgICAgICAgJCgnI3JlY29tbWVuZC1yaWdodCcpLmFwcGVuZCgkKCcjYXNpZGVQcm9maWxlJykucHJvcCgib3V0ZXJIVE1MIikpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjYXNpZGVQcm9maWxlJykuYXR0cigic3R5bGUiLCAibWFyZ2luLXRvcDogOHB4OyB3aWR0aDogMzAwcHg7Iik7CiAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChhdXRob3JDYXJkQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWF1dGhvcmNhcmQtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1hdXRob3JjYXJkLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS1hdXRob3JjYXJkLWJ1dHRvbiIsICJhdXRob3JDYXJkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9KTsKCiAgICAgICAgICAgIC8vIOW8uuWItueZveiJsuS4u+mimAogICAgICAgICAgICBsZXQgd2hpdGVUaGVtZUNvb2tpZSA9IGNvbmZpZy5nZXQoIndoaXRlVGhlbWUiLCB0cnVlKTsKICAgICAgICAgICAgaWYgKHdoaXRlVGhlbWVDb29raWUpIHsKICAgICAgICAgICAgICAgIC8vIOiDjOaZr+WIoOmZpAogICAgICAgICAgICAgICAgJCgnLm1haW5fZmF0aGVyJykuYXR0cignc3R5bGUnLCAnYmFja2dyb3VuZC1pbWFnZTogbm9uZSAhaW1wb3J0YW50OyBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNmY3OyBiYWNrZ3JvdW5kOiAjZjVmNmY3OycpOwogICAgICAgICAgICAgICAgJCgnW2hyZWZePSJodHRwczovL2NzZG5pbWcuY24vcmVsZWFzZS9waG9lbml4L3RlbXBsYXRlL3RoZW1lc19za2luLyJdJykuYXR0cignaHJlZicsICdodHRwczovL2NzZG5pbWcuY24vcmVsZWFzZS9waG9lbml4L3RlbXBsYXRlL3RoZW1lc19za2luL3NraW4tdGVjaG5vbG9neS9za2luLXRlY2hub2xvZ3ktNjMzNjU0OTU1Ny5taW4uY3NzJyk7CiAgICAgICAgICAgICAgICAkKCcjY3Nkbi10b29sYmFyJykucmVtb3ZlQ2xhc3MoJ2NzZG4tdG9vbGJhci1za2luLWJsYWNrJyk7CiAgICAgICAgICAgICAgICAkKCcuY3Nkbi1sb2dvJykuYXR0cignc3JjJywgJy8vY3NkbmltZy5jbi9jZG4vY29udGVudC10b29sYmFyL2NzZG4tbG9nby5wbmc/dj0yMDIwMDQxNi4xJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHdoaXRlVGhlbWVDb29raWUpIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtd2hpdGV0aGVtZS1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLXdoaXRldGhlbWUtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25maWcubGlzdGVuQnV0dG9uKCIjdG9nZ2xlLXdoaXRldGhlbWUtYnV0dG9uIiwgIndoaXRlVGhlbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30pOwoKICAgICAgICAgICAgLy8g5pCc5Y2a5Li75paH56ugCiAgICAgICAgICAgIGxldCBzZWFyY2hCbG9nQ29va2llID0gY29uZmlnLmdldCgic2VhcmNoQmxvZyIsIGZhbHNlKTsKICAgICAgICAgICAgaWYoc2VhcmNoQmxvZ0Nvb2tpZSkgewogICAgICAgICAgICAgICAgJCgnI3JlY29tbWVuZC1yaWdodCcpLmFwcGVuZCgkKCcjYXNpZGVTZWFyY2hBcnRpY2xlJykucHJvcCgib3V0ZXJIVE1MIikpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjYXNpZGVTZWFyY2hBcnRpY2xlJykuYXR0cigic3R5bGUiLCAibWFyZ2luLXRvcDogOHB4OyB3aWR0aDogMzAwcHg7Iik7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkKCIjc2VhcmNoLWJsb2ctd29yZHMiKQogICAgICAgICAgICAgICAgICAgICAgLCBuID0gJCgiLmJ0bi1zZWFyY2gtYmxvZyIpOwogICAgICAgICAgICAgICAgICAgIGkua2V5dXAoZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQua2V5Q29kZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEzID09IG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gZW5jb2RlVVJJQ29tcG9uZW50KGkudmFsKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICIvL3NvLmNzZG4ubmV0L3NvL3NlYXJjaC9zLmRvP3E9IiArIGUgKyAiJnQ9YmxvZyZ1PSIgKyB1c2VybmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgbi5vbigiY2xpY2siLCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZW5jb2RlVVJJQ29tcG9uZW50KGkudmFsKCkpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAiLy9zby5jc2RuLm5ldC9zby9zZWFyY2gvcy5kbz9xPSIgKyBuICsgIiZ0PWJsb2cmdT0iICsgdXNlcm5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihlKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2VhcmNoQmxvZ0Nvb2tpZSkgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1zZWFyY2hibG9nLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtc2VhcmNoYmxvZy1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZy5saXN0ZW5CdXR0b24oIiN0b2dnbGUtc2VhcmNoYmxvZy1idXR0b24iLCAic2VhcmNoQmxvZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSk7CgogICAgICAgICAgICAvLyDmnIDmlrDmlofnq6AKICAgICAgICAgICAgbGV0IG5ld0FydGljbGVDb29raWUgPSBjb25maWcuZ2V0KCJuZXdBcnRpY2xlIiwgZmFsc2UpOwogICAgICAgICAgICBpZiAobmV3QXJ0aWNsZUNvb2tpZSkgewogICAgICAgICAgICAgICAgJCgnI3JlY29tbWVuZC1yaWdodCcpLmFwcGVuZCgkKCcjYXNpZGVOZXdBcnRpY2xlJykucHJvcCgib3V0ZXJIVE1MIikpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjYXNpZGVOZXdBcnRpY2xlJykuYXR0cigic3R5bGUiLCAibWFyZ2luLXRvcDogOHB4OyB3aWR0aDogMzAwcHg7Iik7CiAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobmV3QXJ0aWNsZUNvb2tpZSkgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1uZXdhcnRpY2xlLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtbmV3YXJ0aWNsZS1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZy5saXN0ZW5CdXR0b24oIiN0b2dnbGUtbmV3YXJ0aWNsZS1idXR0b24iLCAibmV3QXJ0aWNsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSk7CgogICAgICAgICAgICAvLyDng63pl6jmlofnq6AKICAgICAgICAgICAgbGV0IGhvdEFydGljbGVDb29raWUgPSBjb25maWcuZ2V0KCJob3RBcnRpY2xlIiwgZmFsc2UpOwogICAgICAgICAgICBpZiAoaG90QXJ0aWNsZUNvb2tpZSkgewogICAgICAgICAgICAgICAgJCgnI3JlY29tbWVuZC1yaWdodCcpLmFwcGVuZCgkKCIjYXNpZGVIb3RBcnRpY2xlIikucHJvcCgib3V0ZXJIVE1MIikpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjYXNpZGVIb3RBcnRpY2xlJykuYXR0cigic3R5bGUiLCAibWFyZ2luLXRvcDogOHB4OyB3aWR0aDogMzAwcHg7Iik7CiAgICAgICAgICAgICAgICAgICAgJCgnI2FzaWRlSG90QXJ0aWNsZSBpbWcnKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChob3RBcnRpY2xlQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWhvdGFydGljbGUtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1ob3RhcnRpY2xlLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS1ob3RhcnRpY2xlLWJ1dHRvbiIsICJob3RBcnRpY2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9KTsKCiAgICAgICAgICAgIC8vIOacgOaWsOivhOiuugogICAgICAgICAgICBsZXQgbmV3Q29tbWVudHNDb29raWUgPSBjb25maWcuZ2V0KCJuZXdDb21tZW50cyIsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKG5ld0NvbW1lbnRzQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKCcjcmVjb21tZW5kLXJpZ2h0JykuYXBwZW5kKCQoIiNhc2lkZU5ld0NvbW1lbnRzIikucHJvcCgib3V0ZXJIVE1MIikpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjYXNpZGVOZXdDb21tZW50cycpLmF0dHIoInN0eWxlIiwgIm1hcmdpbi10b3A6IDhweDsgd2lkdGg6IDMwMHB4OyIpOwogICAgICAgICAgICAgICAgICAgICQoIi5jb21tZW50LmVsbGlwc2lzIikuYXR0cigic3R5bGUiLCAibWF4LWhlaWdodDogbm9uZTsiKTsKICAgICAgICAgICAgICAgICAgICAkKCIudGl0bGUudGV4dC10cnVuY2F0ZSIpLmF0dHIoInN0eWxlIiwgInBhZGRpbmc6IDAiKTsKICAgICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChuZXdDb21tZW50c0Nvb2tpZSkgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1uZXdjb21tZW50cy1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLW5ld2NvbW1lbnRzLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS1uZXdjb21tZW50cy1idXR0b24iLCAibmV3Q29tbWVudHMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30pOwoKICAgICAgICAgICAgLy8g5YiG57G75LiT5qCPCiAgICAgICAgICAgIGxldCBraW5kUGVyc29uQ29va2llID0gY29uZmlnLmdldCgia2luZFBlcnNvbiIsIGZhbHNlKTsKICAgICAgICAgICAgaWYgKCFraW5kUGVyc29uQ29va2llKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICQoJyNhc2lkZUNhdGVnb3J5JykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgJCgnLmtpbmRfcGVyc29uJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoJyNyZWNvbW1lbmQtcmlnaHQnKS5hcHBlbmQoJCgiI2FzaWRlQ2F0ZWdvcnkiKS5wcm9wKCJvdXRlckhUTUwiKSk7CiAgICAgICAgICAgICAgICBpZiAoJCgiI2FzaWRlQ2F0ZWdvcnkiKS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnLmtpbmRfcGVyc29uJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoJy5raW5kX3BlcnNvbicpLmF0dHIoInN0eWxlIiwgIm1hcmdpbi10b3A6IDhweDsgd2lkdGg6IDMwMHB4OyBoZWlnaHQ6MjU1cHg7Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICQoJyNhc2lkZUNhdGVnb3J5JykuYXR0cigic3R5bGUiLCAibWFyZ2luLXRvcDogOHB4OyB3aWR0aDogMzAwcHg7IGRpc3BsYXk6YmxvY2sgIWltcG9ydGFudDsiKTsKICAgICAgICAgICAgICAgICAgICAkKCJhLmZsZXhpYmxlLWJ0biIpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoJ2Rpdi5hc2lkZS1ib3gnKS5yZW1vdmVDbGFzcygnZmxleGlibGUtYm94Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50cygicC50ZXh0LWNlbnRlciIpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChraW5kUGVyc29uQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWtpbmRwZXJzb24tYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1raW5kcGVyc29uLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS1raW5kcGVyc29uLWJ1dHRvbiIsICJraW5kUGVyc29uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9KTsKCiAgICAgICAgICAgIC8vIOebruW9lQogICAgICAgICAgICBsZXQgY29udGVudENvb2tpZSA9IGNvbmZpZy5nZXQoImNvbnRlbnQiLCB0cnVlKTsKICAgICAgICAgICAgaWYgKCFjb250ZW50Q29va2llKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICQoJy5hbGlnbi1pdGVtcy1zdHJldGNoLmdyb3VwX2l0ZW0nKS5wYXJlbnQoKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjb250ZW50Q29va2llKSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWNvbnRlbnQtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1jb250ZW50LWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS1jb250ZW50LWJ1dHRvbiIsICJjb250ZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9KTsKCiAgICAgICAgICAgIC8vIOaOqOiNkOaWh+eroAogICAgICAgICAgICBsZXQgcmVjb21tZW5kQXJ0aWNsZUNvb2tpZSA9IGNvbmZpZy5nZXQoInJlY29tbWVuZEFydGljbGUiLCBmYWxzZSk7CiAgICAgICAgICAgIGlmICghcmVjb21tZW5kQXJ0aWNsZUNvb2tpZSkgewogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkKCcucmVjb21tZW5kLWxpc3QtYm94JykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnLnJlY29tbWVuZC1saXN0LWJveCcpLmF0dHIoInN0eWxlIiwgIm1hcmdpbi10b3A6IDhweDsgd2lkdGg6IDMwMHB4OyBoZWlnaHQ6MjU1cHg7Iik7CiAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVjb21tZW5kQXJ0aWNsZUNvb2tpZSkgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1yZWNvbW1lbmRhcnRpY2xlLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtcmVjb21tZW5kYXJ0aWNsZS1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZy5saXN0ZW5CdXR0b24oIiN0b2dnbGUtcmVjb21tZW5kYXJ0aWNsZS1idXR0b24iLCAicmVjb21tZW5kQXJ0aWNsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSk7CgogICAgICAgICAgICAvLyDlvZLmoaMKICAgICAgICAgICAgbGV0IGFyY2hpdmVDb29raWUgPSBjb25maWcuZ2V0KCJhcmNoaXZlIiwgZmFsc2UpOwogICAgICAgICAgICBpZiAoIWFyY2hpdmVDb29raWUpIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnI2FzaWRlQXJjaGl2ZScpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCcjcmVjb21tZW5kLXJpZ2h0JykuYXBwZW5kKCQoIiNhc2lkZUFyY2hpdmUiKS5wcm9wKCJvdXRlckhUTUwiKSk7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICQoJyNhc2lkZUFyY2hpdmUnKS5hdHRyKCJzdHlsZSIsICJtYXJnaW4tdG9wOiA4cHg7IHdpZHRoOiAzMDBweDsgZGlzcGxheTpibG9jayAhaW1wb3J0YW50OyIpOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYXJjaGl2ZUNvb2tpZSkgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1hcmNoaXZlLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtYXJjaGl2ZS1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZy5saXN0ZW5CdXR0b24oIiN0b2dnbGUtYXJjaGl2ZS1idXR0b24iLCAiYXJjaGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSk7CgogICAgICAgICAgICAvLyDoh6rliqjpnaDlt6blubPpk7oKICAgICAgICAgICAgbGV0IGF1dG9TaXplQ29va2llID0gY29uZmlnLmdldCgiYXV0b1NpemUiLCBmYWxzZSk7CiAgICAgICAgICAgIGlmIChhdXRvU2l6ZUNvb2tpZSkgewogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIC8vIOaWh+eroOWuveW6puiHqumAguW6lAogICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDExMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Yig6Zmk5Y6f5pyJ5ZON5bqU5byP5qC35byPCiAgICAgICAgICAgICAgICAgICAgICAgICQoIi5tYWluX2ZhdGhlciIpLnJlbW92ZUNsYXNzKCJqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIik7CiAgICAgICAgICAgICAgICAgICAgICAgICQoImNzZG4tc2lkZS10b29sYmFyIikuY3NzKCJsZWZ0IiwgImF1dG8iKQogICAgICAgICAgICAgICAgICAgICAgICAkKCJhcnRpY2xlIikud2lkdGgod2luZG93LmlubmVyV2lkdGggLSAxNTApOwogICAgICAgICAgICAgICAgICAgICAgICBHTV9hZGRTdHlsZShgCiAgICAgICAgICAgICAgICAgICAgICAgIG1haW57CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogYXV0byFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogbm9uZSFpbXBvcnRhbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDkwdnc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbWFpbiBhcnRpY2xlIGltZ3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpZCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiYXJ0aWNsZSIpLnJlbW92ZUF0dHIoInN0eWxlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGF1dG9TaXplQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWF1dG9zaXplLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtYXV0b3NpemUtYnV0dG9uIikucHJvcCgiY2hlY2tlZCIsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25maWcubGlzdGVuQnV0dG9uKCIjdG9nZ2xlLWF1dG9zaXplLWJ1dHRvbiIsICJhdXRvU2l6ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSk7CgogICAgICAgICAgICAvLyDoh6rliqjpmpDol4/pobbmoI8KICAgICAgICAgICAgbGV0IGF1dG9IaWRlVG9vbGJhckNvb2tpZSA9IGNvbmZpZy5nZXQoImF1dG9IaWRlVG9vbGJhciIsIHRydWUpOwogICAgICAgICAgICBpZiAoYXV0b0hpZGVUb29sYmFyQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID4gMTAwKSB7CiAgICAgICAgICAgICAgICAJICAgIGxldCBzY3JvbGxTID0gJCh0aGlzKS5zY3JvbGxUb3AoKTsKICAgICAgICAgICAgICAgIAkgICAgaWYgKHNjcm9sbFMgPj0gd2luZG93VG9wKSB7CiAgICAgICAgICAgICAgICAJICAgIAkkKCcjY3Nkbi10b29sYmFyJykuc2xpZGVVcCgxMDApOwogICAgICAgICAgICAgICAgCSAgICAJd2luZG93VG9wID0gc2Nyb2xsUzsKICAgICAgICAgICAgICAgIAkgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIAkgICAgCSQoJyNjc2RuLXRvb2xiYXInKS5zbGlkZURvd24oMTAwKTsKICAgICAgICAgICAgICAgIAkgICAgCXdpbmRvd1RvcCA9IHNjcm9sbFM7CiAgICAgICAgICAgICAgICAJICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYXV0b0hpZGVUb29sYmFyQ29va2llKSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWF1dG9oaWRldG9vbGJhci1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWF1dG9oaWRldG9vbGJhci1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZy5saXN0ZW5CdXR0b24oIiN0b2dnbGUtYXV0b2hpZGV0b29sYmFyLWJ1dHRvbiIsICJhdXRvSGlkZVRvb2xiYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30pOwoKICAgICAgICAgICAgLy8g6Ieq5Yqo6ZqQ6JeP5bqV5qCPCiAgICAgICAgICAgIGxldCBhdXRvSGlkZUJvdHRvbUJhckNvb2tpZSA9IGNvbmZpZy5nZXQoImF1dG9IaWRlQm90dG9tQmFyIiwgdHJ1ZSk7CiAgICAgICAgICAgIGlmIChhdXRvSGlkZUJvdHRvbUJhckNvb2tpZSkgewogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyQoIiN0b29sQmFyQm94IC5sZWZ0LXRvb2xib3giKS5jc3MoewogICAgICAgICAgICAgICAgCXBvc2l0aW9uOiAicmVsYXRpdmUiLAogICAgICAgICAgICAgICAgCWxlZnQ6ICIwcHgiLAogICAgICAgICAgICAgICAgCWJvdHRvbTogIjAiLAogICAgICAgICAgICAgICAgCXdpZHRoOiAkKCIjdG9vbEJhckJveCIpLndpZHRoKCkgKyAicHgiCiAgICAgICAgICAgICAgICB9KX0sIDMwMDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChhdXRvSGlkZUJvdHRvbUJhckNvb2tpZSkgewogICAgICAgICAgICAgICAgJCgiI3RvZ2dsZS1hdXRvaGlkZWJvdHRvbWJhci1idXR0b24iKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCIjdG9nZ2xlLWF1dG9oaWRlYm90dG9tYmFyLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS1hdXRvaGlkZWJvdHRvbWJhci1idXR0b24iLCAiYXV0b0hpZGVCb3R0b21CYXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge2xvY2F0aW9uLnJlbG9hZCgpO30pOwoKICAgICAgICAgICAgLy8g5Yib5L2c5Lit5b+D5oyJ6ZKuCiAgICAgICAgICAgIGxldCB3cml0ZUJsb2dDb29raWUgPSBjb25maWcuZ2V0KCJ3cml0ZUJsb2ciLCB0cnVlKTsKICAgICAgICAgICAgaWYgKCF3cml0ZUJsb2dDb29raWUpIHsKICAgICAgICAgICAgICAgICQoIi53cml0ZS1ib2xnLWJ0biIpLnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh3cml0ZUJsb2dDb29raWUpIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtd3JpdGVibG9nLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiN0b2dnbGUtd3JpdGVibG9nLWJ1dHRvbiIpLnByb3AoImNoZWNrZWQiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uZmlnLmxpc3RlbkJ1dHRvbigiI3RvZ2dsZS13cml0ZWJsb2ctYnV0dG9uIiwgIndyaXRlQmxvZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtsb2NhdGlvbi5yZWxvYWQoKTt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7bG9jYXRpb24ucmVsb2FkKCk7fSk7CgogICAgICAgICAgICAvLyDlj7Pkvqfmu5rliqjmnaEKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBsZXQgcmlnaHRTaWRlSGVpZ2h0ID0gMDsKICAgICAgICAgICAgICAgIGxldCBwYWdlSGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpOwogICAgICAgICAgICAgICAgcmlnaHRTaWRlSGVpZ2h0ICs9IGdldEhlaWdodCgkKCcuYWxpZ24taXRlbXMtc3RyZXRjaC5ncm91cF9pdGVtJykucGFyZW50KCkpOwogICAgICAgICAgICAgICAgcmlnaHRTaWRlSGVpZ2h0ICs9IGdldEhlaWdodCgkKCIjYXNpZGVQcm9maWxlIikpOwogICAgICAgICAgICAgICAgcmlnaHRTaWRlSGVpZ2h0ICs9IGdldEhlaWdodCgkKCIjYXNpZGVTZWFyY2hBcnRpY2xlIikpOwogICAgICAgICAgICAgICAgcmlnaHRTaWRlSGVpZ2h0ICs9IGdldEhlaWdodCgkKCIjYXNpZGVOZXdBcnRpY2xlIikpOwogICAgICAgICAgICAgICAgcmlnaHRTaWRlSGVpZ2h0ICs9IGdldEhlaWdodCgkKCIjYXNpZGVIb3RBcnRpY2xlIikpOwogICAgICAgICAgICAgICAgcmlnaHRTaWRlSGVpZ2h0ICs9IGdldEhlaWdodCgkKCIjYXNpZGVOZXdDb21tZW50cyIpKTsKICAgICAgICAgICAgICAgIHJpZ2h0U2lkZUhlaWdodCArPSBnZXRIZWlnaHQoJCgiI2FzaWRlQ2F0ZWdvcnkiKSk7CiAgICAgICAgICAgICAgICByaWdodFNpZGVIZWlnaHQgKz0gZ2V0SGVpZ2h0KCQoIiNhc2lkZUFyY2hpdmUiKSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJSaWdodCBzaWRlIHRvdGFsIGhlaWdodDogIiArIHJpZ2h0U2lkZUhlaWdodCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJQYWdlIGhlaWdodDogIiArIHBhZ2VIZWlnaHQpOwogICAgICAgICAgICAgICAgaWYgKHJpZ2h0U2lkZUhlaWdodCA+IHBhZ2VIZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAkKCcjcmVjb21tZW5kLXJpZ2h0JykuY3NzKCJvdmVyZmxvdyIsICJzY3JvbGwiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgMTUwMCk7CiAgICAgICAgfSBlbHNlIGlmIChudW0gPT09IDcpIHsKICAgICAgICAgICAgJCgiLm1lX3IiKVsxXS5yZW1vdmUoKTsKICAgICAgICB9IGVsc2UgaWYgKG51bSA9PT0gOCkgewogICAgICAgICAgICAvKiAkKCIuYXJ0aWNsZS1iYXItdG9wIikuYXBwZW5kKCI8YnI+Iik7CiAgICAgICAgICAgICQoIi5hcnRpY2xlLWJhci10b3AiKS5hcHBlbmQoJCgiLmFzaWRlLWJveC1mb290ZXJDbGFzc2lmeSIpLmNoaWxkcmVuKCJkZCIpLmh0bWwoKSk7CiAgICAgICAgICAgICQoImRsIikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgIHZhciBrZXkgPSAkKHRoaXMpLmNoaWxkcmVuKCJkdCIpOwogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJCh0aGlzKS5jaGlsZHJlbigiZGQiKS5jaGlsZHJlbigic3BhbiIpOwogICAgICAgICAgICAgICAgaWYgKGtleS5odG1sKCkuaW5kZXhPZigi5Y6f5YibIikgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSAkKHRoaXMpLmNoaWxkcmVuKCJkdCIpLmNoaWxkcmVuKCJhIikKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICQodGhpcykuY2hpbGRyZW4oImRkIikuY2hpbGRyZW4oImEiKS5jaGlsZHJlbigic3BhbiIpOwogICAgICAgICAgICAgICAgICAgIGFkZEluZm8oa2V5LCB2YWx1ZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5odG1sKCkgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkSW5mbyhrZXksIHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSApOwogICAgICAgICAgICBmdW5jdGlvbiBhZGRJbmZvKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBiaW5kID0ga2V5Lmh0bWwoKSArICImbmJzcDsiICsgdmFsdWUuaHRtbCgpICsgIiZuYnNwOyZuYnNwOyI7CiAgICAgICAgICAgICAgICAkKCIuYXJ0aWNsZS1iYXItdG9wIikuYXBwZW5kKGJpbmQgKyAiICIpOwogICAgICAgICAgICB9ICovCiAgICAgICAgICAgICQoIi5ibG9nX2NvbnRhaW5lcl9hc2lkZSIpLnJlbW92ZSgpOwoKICAgICAgICAgICAgLy8g5qCH6aKY5raI5oGv5o+Q6YaS5Y676ZmkCiAgICAgICAgICAgIGxldCB0aXRsZSA9IGRvY3VtZW50LnRpdGxlLnJlcGxhY2UoL15cKC4qP1wpL2csICIiKTsKICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTsKICAgICAgICAgICAgLy8g6K+E6K665aSN5Yi25oyJ6ZKuCiAgICAgICAgICAgICQoJy5jb21tZW50LWJveCcpLnByZXBlbmQoJzxidXR0b24gY2xhc3M9ImNvbW1lbnQtaGlkZGVuLXRleHQiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPkNPUFkgQlVUVE9OPC9idXR0b24+Jyk7CiAgICAgICAgICAgICQoJy5uZXctb3B0LWJveC5uZXctb3B0LWJveC1iZycpLnByZXBlbmQoJzxhIGNsYXNzPSJidG4gYnRuLXJlcG9ydCBidG4tY29weSIgb25jbGljaz0iamF2YXNjcmlwdDokKFwnLmNvbW1lbnQtaGlkZGVuLXRleHRcJykuYXR0cihcJ2RhdGEtY2xpcGJvYXJkLXRleHRcJywkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoXCcubmV3LWNvbW1lbnRcJykudGV4dCgpKSI+5aSN5Yi26K+E6K66PC9hPjxzcGFuIGNsYXNzPSJidG4tYmFyIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICQoJy5idG4tY29weScpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmRKUygnLmNvbW1lbnQtaGlkZGVuLXRleHQnKTsKICAgICAgICAgICAgICAgIGNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ0FjdGlvbjonLCBlLmFjdGlvbik7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdUZXh0OicsIGUudGV4dCk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7CiAgICAgICAgICAgICAgICAgICAgZS5jbGVhclNlbGVjdGlvbigpOwogICAgICAgICAgICAgICAgICAgICQoJy5idG4tY29weScpLmh0bWwoJ+aIkOWKnycpOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5idG4tY29weScpLmh0bWwoJ+WkjeWItuivhOiuuicpOwogICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjbGlwYm9hcmQub24oJ2Vycm9yJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FjdGlvbjonLCBlLmFjdGlvbik7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVHJpZ2dlcjonLCBlLnRyaWdnZXIpOwogICAgICAgICAgICAgICAgICAgICQoJy5idG4tY29weScpLmh0bWwoJ+Wksei0pe+8jOivt+aJi+WKqOWkjeWIticpOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5idG4tY29weScpLmh0bWwoJ+WkjeWItuivhOiuuicpOwogICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkKCIuY29tbWVudC1oaWRkZW4tdGV4dCIpLmNsaWNrKCk7CiAgICAgICAgICAgICAgICBjbGlwYm9hcmQuZGVzdHJveSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9LCAxMDApOwogICAgTlByb2dyZXNzLmluYygpOwp9CgovLyDphY3nva7mjqfliLbnsbsKY2xhc3MgQ29uZmlnIHsKICAgIGdldChrZXksIHZhbHVlKSB7CiAgICAgICAgdmFyIGNvb2tpZSA9ICQuY29va2llKGtleSk7CiAgICAgICAgaWYgKGNvb2tpZSA9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgbmV3IENvbmZpZygpLnNldChrZXksIHZhbHVlKTsKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygiUmVuZXcga2V5OiAiICsga2V5ICsgIiA6ICIgKyB2YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5kZWJ1ZygiUmVhZCBrZXk6ICIgKyBrZXkgKyAiIDogIiArIGNvb2tpZSk7CiAgICAgICAgaWYgKGNvb2tpZSA9PT0gInRydWUiKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgaWYgKGNvb2tpZSA9PT0gImZhbHNlIikgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICByZXR1cm4gY29va2llOwogICAgfQoKICAgIHNldChzZXRLZXksIHNldFZhbHVlKSB7CiAgICAgICAgJC5jb29raWUoc2V0S2V5LCBzZXRWYWx1ZSwgewogICAgICAgICAgICBwYXRoOiAnLycsCiAgICAgICAgICAgIGV4cGlyZXM6IDM2NQogICAgICAgIH0pOwogICAgICAgIGNvbnNvbGUuZGVidWcoIktleSBzZXQ6ICIgKyBzZXRLZXkgKyAiIDogIiArIHNldFZhbHVlKTsKICAgIH0KCiAgICBsaXN0ZW5CdXR0b24oZWxlbWVudCwgbGlzdGVuS2V5LCB0cnVlQWN0aW9uLCBmYWxzZUFjdGlvbikgewogICAgICAgICQoZWxlbWVudCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBsZXQgc3RhdHVzID0gbmV3IENvbmZpZygpLmdldChsaXN0ZW5LZXksIHRydWUpOwogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJTdGF0dXM6ICIgKyBzdGF0dXMpOwogICAgICAgICAgICBpZiAoc3RhdHVzID09PSAidHJ1ZSIgfHwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJLZXkgc2V0OiAiICsgbGlzdGVuS2V5ICsgIiA6OiAiICsgZmFsc2UpOwogICAgICAgICAgICAgICAgbmV3IENvbmZpZygpLnNldChsaXN0ZW5LZXksIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIktleSBzZXQ6ICIgKyBsaXN0ZW5LZXkgKyAiIDo6ICIgKyB0cnVlKTsKICAgICAgICAgICAgICAgIG5ldyBDb25maWcoKS5zZXQobGlzdGVuS2V5LCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGxpc3RlbkJ1dHRvbkFuZEFjdGlvbihlbGVtZW50LCBsaXN0ZW5LZXksIHRydWVBY3Rpb24sIGZhbHNlQWN0aW9uKSB7CiAgICAgICAgJChlbGVtZW50KS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBuZXcgQ29uZmlnKCkuZ2V0KGxpc3RlbktleSwgdHJ1ZSk7CiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIlN0YXR1czogIiArIHN0YXR1cyk7CiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICJ0cnVlIiB8fCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIktleSBzZXQ6ICIgKyBsaXN0ZW5LZXkgKyAiIDo6ICIgKyBmYWxzZSk7CiAgICAgICAgICAgICAgICBuZXcgQ29uZmlnKCkuc2V0KGxpc3RlbktleSwgZmFsc2UpOwogICAgICAgICAgICAgICAgZmFsc2VBY3Rpb24oKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoIktleSBzZXQ6ICIgKyBsaXN0ZW5LZXkgKyAiIDo6ICIgKyB0cnVlKTsKICAgICAgICAgICAgICAgIG5ldyBDb25maWcoKS5zZXQobGlzdGVuS2V5LCB0cnVlKTsKICAgICAgICAgICAgICAgIHRydWVBY3Rpb24oKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQp9CgpmdW5jdGlvbiBzaG93VGlwcygpIHsKCXZhciBjb25maWcgPSB7CgkJY29udGVudDogIuasoui/juS9v+eUqCBDU0ROR3JlZW5lcu+8jOe7v+WMluiuvuWumuaMiemSruWcqOi/memHjO+8gTxicj48YSBocmVmPSdqYXZhc2NyaXB0OiQoXCIudHJpcHNcIikucmVtb3ZlKCk7Jz7lpb3nmoTvvIzku6XlkI7kuI3lho3mj5DnpLrmiJE8L2E+IiwKCQl0eXBlOiAiaHRtbCIsCgkJYWxpZ25UbzogWyJib3R0b20iLCAibGVmdCJdLAoJCXRyaWdnZXI6ICJzaG93IiwKCQlpc2Nsb3NlOiBmYWxzZSwKCQljb2xvcjogWyIjQjJFMjgxIiwgIiNCMkUyODEiXQoJfTsKCSQoIiNncmVlbmVyU2V0dGluZ3MiKS5zaG93VGlwcyhjb25maWcpOwp9CgpmdW5jdGlvbiBnZXRIZWlnaHQoZWxlbWVudCkgewogICAgbGV0IG91dGVySGVpZ2h0ID0gZWxlbWVudC5vdXRlckhlaWdodCgpOwogICAgaWYgKG91dGVySGVpZ2h0ID09PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gb3V0ZXJIZWlnaHQ7Cn0K","requires":[{"meta":{"name":"jquery.cookie.js","url":"https://cdn.jsdelivr.net/npm/jquery.cookie/jquery.cookie.js","ts":1605519462334,"mimetype":"text/javascript"},"source":"LyohCiAqIGpRdWVyeSBDb29raWUgUGx1Z2luIHYxLjQuMQogKiBodHRwczovL2dpdGh1Yi5jb20vY2FyaGFydGwvanF1ZXJ5LWNvb2tpZQogKgogKiBDb3B5cmlnaHQgMjAxMyBLbGF1cyBIYXJ0bAogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UKICovCihmdW5jdGlvbiAoZmFjdG9yeSkgewoJaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgewoJCS8vIEFNRAoJCWRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTsKCX0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CgkJLy8gQ29tbW9uSlMKCQlmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTsKCX0gZWxzZSB7CgkJLy8gQnJvd3NlciBnbG9iYWxzCgkJZmFjdG9yeShqUXVlcnkpOwoJfQp9KGZ1bmN0aW9uICgkKSB7CgoJdmFyIHBsdXNlcyA9IC9cKy9nOwoKCWZ1bmN0aW9uIGVuY29kZShzKSB7CgkJcmV0dXJuIGNvbmZpZy5yYXcgPyBzIDogZW5jb2RlVVJJQ29tcG9uZW50KHMpOwoJfQoKCWZ1bmN0aW9uIGRlY29kZShzKSB7CgkJcmV0dXJuIGNvbmZpZy5yYXcgPyBzIDogZGVjb2RlVVJJQ29tcG9uZW50KHMpOwoJfQoKCWZ1bmN0aW9uIHN0cmluZ2lmeUNvb2tpZVZhbHVlKHZhbHVlKSB7CgkJcmV0dXJuIGVuY29kZShjb25maWcuanNvbiA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IFN0cmluZyh2YWx1ZSkpOwoJfQoKCWZ1bmN0aW9uIHBhcnNlQ29va2llVmFsdWUocykgewoJCWlmIChzLmluZGV4T2YoJyInKSA9PT0gMCkgewoJCQkvLyBUaGlzIGlzIGEgcXVvdGVkIGNvb2tpZSBhcyBhY2NvcmRpbmcgdG8gUkZDMjA2OCwgdW5lc2NhcGUuLi4KCQkJcyA9IHMuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcIi9nLCAnIicpLnJlcGxhY2UoL1xcXFwvZywgJ1xcJyk7CgkJfQoKCQl0cnkgewoJCQkvLyBSZXBsYWNlIHNlcnZlci1zaWRlIHdyaXR0ZW4gcGx1c2VzIHdpdGggc3BhY2VzLgoJCQkvLyBJZiB3ZSBjYW4ndCBkZWNvZGUgdGhlIGNvb2tpZSwgaWdub3JlIGl0LCBpdCdzIHVudXNhYmxlLgoJCQkvLyBJZiB3ZSBjYW4ndCBwYXJzZSB0aGUgY29va2llLCBpZ25vcmUgaXQsIGl0J3MgdW51c2FibGUuCgkJCXMgPSBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKHBsdXNlcywgJyAnKSk7CgkJCXJldHVybiBjb25maWcuanNvbiA/IEpTT04ucGFyc2UocykgOiBzOwoJCX0gY2F0Y2goZSkge30KCX0KCglmdW5jdGlvbiByZWFkKHMsIGNvbnZlcnRlcikgewoJCXZhciB2YWx1ZSA9IGNvbmZpZy5yYXcgPyBzIDogcGFyc2VDb29raWVWYWx1ZShzKTsKCQlyZXR1cm4gJC5pc0Z1bmN0aW9uKGNvbnZlcnRlcikgPyBjb252ZXJ0ZXIodmFsdWUpIDogdmFsdWU7Cgl9CgoJdmFyIGNvbmZpZyA9ICQuY29va2llID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIG9wdGlvbnMpIHsKCgkJLy8gV3JpdGUKCgkJaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgISQuaXNGdW5jdGlvbih2YWx1ZSkpIHsKCQkJb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBjb25maWcuZGVmYXVsdHMsIG9wdGlvbnMpOwoKCQkJaWYgKHR5cGVvZiBvcHRpb25zLmV4cGlyZXMgPT09ICdudW1iZXInKSB7CgkJCQl2YXIgZGF5cyA9IG9wdGlvbnMuZXhwaXJlcywgdCA9IG9wdGlvbnMuZXhwaXJlcyA9IG5ldyBEYXRlKCk7CgkJCQl0LnNldFRpbWUoK3QgKyBkYXlzICogODY0ZSs1KTsKCQkJfQoKCQkJcmV0dXJuIChkb2N1bWVudC5jb29raWUgPSBbCgkJCQllbmNvZGUoa2V5KSwgJz0nLCBzdHJpbmdpZnlDb29raWVWYWx1ZSh2YWx1ZSksCgkJCQlvcHRpb25zLmV4cGlyZXMgPyAnOyBleHBpcmVzPScgKyBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnLCAvLyB1c2UgZXhwaXJlcyBhdHRyaWJ1dGUsIG1heC1hZ2UgaXMgbm90IHN1cHBvcnRlZCBieSBJRQoJCQkJb3B0aW9ucy5wYXRoICAgID8gJzsgcGF0aD0nICsgb3B0aW9ucy5wYXRoIDogJycsCgkJCQlvcHRpb25zLmRvbWFpbiAgPyAnOyBkb21haW49JyArIG9wdGlvbnMuZG9tYWluIDogJycsCgkJCQlvcHRpb25zLnNlY3VyZSAgPyAnOyBzZWN1cmUnIDogJycKCQkJXS5qb2luKCcnKSk7CgkJfQoKCQkvLyBSZWFkCgoJCXZhciByZXN1bHQgPSBrZXkgPyB1bmRlZmluZWQgOiB7fTsKCgkJLy8gVG8gcHJldmVudCB0aGUgZm9yIGxvb3AgaW4gdGhlIGZpcnN0IHBsYWNlIGFzc2lnbiBhbiBlbXB0eSBhcnJheQoJCS8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLiBBbHNvIHByZXZlbnRzIG9kZCByZXN1bHQgd2hlbgoJCS8vIGNhbGxpbmcgJC5jb29raWUoKS4KCQl2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdOwoKCQlmb3IgKHZhciBpID0gMCwgbCA9IGNvb2tpZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJCXZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTsKCQkJdmFyIG5hbWUgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7CgkJCXZhciBjb29raWUgPSBwYXJ0cy5qb2luKCc9Jyk7CgoJCQlpZiAoa2V5ICYmIGtleSA9PT0gbmFtZSkgewoJCQkJLy8gSWYgc2Vjb25kIGFyZ3VtZW50ICh2YWx1ZSkgaXMgYSBmdW5jdGlvbiBpdCdzIGEgY29udmVydGVyLi4uCgkJCQlyZXN1bHQgPSByZWFkKGNvb2tpZSwgdmFsdWUpOwoJCQkJYnJlYWs7CgkJCX0KCgkJCS8vIFByZXZlbnQgc3RvcmluZyBhIGNvb2tpZSB0aGF0IHdlIGNvdWxkbid0IGRlY29kZS4KCQkJaWYgKCFrZXkgJiYgKGNvb2tpZSA9IHJlYWQoY29va2llKSkgIT09IHVuZGVmaW5lZCkgewoJCQkJcmVzdWx0W25hbWVdID0gY29va2llOwoJCQl9CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfTsKCgljb25maWcuZGVmYXVsdHMgPSB7fTsKCgkkLnJlbW92ZUNvb2tpZSA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMpIHsKCQlpZiAoJC5jb29raWUoa2V5KSA9PT0gdW5kZWZpbmVkKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIE11c3Qgbm90IGFsdGVyIG9wdGlvbnMsIHRodXMgZXh0ZW5kaW5nIGEgZnJlc2ggb2JqZWN0Li4uCgkJJC5jb29raWUoa2V5LCAnJywgJC5leHRlbmQoe30sIG9wdGlvbnMsIHsgZXhwaXJlczogLTEgfSkpOwoJCXJldHVybiAhJC5jb29raWUoa2V5KTsKCX07Cgp9KSk7Cg=="},{"meta":{"name":"nprogress.js","url":"https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.js","ts":1605519462227,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"clipboard.min.js","url":"https://cdn.jsdelivr.net/npm/clipboard@2.0.6/dist/clipboard.min.js","ts":1605519462237,"mimetype":"text/javascript"},"source":""}]},{"name":"Github 镜像访问，加速下载","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://github.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1598935305637,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/zh-CN/scripts/398278/code/script.user.js","uuid":"f34e8243-9e62-408a-ae2d-e8d7c7bda1d2","source":"","resources":[],"requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js","ts":1605621962281,"mimetype":"text/javascript"},"source":""}]}]}